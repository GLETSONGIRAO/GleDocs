{"config":{"indexing":"full","lang":["pt"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Sobre o projeto GleDocs \u00b6 Chega de procurar no google a documenta\u00e7\u00e3o daquele c\u00f3digo que sempre se repete no dia a dia. Esse projeto tem como objetivo: Refer\u00eancia R\u00e1pida : para assuntos que do dia a dia em ci\u00eancia de dados, principalmente para coisas que s\u00e3o usadas sem muita frequ\u00eancia e sempre precisam ser consultadas novamente, como comandos do conda. Centralizar Estudos : Sempre gostei escrever tudo o que estou aprendendo, me ajuda a ficar mais motivado e focado no que estou estudando. Dentre os estudos que pretendo documentar est\u00e3o: Machine Learning Deep Learning Machine Learning Engineering Desenvolvimento Web Visualiza\u00e7\u00e3o de Dados C\u00e1lculo, estat\u00edstica, \u00e1lgebra linear... Compartilhar Projetos : Por aqui pretendo compartilhar alguns projetos pessoais, como: Implementa\u00e7\u00e3o de Modelos de Machine Learning (por enquanto apenas no github). Predi\u00e7\u00e3o de Fen\u00f3tipos (em constru\u00e7\u00e3o). Outros eventuais Sobre mim \u00b6 Engenheiro de Produ\u00e7\u00e3o pela Universidade Federal do Cear\u00e1 e Mestrando em Ci\u00eancias da Computa\u00e7\u00e3o na mesma universidade. Moro em Fortaleza no Cear\u00e1 e trabalho como Policial Penal. Divido meu tempo entre o trabalho, o mestrado e os estudos em ci\u00eancias de dados. Contatos \u00b6 Meus contatos profissionais e pessoais podem ser encontrados no rodap\u00e9 da p\u00e1gina, adoraria receber cr\u00edticas, sugest\u00f5es e ofertas de parceria ou colabora\u00e7\u00e3o.","title":"Home"},{"location":"#sobre-o-projeto-gledocs","text":"Chega de procurar no google a documenta\u00e7\u00e3o daquele c\u00f3digo que sempre se repete no dia a dia. Esse projeto tem como objetivo: Refer\u00eancia R\u00e1pida : para assuntos que do dia a dia em ci\u00eancia de dados, principalmente para coisas que s\u00e3o usadas sem muita frequ\u00eancia e sempre precisam ser consultadas novamente, como comandos do conda. Centralizar Estudos : Sempre gostei escrever tudo o que estou aprendendo, me ajuda a ficar mais motivado e focado no que estou estudando. Dentre os estudos que pretendo documentar est\u00e3o: Machine Learning Deep Learning Machine Learning Engineering Desenvolvimento Web Visualiza\u00e7\u00e3o de Dados C\u00e1lculo, estat\u00edstica, \u00e1lgebra linear... Compartilhar Projetos : Por aqui pretendo compartilhar alguns projetos pessoais, como: Implementa\u00e7\u00e3o de Modelos de Machine Learning (por enquanto apenas no github). Predi\u00e7\u00e3o de Fen\u00f3tipos (em constru\u00e7\u00e3o). Outros eventuais","title":"Sobre o projeto GleDocs"},{"location":"#sobre-mim","text":"Engenheiro de Produ\u00e7\u00e3o pela Universidade Federal do Cear\u00e1 e Mestrando em Ci\u00eancias da Computa\u00e7\u00e3o na mesma universidade. Moro em Fortaleza no Cear\u00e1 e trabalho como Policial Penal. Divido meu tempo entre o trabalho, o mestrado e os estudos em ci\u00eancias de dados.","title":"Sobre mim"},{"location":"#contatos","text":"Meus contatos profissionais e pessoais podem ser encontrados no rodap\u00e9 da p\u00e1gina, adoraria receber cr\u00edticas, sugest\u00f5es e ofertas de parceria ou colabora\u00e7\u00e3o.","title":"Contatos"},{"location":"AprendizadoSupervisionado/","text":"Aprendizado Supervisionado \u00b6 Nota\u00e7\u00e3o: \u00b6 Vari\u00e1veis preditoras: \\(x = (x_1, x_2, ..., x_d)\\) Vari\u00e1vel Alvo: \\(y\\) N\u00famero de exemplos de treino: \\(m\\) N\u00famero de vari\u00e1veis de treino: \\(d\\) Um exemplo de treino: \\((x_1, ..., x_d, y)\\) O i-\u00e9simo exemplo de treino: \\((X^i, y^i)\\) y predito pelo modelo: \\(\\hat{y}\\) A ideia do Aprendizado supervisionado \u00b6 graph TD A[(Conjunto de Treino)] --> B(Algoritmo de Aprendizado de M\u00e1quina); B ---> C([Modelo]); D(Novos Dados) --> C --> E(y_pred); Aprendizado Supervisionado em Partes: \u00b6 Modelo : No aprendizado supervisionado escolhemos um Modelo / Fun\u00e7\u00e3o / Hip\u00f3tese. Par\u00e2metros do modelo : O modelo escolhido tem seus par\u00e2metros que ser\u00e3o ajustados. Fun\u00e7\u00e3o custo : Uma fun\u00e7\u00e3o para quantificar o qu\u00e3o bem est\u00e1 ajustado o modelo. Objetivo : Minimizar a fun\u00e7\u00e3o custo com base nos par\u00e2metros da fun\u00e7\u00e3o. Procedimento de otimiza\u00e7\u00e3o : Procedimento utilizado para ajustar o modelo. Treinamento : Aplica\u00e7\u00e3o do procedimento de otimiza\u00e7\u00e3o para ajustar o modelo, o treinamento tem hiperpar\u00e2metros que ditam como o treinamento e a otimiza\u00e7\u00e3o ser\u00e3o executadas para ajustar o modelo. Predi\u00e7\u00e3o : O treinamento resulta em um modelo com par\u00e2metros ajustados que ser\u00e3o utilizado para mapear \\(x \\to \\hat{y}\\) . Gradiente Descendente \u00b6","title":"Aprendizado Supervisionado"},{"location":"AprendizadoSupervisionado/#aprendizado-supervisionado","text":"","title":"Aprendizado Supervisionado"},{"location":"AprendizadoSupervisionado/#notacao","text":"Vari\u00e1veis preditoras: \\(x = (x_1, x_2, ..., x_d)\\) Vari\u00e1vel Alvo: \\(y\\) N\u00famero de exemplos de treino: \\(m\\) N\u00famero de vari\u00e1veis de treino: \\(d\\) Um exemplo de treino: \\((x_1, ..., x_d, y)\\) O i-\u00e9simo exemplo de treino: \\((X^i, y^i)\\) y predito pelo modelo: \\(\\hat{y}\\)","title":"Nota\u00e7\u00e3o:"},{"location":"AprendizadoSupervisionado/#a-ideia-do-aprendizado-supervisionado","text":"graph TD A[(Conjunto de Treino)] --> B(Algoritmo de Aprendizado de M\u00e1quina); B ---> C([Modelo]); D(Novos Dados) --> C --> E(y_pred);","title":"A ideia do Aprendizado supervisionado"},{"location":"AprendizadoSupervisionado/#aprendizado-supervisionado-em-partes","text":"Modelo : No aprendizado supervisionado escolhemos um Modelo / Fun\u00e7\u00e3o / Hip\u00f3tese. Par\u00e2metros do modelo : O modelo escolhido tem seus par\u00e2metros que ser\u00e3o ajustados. Fun\u00e7\u00e3o custo : Uma fun\u00e7\u00e3o para quantificar o qu\u00e3o bem est\u00e1 ajustado o modelo. Objetivo : Minimizar a fun\u00e7\u00e3o custo com base nos par\u00e2metros da fun\u00e7\u00e3o. Procedimento de otimiza\u00e7\u00e3o : Procedimento utilizado para ajustar o modelo. Treinamento : Aplica\u00e7\u00e3o do procedimento de otimiza\u00e7\u00e3o para ajustar o modelo, o treinamento tem hiperpar\u00e2metros que ditam como o treinamento e a otimiza\u00e7\u00e3o ser\u00e3o executadas para ajustar o modelo. Predi\u00e7\u00e3o : O treinamento resulta em um modelo com par\u00e2metros ajustados que ser\u00e3o utilizado para mapear \\(x \\to \\hat{y}\\) .","title":"Aprendizado Supervisionado em Partes:"},{"location":"AprendizadoSupervisionado/#gradiente-descendente","text":"","title":"Gradiente Descendente"},{"location":"Conda/","text":"Criando um enviroment \u00b6 Envs s\u00e3o instalados no diret\u00f3rio envs dentro do diret\u00f3rio do conda Criar um env com conda: conda create --name myenv Apertar y quando conda perguntar \"proceed ([y]/n)?\" Isso cria um env sem nenhum pacote instalado. Env com vers\u00e3o espec\u00edfica de Python: conda create -n myenv python=3.9 Utilidades \u00b6 Ativando um enviroment \u00b6 conda activate myenv Informa\u00e7\u00f5es \u00b6 Mostar todos os ambientes criados. O que tem um asterisco * \u00e9 o atual. conda info --envs # ou conda env list Mostrar todos os pacotes de um env: conda list Usar pip em um env \u00b6 conda install -n myenv pip conda activate myenv pip <pip_subcommand> Clonando um enviroment \u00b6 conda create --name myclone --clone myenv Remover um Env \u00b6 conda remove --name myenv --all \u200b","title":"Conda"},{"location":"Conda/#criando-um-enviroment","text":"Envs s\u00e3o instalados no diret\u00f3rio envs dentro do diret\u00f3rio do conda Criar um env com conda: conda create --name myenv Apertar y quando conda perguntar \"proceed ([y]/n)?\" Isso cria um env sem nenhum pacote instalado. Env com vers\u00e3o espec\u00edfica de Python: conda create -n myenv python=3.9","title":"Criando um enviroment"},{"location":"Conda/#utilidades","text":"","title":"Utilidades"},{"location":"Conda/#ativando-um-enviroment","text":"conda activate myenv","title":"Ativando um enviroment"},{"location":"Conda/#informacoes","text":"Mostar todos os ambientes criados. O que tem um asterisco * \u00e9 o atual. conda info --envs # ou conda env list Mostrar todos os pacotes de um env: conda list","title":"Informa\u00e7\u00f5es"},{"location":"Conda/#usar-pip-em-um-env","text":"conda install -n myenv pip conda activate myenv pip <pip_subcommand>","title":"Usar pip em um env"},{"location":"Conda/#clonando-um-enviroment","text":"conda create --name myclone --clone myenv","title":"Clonando um enviroment"},{"location":"Conda/#remover-um-env","text":"conda remove --name myenv --all \u200b","title":"Remover um Env"},{"location":"EngenhariaDeSoftware/","text":"Engenharia de Software \u00b6 Pr\u00e1ticas de Engenharia de Software \u00b6 Escrever c\u00f3digo limpo e modular Melhorar a efici\u00eancia do c\u00f3digo Adicionar documenta\u00e7\u00e3o efetiva Usar controle de vers\u00e3o Teste Logging Code Reviews C\u00f3digo de Produ\u00e7\u00e3o \u00b6 C\u00f3digo em produ\u00e7\u00e3o precisa ser confi\u00e1vel e eficiente. C\u00f3digo Limpo : Leg\u00edvel, simples e conciso. Uma caracter\u00edstica do c\u00f3digo em produ\u00e7\u00e3o essencial para colabora\u00e7\u00e3o e manutenibilidade do software. Modular : Logicamente dividido em fun\u00e7\u00f5es e m\u00f3dulos. Torna o c\u00f3digo mais organizado, eficiente e reus\u00e1vel. Um m\u00f3dulo \u00e9 um arquivo que permite que o c\u00f3digo seja reusado. Encapsulando o c\u00f3digo em arquivos que podem ser importados em outros arquivos. Refatora\u00e7\u00e3o \u00b6 Reestrutura\u00e7\u00e3o do c\u00f3digo para melhorar a estrutura interna sem mudar a funcionalidade externa. A refatora\u00e7\u00e3o nos d\u00e1 a chance de escrever de escrever c\u00f3digo limpo e modular depois que ele j\u00e1 est\u00e1 funcionando. Vantagens : Reduz a carga de trabalho a longo prazo. Mias f\u00e1cil de dar manuten\u00e7\u00e3o no c\u00f3digo. Mais f\u00e1cil de reusar o c\u00f3digo. Ajuda a tornar um melhor desenvolvedor. Namespaces \u00b6 Usar nomes descritivos e implicar o tipo. Ex: is_ ou has_ para booleanos, age_list para listas. Ser consistente, mas diferenciar claramente. Evitar abrevia\u00e7\u00f5es e letras \u00fanicas. Com exce\u00e7\u00e3o de contadores como i ou j . Evitar nomes longos, colocar apenas informa\u00e7\u00e3o relevante nos nomes. Uso de espa\u00e7o em branco \u00b6 O padr\u00e3o de identa\u00e7\u00e3o em python s\u00e3o 4 espa\u00e7os. Separa se\u00e7\u00f5es com espa\u00e7o em branco. Limitar as linhas em 79 caracteres, docstrings em 72 caracteres. Escrevendo c\u00f3digo Modular \u00b6 DRY (Don't Repeat Yourself). Abstrair a l\u00f3gica para melhorar a legibilidade do c\u00f3digo. Uma fun\u00e7\u00e3o deve fazer apenas uma coisa. Tentar usar menos do que 3 argumentos por fun\u00e7\u00e3o. Efici\u00eancia do C\u00f3digo \u00b6 C\u00f3digo Eficiente Executa mais r\u00e1pido. Ocupa Menos espa\u00e7o na mem\u00f3ria. Usar opera\u00e7\u00f5es vetorizadas (NumPy). Teste de pertencimento em Sets \u00e9 mais r\u00e1pido do que em listas. Documenta\u00e7\u00e3o \u00b6 Texto adicionar ou ilustra\u00e7\u00e3o que vem com o Software ou est\u00e1 embutido no c\u00f3digo. \u00datil para clarificar partes complexas do c\u00f3digo, tornando o c\u00f3digo mais f\u00e1cil de navegar e entender porque diferentes componentes do programa s\u00e3o usados. Diferentes tipos de documenta\u00e7\u00e3o podem ser usados em diferentes n\u00edveis do programa: Coment\u00e1rios in-line. Docstrings. Documenta\u00e7\u00e3o do projeto. Teste \u00b6 Testar o c\u00f3digo \u00e9 essencial antes da implanta\u00e7\u00e3o, teste ajuda a descobrir erros e conclus\u00f5es precipitadas antes que elas tenham um impacto maior. Test Driven Development : Um processo de desenvolvimento onde teste s\u00e3o escritos para uma tarefa antes mesmo do c\u00f3digo para a execu\u00e7\u00e3o da tarefa. Teste Unit\u00e1rio : Um tipo de teste que cobre uma \"unidade\" de c\u00f3digo, geralmente uma \u00fanica fun\u00e7\u00e3o, de forma independente do resto do programa. Testes unit\u00e1rios tem a vantagem de serem isolados do resto do programa e n\u00e3o ter depend\u00eancias envolvidas, n\u00e3o necessitam de acessos a banco de dados ou APIs. Entretanto, para garantir que o programa inteiro esteja funcionando corretamente \u00e9 necess\u00e1rio fazer testes de integra\u00e7\u00e3o . Ferramentas para Testes Unit\u00e1rios : Come\u00e7ar com Pytest . Logging \u00b6 Logging \u00e9 o processo de gravar mensagens que descrevem os eventos que ocorreram enquanto o programa est\u00e1 rodando. Logging \u00e9 \u00fatil para entender os eventos que ocorrem enquanto o problema executa. Escolher o n\u00edvel apropriado para logging: DEBUG - Para qualquer coisa que acontece no programa. ERROR - Gravar qualquer erro que ocorre. INFO - Gravar todas as a\u00e7\u00f5es ocasionadas pelo usu\u00e1rio ou espec\u00edficas do sistema. Dica: Fornecer qualquer informa\u00e7\u00e3o \u00fatil. Code Review \u00b6 As perguntas abaixo ajudam a conduzir uma code review. O c\u00f3digo \u00e9 limpo e modular? Pode ser entendido facilmente? Nomes e espa\u00e7os s\u00e3o significantes? Pode ser fornecida outra camada de abstra\u00e7\u00e3o? Cada m\u00f3dulo \u00e9 necess\u00e1rio? Algum m\u00f3dulo ou fun\u00e7\u00e3o \u00e9 muito longa? O c\u00f3digo \u00e9 eficiente? Existe algum loop que pode ser vetorizado? Podem ser aplicadas melhores estruturas de dados? Pode ser diminu\u00edda a quantidade de c\u00e1lculos necess\u00e1rios em cada passo? Podem ser usados geradores ou multiprocessamento para otimizar algum passo? A documenta\u00e7\u00e3o \u00e9 efetiva? Os coment\u00e1rios in-line s\u00e3o concisos e significativos? Existe algum c\u00f3digo complexo que a documenta\u00e7\u00e3o n\u00e3o explica? As fun\u00e7\u00f5es t\u00eam docstrings efetivas? A documenta\u00e7\u00e3o necess\u00e1ria para o projeto \u00e9 fornecida? O c\u00f3digo est\u00e1 bem testado? O c\u00f3digo tem boa cobertura de testes? Os testes checam para casos interessantes? Os testes s\u00e3o leg\u00edveis? Testes podem ser mais eficientes? O logging \u00e9 efetivo? As mensagens de log s\u00e3o limpas, concisas e profissionais? Elas incluem toda a informa\u00e7\u00e3o \u00fatil e relevante? Elas usam o n\u00edvel apropriado de logging? Programa\u00e7\u00e3o Orientada a Objetos (OOP) \u00b6 Programa\u00e7\u00e3o Orientada a Objetos tem algumas vantagens sobre programa\u00e7\u00e3o procedural: Permite a cria\u00e7\u00e3o de programas grandes, modulares que podem ser facilmente expandidos. Esconde as implementa\u00e7\u00f5es do usu\u00e1rio final. Objetos s\u00e3o definidos por caracter\u00edsticas e a\u00e7\u00f5es. Defini\u00e7\u00f5es \u00b6 Classe: Uma receita, consistindo de m\u00e9todos e atributos. Objeto: Um inst\u00e2ncia de uma classe. Atributos: Uma descri\u00e7\u00e3o ou caracter\u00edstica. M\u00e9todo: Uma a\u00e7\u00e3o que um objeto pode tomar. Encapsulamento: Uma das ideias fundamentais da OOP. Podemos combinar fun\u00e7\u00f5es e dados em um \u00fanica entidade. Permite esconder detalhes da implementa\u00e7\u00e3o. Sintaxe: \u00b6 #definindo uma classe class Shirt (): def __init__ ( self , shirt_color , shirt_size , shirt_price ): self . color = shirt . color self . size = shirt . size self . price = shirt . price def set_price ( self , new_price ): self . price = new_price new_shirt = Shirt ( 'red' , 'G' ) M\u00e9todos Get e Set \u00b6 Em OOP tradicional, acesso e mudan\u00e7a de atributos s\u00e3o usadas com os m\u00e9todos Get e Set , e os atributos s\u00e3o definidos com _attribute como forma de avisar que um atributos \u00e9 privado, mesmo isso n\u00e3o existindo em python. class Shirt : def __init__ ( self , shirt_color , shirt_size , shirt_style , shirt_price ): self . _price = shirt_price def get_price ( self ): return self . _price def set_price ( self , new_price ): self . _price = new_price Docstrings \u00b6 N\u00e3o \u00e9 necess\u00e1rio definir \"self\" na docstring do m\u00e9todo, j\u00e1 est\u00e1 subtendido que qualquer m\u00e9todo ter\u00e1 self como primeiro input. class Pants : \"\"\"The Pants class represents an article of clothing sold in a store \"\"\" def __init__ ( self , color , waist_size , length , price ): \"\"\"Method for initializing a Pants object Args: color (str) waist_size (int) length (int) price (float) Attributes: color (str): color of a pants object waist_size (str): waist size of a pants object length (str): length of a pants object price (float): price of a pants object \"\"\" self . color = color self . waist_size = waist_size self . length = length self . price = price def change_price ( self , new_price ): \"\"\"The change_price method changes the price attribute of a pants object Args: new_price (float): the new price of the pants object Returns: None \"\"\" self . price = new_price def discount ( self , percentage ): \"\"\"The discount method outputs a discounted price of a pants object Args: percentage (float): a decimal representing the amount to discount Returns: float: the discounted price \"\"\" return self . price * ( 1 - percentage ) Recursos: PEP 257 \u2013 Docstring Conventions Numpy Docstring Guide PEP 8 guidelines for code layout","title":"Engenharia de Sofware"},{"location":"EngenhariaDeSoftware/#engenharia-de-software","text":"","title":"Engenharia de Software"},{"location":"EngenhariaDeSoftware/#praticas-de-engenharia-de-software","text":"Escrever c\u00f3digo limpo e modular Melhorar a efici\u00eancia do c\u00f3digo Adicionar documenta\u00e7\u00e3o efetiva Usar controle de vers\u00e3o Teste Logging Code Reviews","title":"Pr\u00e1ticas de Engenharia de Software"},{"location":"EngenhariaDeSoftware/#codigo-de-producao","text":"C\u00f3digo em produ\u00e7\u00e3o precisa ser confi\u00e1vel e eficiente. C\u00f3digo Limpo : Leg\u00edvel, simples e conciso. Uma caracter\u00edstica do c\u00f3digo em produ\u00e7\u00e3o essencial para colabora\u00e7\u00e3o e manutenibilidade do software. Modular : Logicamente dividido em fun\u00e7\u00f5es e m\u00f3dulos. Torna o c\u00f3digo mais organizado, eficiente e reus\u00e1vel. Um m\u00f3dulo \u00e9 um arquivo que permite que o c\u00f3digo seja reusado. Encapsulando o c\u00f3digo em arquivos que podem ser importados em outros arquivos.","title":"C\u00f3digo de Produ\u00e7\u00e3o"},{"location":"EngenhariaDeSoftware/#refatoracao","text":"Reestrutura\u00e7\u00e3o do c\u00f3digo para melhorar a estrutura interna sem mudar a funcionalidade externa. A refatora\u00e7\u00e3o nos d\u00e1 a chance de escrever de escrever c\u00f3digo limpo e modular depois que ele j\u00e1 est\u00e1 funcionando. Vantagens : Reduz a carga de trabalho a longo prazo. Mias f\u00e1cil de dar manuten\u00e7\u00e3o no c\u00f3digo. Mais f\u00e1cil de reusar o c\u00f3digo. Ajuda a tornar um melhor desenvolvedor.","title":"Refatora\u00e7\u00e3o"},{"location":"EngenhariaDeSoftware/#namespaces","text":"Usar nomes descritivos e implicar o tipo. Ex: is_ ou has_ para booleanos, age_list para listas. Ser consistente, mas diferenciar claramente. Evitar abrevia\u00e7\u00f5es e letras \u00fanicas. Com exce\u00e7\u00e3o de contadores como i ou j . Evitar nomes longos, colocar apenas informa\u00e7\u00e3o relevante nos nomes.","title":"Namespaces"},{"location":"EngenhariaDeSoftware/#uso-de-espaco-em-branco","text":"O padr\u00e3o de identa\u00e7\u00e3o em python s\u00e3o 4 espa\u00e7os. Separa se\u00e7\u00f5es com espa\u00e7o em branco. Limitar as linhas em 79 caracteres, docstrings em 72 caracteres.","title":"Uso de espa\u00e7o em branco"},{"location":"EngenhariaDeSoftware/#escrevendo-codigo-modular","text":"DRY (Don't Repeat Yourself). Abstrair a l\u00f3gica para melhorar a legibilidade do c\u00f3digo. Uma fun\u00e7\u00e3o deve fazer apenas uma coisa. Tentar usar menos do que 3 argumentos por fun\u00e7\u00e3o.","title":"Escrevendo c\u00f3digo Modular"},{"location":"EngenhariaDeSoftware/#eficiencia-do-codigo","text":"C\u00f3digo Eficiente Executa mais r\u00e1pido. Ocupa Menos espa\u00e7o na mem\u00f3ria. Usar opera\u00e7\u00f5es vetorizadas (NumPy). Teste de pertencimento em Sets \u00e9 mais r\u00e1pido do que em listas.","title":"Efici\u00eancia do C\u00f3digo"},{"location":"EngenhariaDeSoftware/#documentacao","text":"Texto adicionar ou ilustra\u00e7\u00e3o que vem com o Software ou est\u00e1 embutido no c\u00f3digo. \u00datil para clarificar partes complexas do c\u00f3digo, tornando o c\u00f3digo mais f\u00e1cil de navegar e entender porque diferentes componentes do programa s\u00e3o usados. Diferentes tipos de documenta\u00e7\u00e3o podem ser usados em diferentes n\u00edveis do programa: Coment\u00e1rios in-line. Docstrings. Documenta\u00e7\u00e3o do projeto.","title":"Documenta\u00e7\u00e3o"},{"location":"EngenhariaDeSoftware/#teste","text":"Testar o c\u00f3digo \u00e9 essencial antes da implanta\u00e7\u00e3o, teste ajuda a descobrir erros e conclus\u00f5es precipitadas antes que elas tenham um impacto maior. Test Driven Development : Um processo de desenvolvimento onde teste s\u00e3o escritos para uma tarefa antes mesmo do c\u00f3digo para a execu\u00e7\u00e3o da tarefa. Teste Unit\u00e1rio : Um tipo de teste que cobre uma \"unidade\" de c\u00f3digo, geralmente uma \u00fanica fun\u00e7\u00e3o, de forma independente do resto do programa. Testes unit\u00e1rios tem a vantagem de serem isolados do resto do programa e n\u00e3o ter depend\u00eancias envolvidas, n\u00e3o necessitam de acessos a banco de dados ou APIs. Entretanto, para garantir que o programa inteiro esteja funcionando corretamente \u00e9 necess\u00e1rio fazer testes de integra\u00e7\u00e3o . Ferramentas para Testes Unit\u00e1rios : Come\u00e7ar com Pytest .","title":"Teste"},{"location":"EngenhariaDeSoftware/#logging","text":"Logging \u00e9 o processo de gravar mensagens que descrevem os eventos que ocorreram enquanto o programa est\u00e1 rodando. Logging \u00e9 \u00fatil para entender os eventos que ocorrem enquanto o problema executa. Escolher o n\u00edvel apropriado para logging: DEBUG - Para qualquer coisa que acontece no programa. ERROR - Gravar qualquer erro que ocorre. INFO - Gravar todas as a\u00e7\u00f5es ocasionadas pelo usu\u00e1rio ou espec\u00edficas do sistema. Dica: Fornecer qualquer informa\u00e7\u00e3o \u00fatil.","title":"Logging"},{"location":"EngenhariaDeSoftware/#code-review","text":"As perguntas abaixo ajudam a conduzir uma code review. O c\u00f3digo \u00e9 limpo e modular? Pode ser entendido facilmente? Nomes e espa\u00e7os s\u00e3o significantes? Pode ser fornecida outra camada de abstra\u00e7\u00e3o? Cada m\u00f3dulo \u00e9 necess\u00e1rio? Algum m\u00f3dulo ou fun\u00e7\u00e3o \u00e9 muito longa? O c\u00f3digo \u00e9 eficiente? Existe algum loop que pode ser vetorizado? Podem ser aplicadas melhores estruturas de dados? Pode ser diminu\u00edda a quantidade de c\u00e1lculos necess\u00e1rios em cada passo? Podem ser usados geradores ou multiprocessamento para otimizar algum passo? A documenta\u00e7\u00e3o \u00e9 efetiva? Os coment\u00e1rios in-line s\u00e3o concisos e significativos? Existe algum c\u00f3digo complexo que a documenta\u00e7\u00e3o n\u00e3o explica? As fun\u00e7\u00f5es t\u00eam docstrings efetivas? A documenta\u00e7\u00e3o necess\u00e1ria para o projeto \u00e9 fornecida? O c\u00f3digo est\u00e1 bem testado? O c\u00f3digo tem boa cobertura de testes? Os testes checam para casos interessantes? Os testes s\u00e3o leg\u00edveis? Testes podem ser mais eficientes? O logging \u00e9 efetivo? As mensagens de log s\u00e3o limpas, concisas e profissionais? Elas incluem toda a informa\u00e7\u00e3o \u00fatil e relevante? Elas usam o n\u00edvel apropriado de logging?","title":"Code Review"},{"location":"EngenhariaDeSoftware/#programacao-orientada-a-objetos-oop","text":"Programa\u00e7\u00e3o Orientada a Objetos tem algumas vantagens sobre programa\u00e7\u00e3o procedural: Permite a cria\u00e7\u00e3o de programas grandes, modulares que podem ser facilmente expandidos. Esconde as implementa\u00e7\u00f5es do usu\u00e1rio final. Objetos s\u00e3o definidos por caracter\u00edsticas e a\u00e7\u00f5es.","title":"Programa\u00e7\u00e3o Orientada a Objetos (OOP)"},{"location":"EngenhariaDeSoftware/#definicoes","text":"Classe: Uma receita, consistindo de m\u00e9todos e atributos. Objeto: Um inst\u00e2ncia de uma classe. Atributos: Uma descri\u00e7\u00e3o ou caracter\u00edstica. M\u00e9todo: Uma a\u00e7\u00e3o que um objeto pode tomar. Encapsulamento: Uma das ideias fundamentais da OOP. Podemos combinar fun\u00e7\u00f5es e dados em um \u00fanica entidade. Permite esconder detalhes da implementa\u00e7\u00e3o.","title":"Defini\u00e7\u00f5es"},{"location":"EngenhariaDeSoftware/#sintaxe","text":"#definindo uma classe class Shirt (): def __init__ ( self , shirt_color , shirt_size , shirt_price ): self . color = shirt . color self . size = shirt . size self . price = shirt . price def set_price ( self , new_price ): self . price = new_price new_shirt = Shirt ( 'red' , 'G' )","title":"Sintaxe:"},{"location":"Estatistica/","text":"Tipos de Dados \u00b6 Conjunto de dados : \u00c9 um dos subprodutos de um estudo, cont\u00e9m as caracter\u00edsticas principais que se tem interesse em estudar de uma popula\u00e7\u00e3o ou uma amostra. Essas caracter\u00edsticas podem ser qualitativas ou quantitativas. Antes de uma an\u00e1lise inferencial, precisamos descrever e resumir os dados, para isso precisamos caracterizar os tipos de dados. Tipos de vari\u00e1veis: Qualitativas Nominais: N\u00e3o possuem ordena\u00e7\u00e3o inerente entre si. Ordinais: Podem ser ordenadas segundo um crit\u00e9rio quantitativo inerente a vari\u00e1vel em quest\u00e3o. Quantitativas Discretas: Descrevem uma quantidade cont\u00e1vel, seus valores podem ser enumerados de forma ordenada. Cont\u00ednuas: Descrevem medi\u00e7\u00f5es cujos valores potenciais s\u00e3o n\u00fameros que n\u00e3o podem ser ordenados de forma inequ\u00edvoca. Warning Na pr\u00e1tica, todas as vari\u00e1veis em um computador s\u00e3o cont\u00ednuas, pois existe uma quantidade finita de bits para armazenar os d\u00edgitos. Modelos Estat\u00edsticos Cada tipo de vari\u00e1vel est\u00e1 associada a um tipo de modelo estat\u00edstico. * Qualitativas nominais: Modelos de regress\u00e3o log\u00edstica ou modelos da teoria de resposta ao item. * Qualitativas ordinais: Modelos de regress\u00e3o ordinais, modelos log\u00edsticos multivariados, entre outros. * Quantitativas discretas: Poisson, binomiais, geom\u00e9tricos... * Quantitativa cont\u00ednua: Modelo Normal, El\u00edptico, normal assim\u00e9trico, gama, beta...","title":"Estat\u00edstica"},{"location":"Flask/","text":"Flask \u00b6 Introdu\u00e7\u00e3o \u00b6 Flask \u00e9 um framework de desenvolvimento web desenvolvido em Python. \u00c9 f\u00e1cil de aprender e de usar. \"Begginer-friendly\" porque n\u00e3o usa c\u00f3digos que devem ser sempre copiados ou depend\u00eancias, o que pode distrair da fun\u00e7\u00e3o prim\u00e1ria da aplica\u00e7\u00e3o. Features do Flask \u00b6 Fornece um servidor de desenvolvimento e um debugger. Usa templates Jinja2. Compat\u00edvel com WSGI 1.0. Fornece suporte integrado para testes unit\u00e1rios. Muitas extens\u00f5es dispon\u00edveis. Micro-framework \u00b6 Oposto a fullstack framework, que tamb\u00e9m oferecem m\u00f3dulos adicionais features como autentica\u00e7\u00e3o, banco de dados ORM, valida\u00e7\u00e3o de input e sanitiza\u00e7\u00e3o, etc... Flask \u00e9 conhecido como um micro-framework porque \u00e9 leve e apenas fornece componentes que s\u00e3o essenciais, como routing, request, handling, sessions . Para outras funcionalidades o desenvolvedor deve escrever m\u00f3dulos customizados ou usar uma extens\u00e3o. Essa abordagem evita boilerplate code. O Modelo Arquitetural Cliente-Servidor \u00b6 Cliente : Enviar requisi\u00e7\u00e3o para os servidores e enviar de volta os dados necess\u00e1rios. Servidor : Espera por requisi\u00e7\u00f5es dos clientes e responde a elas. O servidor responde a essas requisi\u00e7\u00f5es e envia a informa\u00e7\u00e3o que o cliente pediu. Comunica\u00e7\u00e3o cliente servidor \u00b6 Atrav\u00e9s de m\u00faltiplos protocolos diferentes. Em nosso contexto, HTTP ou HTTPS s\u00e3o usados. M\u00e9todos HTTP: GET POST PUT DELETE Uma aplica\u00e7\u00e3o Flask como um servidor \u00b6 A aplica\u00e7\u00e3o Flask aqui ser\u00e1 do lado servidor. o Browser agir\u00e1 como cliente mandando requisi\u00e7\u00f5es para nossa aplica\u00e7\u00e3o web. Ent\u00e3o a aplica\u00e7\u00e3o enviar\u00e1 a resposta apropriada. Arquitetura Model-Template-View (MTV) \u00b6 A arquitetura MTV \u00e9 uma varia\u00e7\u00e3o da arquitetura do MVC ( Model-View-Controler ). A arquitetura MVC \u00e9 um padr\u00e3o arquitetural de software no qual a l\u00f3gica da aplica\u00e7\u00e3o \u00e9 dividida em 3 componentes na base da funcionalidade: Models Views Controllers \u00c9 usado n\u00e3o apenas para aplica\u00e7\u00f5es Desktop como tamb\u00e9m para Web e Mobile. Componentes da Arquitetura MVC \u00b6 Models Models representam como os dados s\u00e3o armazenados no banco de dados. Cont\u00e9m todas as defini\u00e7\u00f5es de dados para a aplica\u00e7\u00e3o (o schema). Views Views s\u00e3o componentes que s\u00e3o vis\u00edveis ao usu\u00e1rio, como um output ou um Graphical User Interface (GUI). Controllers Controllers s\u00e3o componentes que agem como uma interface entre models e views . O controller interpreta as intera\u00e7\u00f5es do usu\u00e1rio (inputs) e executa tarefas nos models antes de retornar os dados apropriados atrav\u00e9s dos views. MTV \u00b6 A arquitetura MTV \u00e9 uma leve varia\u00e7\u00e3o da MVC . Por si s\u00f3, Flask \u00e9 um micro framwork e n\u00e3o cont\u00e9m suporte built-in para nenhum framework arquitetural. Entretanto, programadores que usam Flask t\u00eam a arquitetura MTV porque outro framework de desenvolvimento web baseado em Python, chamado Django a introduziu. Abaixo, uma compara\u00e7\u00e3o grosseira entre MVC e MTV: WSGI e Jinja2 \u00b6 Web Server Gateway Interface (WSGI) \u00b6 WSGI \u00e9 um padr\u00e3o que descreve as especifica\u00e7\u00f5es concernentes \u00e0 comunica\u00e7\u00e3o entre um servidor web e uma aplica\u00e7\u00e3o cliente. Os detalhes desse padr\u00e3o est\u00e3o presentes na PEP33. Alguns benef\u00edcios do WSGI: Flexibilidade com os componentes da aplica\u00e7\u00e3o. Interoperabilidade entre diferentes frameworks Python. Escalabilidade da aplica\u00e7\u00e3o com o aumento de usu\u00e1rios. Efici\u00eancia em termos de velocidade de desenvolvimento. N\u00e3o precisamos nos preocupar com detalhes internos do WSGI porque o modulo Flask lida com isso. A linguagem de template Jinja \u00b6 Jinja \u00e9 uma linguagem de template usada em Python. Podemos renderizar conte\u00fado din\u00e2mico em HTML usando Jinja. Hello World! \u00b6 A aplica\u00e7\u00e3o mais simples em Flask pode ser feita usando apenas um script. Chamaremos de app.py . O programa ser\u00e1 dividido em passos. Passo 1: Importando M\u00f3dulos \u00b6 Para essa aplica\u00e7\u00e3o, precisamos apenas do m\u00f3dulo Flask da biblioteca flask. from flask import Flask Passo 2: Criando um objeto Flask \u00b6 Precisamos criar um objeto com o modulo importado Flask. Esse objeto ser\u00e1 nossa aplica\u00e7\u00e3o WSGI chamada app . app = Flask ( __name__ ) Passo 3: Executar a aplica\u00e7\u00e3o em main \u00b6 Para executar a aplica\u00e7\u00e3o, chamaremos a fun\u00e7\u00e3o run() do nosso objeto app. if __name__ == \"__main__\" : app . run () Passo 4: Criar uma fun\u00e7\u00e3o view \u00b6 Antes de rodar a aplica\u00e7\u00e3o, precisamos dizer \u00e0 aplica\u00e7\u00e3o para mostrar algo como sa\u00edda no browser. Ent\u00e3o, criamos uma fun\u00e7\u00e3o chamada hello() que retorna a string \"Hello World!\". A sa\u00edda retornada desta fun\u00e7\u00e3o ser\u00e1 mostrada no browser. def hello (): return \"Hello World\" ; Passo 5: Atribuir uma rota URL \u00b6 Finalmente, precisamos dizer ao app Flask quando chamar a fun\u00e7\u00e3o view hello() . Para este prop\u00f3sito, criaremos uma rota URL. Uma rota URL \u00e9 associada a cada fun\u00e7\u00e3o view. Essa associa\u00e7\u00e3o \u00e9 criada usando o decorator route() antes de cada fun\u00e7\u00e3o view. @app . route ( \"/\" ) def hello (): return \"Hello World!\" ; Implementa\u00e7\u00e3o completa \u00b6 from flask import Flask app = Flask ( __name__ ) @app . route ( \"/\" ) def hello (): return \"Hello World!\" ; if __name__ == \"__main__\" : app . run ( debug = True , host = \"0.0.0.0\" , port = 3000 ) Rotas URL e Views \u00b6 A homepage de um website pode ser facilmente achada na URL hostname seguida de / , /home , /index ou algo auto explicativo. Estes tipos de URLs permitem que os usu\u00e1rios lembrem da URL e acessem facilmente. Seria inesperado se uma homepage fosse em uma URL aleat\u00f3ria como /39283@&3911 ou /more_eggs . Flask nos permite usar o decorator route() para vincular uma URL significativa a cada fun\u00e7\u00e3o view que criarmos. O decorator route() \u00b6 O decorator route leva os seguintes par\u00e2metros: rule : representa a regra de URL que \u00e9 passada como string ao decorador. endpoint (n\u00e3o necess\u00e1rio): \u00c9 o nome da fun\u00e7\u00e3o de view que \u00e9 vinculada a rota URL. options (n\u00e3o necess\u00e1rio): Par\u00e2metro opcional. Static Routing \u00b6 Em roteamento est\u00e1tico, especificamos uma string URL constante como uma regra para o decorator route() . Na aplica\u00e7\u00e3o abaixo especificamos duas rotas est\u00e1ticas tendo URLs / e educative , respectivamente. Nota : A rule \u00e9 uma string case-sensitive. Portanto, educative e Educative s\u00e3o URLs totalmente diferentes. Um Exemplo usando rotas URL est\u00e1ticas \u00b6 from flask import Flask , render_template app = Flask ( __name__ ) @app . route ( \"/\" ) def home (): return \"Welcome to the HomePage!\" @app . route ( \"/educative\" ) def learn (): return \"Happy Learning at Educative!\" if __name__ == \"__main__\" : app . run ( debug = True , host = \"0.0.0.0\" , port = 3000 ) Dynamic Routing \u00b6 Em roteamento din\u00e2mico, o par\u00e2metro rule n\u00e3o \u00e9 uma string constante e sim uma vari\u00e1vel . Variable Rules \u00b6 Em Flask podemos adicionar rules vari\u00e1veis dentro da rota URL ao usar a seguinte sintaxe: <variable_name> . A vari\u00e1vel chamada variable_name ser\u00e1 ent\u00e3o passada \u00e0 fun\u00e7\u00e3o view para ser usada. Exemplo usando rules vari\u00e1veis \u00b6 from flask import Flask app = Flask ( __name__ ) @app . route ( \"/\" ) def home (): return \"Welcome to the HomePage!\" @app . route ( \"/<my_name>\" ) def greatings ( my_name ): return \"Welcome \" + my_name + \"!\" if __name__ == \"__main__\" : app . run ( debug = True , host = \"0.0.0.0\" , port = 3000 ) Converter \u00b6 No exemplo anterior, a vari\u00e1vel my_name foi extra\u00edda da URL e foi convertida em uma string e passada para a fun\u00e7\u00e3o greetings() para ser usada. Este \u00e9 o comportamento padr\u00e3o do converter . @app . route ( '/square/<int:number>' ) def show_square ( number ): \"\"\"View that shows the square of the number passed by URL\"\"\" return \"Square of \" + str ( number ) + \" is: \" + str ( number * number ) Como usar Templates HTML \u00b6 Templates Est\u00e1ticos \u00b6 S\u00e3o arquivos HTML que permanecem constantes. De fato, arquivos HTML padr\u00e3o s\u00e3o est\u00e1ticos por natureza. Sempre que o mesmo arquivo \u00e9 renderizado, ele mostra o mesmo output, a menos que o arquivo seja alterado. At\u00e9 agora, estamos retornando apenas uma string de uma fun\u00e7\u00e3o view. Mas em uma aplica\u00e7\u00e3o do mundo real, esperamos que um arquivo HTML seja retornado e renderizado no tela do browser. Renderizando templates HTML \u00b6 HTML pode ser renderizado com Flask usando dois m\u00e9todos. Uma String \u00b6 Podemos utilizar HTML como uma string em uma fun\u00e7\u00e3o view. from flask import Flask app = Flask ( __name__ ) @app . route ( \"/\" ) def home (): return \"<h1>Welcome to the HomePage!</h1>\" if __name__ == \"__main__\" : app . run ( debug = True , host = \"0.0.0.0\" , port = 3000 ) Fun\u00e7\u00e3o render_template \u00b6 Retornar HTML como uma String funciona perfeitamente, mas n\u00e3o \u00e9 apropriado para aplica\u00e7\u00f5es pr\u00e1ticas. \u00c9 melhor manter c\u00f3digo e templates separados. Portanto, criamos arquivos separados contendo o c\u00f3digo HTML para os templates. Ent\u00e3o, estes arquivos HTML pode ser referenciados para dentro dos views pelos seus nomes. Flask cont\u00e9m uma fun\u00e7\u00e3o chamada render_template() que \u00e9 usada para renderizar os templates HTML desejados. Este m\u00e9todo tem os seguintes par\u00e2metros: template_name_or_list : O nome do template ou de uma lista de templates (o m\u00e9todo vai renderizar o primeiro template da lista). context (opcional): vari\u00e1vel que devem estar dispon\u00edveis dentro do template. O output de render_template() ent\u00e3o \u00e9 retornado pela view ao inv\u00e9s de uma simples String, como est\u00e1vamos fazendo previamente. def view_name (): return render_template ( template_name ) Estrat\u00e9gias de estrutura de arquivos \u00b6 O framework Flask procura pelos arquivos de template HTML dentro de um diret\u00f3rio nomeado \\templates . Este diret\u00f3rio deve ser posto de forma que Flask possa encontrar. Estrutura de arquivos em m\u00f3dulo \u00b6 Se seguir uma estrutura de arquivos modular em nosso projeto, um diret\u00f3rio separado chamado \"templates\" pode ser criado no mesmo diret\u00f3rio que o m\u00f3dulo principal da aplica\u00e7\u00e3o. (ex: app.py ). Estrutura de arquivo em pacotes \u00b6 Se a l\u00f3gica da aplica\u00e7\u00e3o est\u00e1 dividida em m\u00f3dulos separados, ent\u00e3o estes arquivos est\u00e3o presentes no mesmo pacote. Em Python, um pacote \u00e9 simplesmente um diret\u00f3rio contendo um arquivo nomeado como __init__.py . Se esta estrutura esta sendo seguida em nossa aplica\u00e7\u00e3o, ent\u00e3o iremos criar o diret\u00f3rio templates dentro do pacote da aplica\u00e7\u00e3o principal. Arquivos Est\u00e1ticos \u00b6 Como Servimos Arquivos Est\u00e1ticos? \u00b6 Arquivos est\u00e1ticos (ou assets), s\u00e3o arquivos que o servidor manda para o cliente \"como eles s\u00e3o\", sem qualquer interven\u00e7\u00e3o. Por exemplo, qualquer arquivo css , ou JavaScript que podemos ter em nosso website s\u00e3o enviados para o cliente sem qualquer modifica\u00e7\u00e3o. Passos para servir Arquivos Est\u00e1ticos \u00b6 Os passos a seguir s\u00e3o necess\u00e1rios para hospedar um asset est\u00e1tico. Criar um diret\u00f3rio \\static \u00b6 As mesmas estrat\u00e9gias de estruturas de arquivos tamb\u00e9m se aplicam aqui. Criar uma URL para arquivos est\u00e1ticos \u00b6 N\u00e3o usamos views para arquivos est\u00e1ticos. Ent\u00e3o, para criar uma URL separada para eles, usamos a fun\u00e7\u00e3o url_for() . Fun\u00e7\u00e3o url_for() \u00b6 A fun\u00e7\u00e3o url_for() \u00e9 usada para criar uma URL para certo endpoint. Podemos us\u00e1-la para criar URLs para views tamb\u00e9m. Ela leva o nome do endpoint e quaisquer vari\u00e1veis associadas como argumentos. url_for ( 'view_function_name' , variable_name = 'value_of_variable' ) \ud83e\udd14 Porque precisamos usar url_for() se podemos escrever a URL? A fun\u00e7\u00e3o url_for() sempre retorna a URL absoluta para o endpoint. Portanto, chamamos ela em qualquer lugar do projeto e n\u00e3o teremos problemas com caminhos relativos. Se acabarmos mudando o caminho para um endpoint ou rota para uma view, n\u00e3o temos que mudar a URL escrita em todo o projeto. A URL para um arquivo est\u00e1tico pode ser criada usando um endpoint static como a seguir: url_for ( 'static' , filename = 'name_of_file' ) Exemplo \u00b6 <!DOCTYPE html> < html > < head > < link rel = \"stylesheet\" href = \"{{url_for('static', filename='borders.css')}}\" /> </ head > < body > < h1 > Home Page! </ h1 > < p > Welcome to the homepage for \"How to Server Static Files\" Demo! </ p > </ body > </ html > Chaves duplas fazem parte da sintaxe de Jinja Templates Din\u00e2micos \u00b6 Templates Jinja2 \u00b6 Considere que estamos fazendo uma aplica\u00e7\u00e3o com m\u00faltiplos usu\u00e1rios, tal como uma rede social, cada usu\u00e1rio ter\u00e1 um perfil \u00fanico com informa\u00e7\u00f5es \u00fanicas associadas a ele. \u00c9 nosso trabalho na aplica\u00e7\u00e3o web servir um template \u00fanico contendo o conte\u00fado correspondente a usu\u00e1rio que est\u00e1 logado. Podemos observar, que do lado do servidor, um template gen\u00e9rico est\u00e1 colocado contendo uma variable rule . Quando este template \u00e9 renderizado no lado do cliente, uma valor apropriado \u00e9 colocado ao inv\u00e9s da rule . Esse novo valor \u00e9 de acordo com o contexto da aplica\u00e7\u00e3o. Este tipo de comportamento din\u00e2mico de um template \u00e9 chamado de dynamic templating . Muitas tecnologias server-side nos permitem implementar comportamento de template din\u00e2mico. Flask tem suporte embutido para uma engine para cria\u00e7\u00e3o de templates din\u00e2micos chamada Jinja . A Engine de Template Jinja \u00b6 Um arquivo de template Jinja \u00e9 um arquivo de texto que n\u00e3o tem uma extens\u00e3o em particular. Usaremos extens\u00e3o .html com os arquivos de template porque eles tamb\u00e9m ir\u00e3o incluir sintaxe HTML . Delimitadores \u00b6 {% ... %} \u00e9 usado para declara\u00e7\u00f5es. {{ ... }} \u00e9 usado para vari\u00e1veis. {# ... #} \u00e9 usado para coment\u00e1rios. # ... ## \u00e9 usado para declara\u00e7\u00f5es de linha. Vari\u00e1veis \u00b6 Podemos inserir vari\u00e1veis dentro de templates seguindo estes dois passos: 1 . O objeto \u00e9 fornecido com um argumento nomeado para a fun\u00e7\u00e3o render_template() . return render_template ( \"index.html\" , my_object = Object ) O valor desse objeto \u00e9 buscado dentro do template usando a sintaxe {{}} . {{ my_object }} Fluxo de controle com Jinja \u00b6 Jinja tamb\u00e9m fornece sintaxe para lidar com fluxo de controle de um aplica\u00e7\u00e3o dentro dos seus templates. Loops e condi\u00e7\u00f5es podem ser adicionadas aos templates utilizando a sintaxe pythonica fornecida pelo Jinja. Loops \u00b6 A sintaxe de for \u00e9 bem parecida com a de python. { % for elements in array % } ... { % endfor % } Condicionais \u00b6 { % if true % } { % endif % } M\u00faltiplas ramifica\u00e7\u00f5es utilizando elif e else . { % if ... % } { % elif ... % } { % else % } { % endif % } Template Inheritance \u00b6 Blocks \u00b6 Em Jinja, blocks s\u00e3o usados como placeholders e tamb\u00e9m como substitutos. No template pai , estes blocos s\u00e3o usados como placeholders . Enquanto que no template filho, eles s\u00e3o usados como substitutos. base.html \u00b6 <!DOCTYPE html> < html lang = \"en\" > < head > < link rel = \"stylesheet\" href = \"{{url_for('static', filename='format.css')}}\" /> < title > {% block title %} <!-- Placeholder for Title --> {% endblock %} - Jinja Demo </ title > {% block head %} <!-- Placeholder for Other Imports --> {% endblock %} </ head > < body > < div id = \"header\" > JINJA DEMO </ div > < div id = \"content\" > {% block content %} <!-- Placeholder for Page Content --> {% endblock %} </ div > < div id = \"footer\" > Copyright \u00a9 2019 All Rights Reserved </ div > </ body > </ html > home.html \u00b6 { % extends \"base.html\" % } < ! -- Replacement for Title --> { % block title % } Home Page { % endblock % } < ! -- Replacement for Content --> { % block content % } < h1 > Home Page </ h1 > < p > Welcome to the Jinja2 Demo .</ p > { % endblock % } about.html \u00b6 {% extends \"base.html\" %} <!-- Replacement for Title --> {% block title %} About Page {% endblock %} <!-- Replacement for Content --> {% block content %} < h1 > About Page </ h1 > < p > In this lesson we are learning about Template Inheritance </ p > {% endblock %} Formul\u00e1rios \u00b6 O pacote Flask n\u00e3o fornece uma forma de lidar com formul\u00e1rios. Existem duas formas que desenvolvedor lidam com isso: Via objeto request . Via extens\u00e3o Flask-WTF . Utilizando Request \u00b6 Por padr\u00e3o, o decorator route() serve apenas requisi\u00e7\u00f5es get . Portanto, devemos fornecer um par\u00e2metro extra, chamado methods para o decorator route() . @app . route ( \"/login\" , methods = [ \"GET\" , \"POST\" ]) login.html {% block content %} < h1 > Login </ h1 > < form action = \"{{url_for('login')}}\" method = \"POST\" > Email: < br > < input type = \"text\" name = \"email\" > < br > Password: < br > < input type = \"password\" name = \"password\" > < br >< br > < input type = \"submit\" value = \"Login\" > </ form > {% endblock %} Data Handling usando objeto Request \u00b6 Para acessar dados enviados pelo usu\u00e1rio usamos o objeto global request . from flask import request Recebendo o tipo de method de request. \u00b6 Podemos utilizar o atributo method do objeto request para determinar o m\u00e9todo de um requisi\u00e7\u00e3o entrante. @app . route ( \"/login\" , methods = [ \"GET\" , \"POST\" ]) def login (): if request . method == \"POST\" : ... else ... return render_template ( \"login.html\" ) Recebendo Form data de request \u00b6 Podemos usar o atributo form de um objeto request para obter os valores que o usu\u00e1rio submeteu. a form \u00e9 uma estrutura de dados especial chamado ImmutableMultiDict . @app . route ( \"/login\" , methods = [ \"GET\" , \"POST\" ]) def login (): if request . method == \"POST\" : email = request . form [ \"email\" ] password = request . form [ \"password\" ] ... else : ... return render_template ( \"login.html\" ) Exemplo com L\u00f3gica de Valida\u00e7\u00e3o \u00b6 from flask import Flask , render_template from flask import request app = Flask ( __name__ ) users = { \"archie.andrews@email.com\" : \"football4life\" , \"veronica.lodge@email.com\" : \"fashiondiva\" } @app . route ( \"/\" ) def home (): return render_template ( \"home.html\" ) @app . route ( \"/login\" , methods = [ \"GET\" , \"POST\" ]) def login (): if request . method == \"POST\" : email = request . form [ \"email\" ] password = request . form [ \"password\" ] if email in users and users [ email ] == password : return render_template ( \"login.html\" , message = \"Successfully Logged In\" ) return render_template ( \"login.html\" , message = \"Incorrect Email or Password\" ) return render_template ( \"login.html\" ) if __name__ == \"__main__\" : app . run ( debug = True , host = \"0.0.0.0\" , port = 3000 ) login.html {% block content %} < h1 > Login </ h1 > {% if message %} {{ message }} {% endif %} < form action = \"{{url_for('login')}}\" method = \"POST\" > Email: < br > < input type = \"text\" name = \"email\" > < br > Password: < br > < input type = \"password\" name = \"password\" > < br >< br > < input type = \"submit\" value = \"Login\" > </ form > < hr > {% endblock %} Criando Formul\u00e1rios usando Flask-WTF e WTForms \u00b6 Em nossa aplica\u00e7\u00e3o n\u00e3o t\u00ednhamos nenhuma checagem para email e password porque era um exemplo simples. Se quisermos adicionar esses checks dever\u00edamos escreve l\u00f3gica para isso no front end ou no backend (dentro da view login ). Em aplica\u00e7\u00f5es maiores esses tipos de componentes extras podem facilmente se tornar boiler-plate e dif\u00edcil de ler, para esse prop\u00f3sito algumas biblioteca tornam este processo mais f\u00e1cil. WTForms : \u00c9 um biblioteca que torna trabalhar com formul\u00e1rios f\u00e1cil. Ela lida n\u00e3o apenas com valida\u00e7\u00e3o mas tamb\u00e9m com a renderiza\u00e7\u00e3o no front-end. Adicionalmente, WTForms n\u00e3o \u00e9 limitada somente a Flask. Flask-WTF : \u00c9 uma biblioteca espec\u00edfica de Flask que integra a biblioteca WTForm com Flask . Age como um add-on de WTForms e adiciona alguns componentes extra, como seguran\u00e7a. Criando um m\u00f3dulo forms: Primeiro, separamos nosso m\u00f3dulo da aplica\u00e7\u00e3o do m\u00f3dulo dos formul\u00e1rios. Adicionaremos um novo arquivo chamado forms.py , que agir\u00e1 como um m\u00f3dulo de formul\u00e1rios. Importando FlaskForm de flask_wtf : from flask_wtf import FlaskForm # Essa classe \u00e9 uma subclasse de Form da bilioteca wtforms Criando classe LoginForm : Para cada formul\u00e1rio em nosso website, criaremos uma classe a medida em que estamos criando um formul\u00e1rio de login. Portanto, vamos nomear essa classe LoginForm . Esta classe ir\u00e1 herdar da classe FlaskForm importada previamente. class LoginForm ( FlaskForm ): ... Adicionando campos de formul\u00e1rio de wtforms O formul\u00e1rio de login anterior tinha 3 componentes: Um campo de input para email. Um campo de input para password. O campo do bot\u00e3o submit. Para todo campo poss\u00edvel, wtforms tem classes associadas. Para este exemplo particular, importaremos apenas os campos que precisamos: StringField para email. PasswordField para um password. SubmitField para o bot\u00e3o submit. from wtforms import StringField , PasswordField , SubmitField Agora vamos criar inst\u00e2ncias dessas classes como vari\u00e1veis membros da nossa classe e iremos passar os r\u00f3tulos desses campos como inputs para os construtores. class LoginForm ( FlaskForm ): email = StringField ( 'Email' ) password = PasswordField ( 'Password' ) submit = SubmitField ( 'Login' ) Adicionar validadores de campo do wtforms : Validadores s\u00e3o regras e checks que queremos aplicar aos nossos campos dentro de um formul\u00e1rio. Por exemplo, em um campo de email queremos ter certeza de que o input \u00e9 um email v\u00e1lido. Para esse prop\u00f3sito iremos usar o validador Email . from wtforms.validators import InputRequired , Email Para aplicar estes validadores aos campos, fornecemos uma lista de validadores como par\u00e2metros a eles: class LoginForm ( FlaskForm ): email = StringField ( 'Email' , validators = [ InputRequired (), Email ()]) password = PasswordField ( 'Password' , validators = [ InputRequired ()]) submit = SubmitField ( 'Login' ) InputRequired(): coloca o atributo required no HTML. Email() : checa se o input \u00e9 um email v\u00e1lido. Implementa\u00e7\u00e3o completa from flask_wtf import FlaskForm from wtforms import StringField , PasswordField , SubmitField from wtforms.validators import InputRequired , Email class LoginForm ( FlaskForm ): email = StringField ( 'Email' , validators = [ InputRequired (), Email ()]) password = PasswordField ( 'Password' , validators = [ InputRequired ()]) submit = SubmitField ( 'Login' ) Renderizando formul\u00e1rios Flask-WTF em templates \u00b6 Para renderizar um formul\u00e1rio, primeiro precisamos retornar ele de uma view para um template . Modificando a view login em app.py \u00b6 Primeiro, importamos LoginForm do m\u00f3dulo forms. from forms import LoginForm Criar um objeto de LoginForm na view login . @app . route ( \"/login\" , methods = [ \"GET\" , \"POST\" ]) def login (): form = LoginForm () Retornar o formul\u00e1rio para o template: Esse formul\u00e1rio ser\u00e1 passado como argumento para a fun\u00e7\u00e3o render_template . return render_template ( \"login.html\" , form = form ) Implementa\u00e7\u00e3o completa: from flask import Flask , render_template from forms import LoginForm app = Flask ( __name__ ) users = { \"archie.andrews@email.com\" : \"football4life\" , \"veronica.lodge@email.com\" : \"fashiondiva\" } @app . route ( \"/\" ) def home (): return render_template ( \"home.html\" ) @app . route ( \"/login\" , methods = [ \"GET\" , \"POST\" ]) def login (): form = LoginForm () return render_template ( \"login.html\" , form = form ) if __name__ == \"__main__\" : app . run ( debug = True , host = \"0.0.0.0\" , port = 3000 ) Modificando login.html \u00b6 Ao inv\u00e9s do formul\u00e1rio em HTML , renderizaremos uma inst\u00e2ncia de de form de LoginForm que passamos ao template. Adicionando campos de formul\u00e1rio ao template \u00b6 Usamos a sintaxe de Jinja para renderizar os campos: Renderizar os campo de input: {{ form.field_name }} Retornar o label do input: {{ form.field_name.label }} implementa\u00e7\u00e3o completa em login.html : {% extends \"base.html\" %} {% block title %} Login Page {% endblock %} {% block content %} < h1 > Login </ h1 > < form action = \"{{url_for('login')}}\" method = \"POST\" > {{ form.email.label }}: < br > {{ form.email }} < br > {{ form.password.label }}: < br > {{ form.password }} < br > {{ form.csrf_token }} {{ form.submit }} </ form > < hr > {% endblock %} Banco de dados com SQLAlchemy \u00b6 Flask-SQLAlchemy \u00e9 um biblioteca para integrar SQLAlchemy com Flask: from flask_sqlalchemy import SQLAlchemy Iniciando uma conex\u00e3o com o banco de dados: app = Flask(__name__) # Caminho para o banco de dados app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///example.db' # app como par\u00e2metro para o construtor db = SQLAlchemy(app) Criando Modelos \u00b6 Criando uma classe de modelo para User: class User ( db . Model ): # adicionando colunas/atributos email = db . Column ( db . String , primary_key = True , unique = True , nullable = False ) password = db . Column ( db . String , nullable = False ) O primeiro par\u00e2metro define o tipo de dado. Tipos de dados Permitidos ''' markdown 1. Integer 2. String(size) 3. Text 4. DateTime 5. Float 6. Boolean 7. PickleType 8. LargeBinary ''' Outros par\u00e2metros comuns: primary_key : Se True , indica a chave prim\u00e1ria da tabela. nullable : Se False , \u00e9 obrigat\u00f3rio dar um valor para essa coluna. unique : Se True , ent\u00e3o todos os valores para essa coluna devem ser \u00fanicos. index : Se True , indica que a coluna ser\u00e1 indexada. Criando um tabela \u00b6 O comando abaixo cria uma tabela no banco de dados com os modelos constru\u00eddos. db.create_all() Relacionamento um Um-Para-Muitos \u00b6 O c\u00f3digo abaixo cria um relacionamento entre Employee e Department class Employee ( db . Model ): employee_id = db . Column ( db . Integer , primary_key = True ) first_name = db . Column ( db . String ( 50 ), nullable = False ) last_name = db . Column ( db . String ( 50 ), nullable = False ) department_name = db . Column ( db . String , db . ForeignKey ( 'department.name' ), nullable = False ) class Department ( db . Model ): name = db . Column ( db . String ( 50 ), primary_key = True , nullable = False ) location = db . Column ( db . String ( 120 ), nullable = False ) employees = db . relationship ( 'Employee' , backref = 'department' ) class Project ( db . Model ): project_id = db . Column ( db . Integer , primary_key = True , nullable = False ) name = db . Column ( db . String ( 100 ), nullable = False ) Pygal em Flask \u00b6 @app . route ( '/charts/line.svg' ) def line_route (): chart = pygal . Line () ... return chart . render_response ()","title":"Flask"},{"location":"Flask/#flask","text":"","title":"Flask"},{"location":"Flask/#introducao","text":"Flask \u00e9 um framework de desenvolvimento web desenvolvido em Python. \u00c9 f\u00e1cil de aprender e de usar. \"Begginer-friendly\" porque n\u00e3o usa c\u00f3digos que devem ser sempre copiados ou depend\u00eancias, o que pode distrair da fun\u00e7\u00e3o prim\u00e1ria da aplica\u00e7\u00e3o.","title":"Introdu\u00e7\u00e3o"},{"location":"Flask/#features-do-flask","text":"Fornece um servidor de desenvolvimento e um debugger. Usa templates Jinja2. Compat\u00edvel com WSGI 1.0. Fornece suporte integrado para testes unit\u00e1rios. Muitas extens\u00f5es dispon\u00edveis.","title":"Features do Flask"},{"location":"Flask/#micro-framework","text":"Oposto a fullstack framework, que tamb\u00e9m oferecem m\u00f3dulos adicionais features como autentica\u00e7\u00e3o, banco de dados ORM, valida\u00e7\u00e3o de input e sanitiza\u00e7\u00e3o, etc... Flask \u00e9 conhecido como um micro-framework porque \u00e9 leve e apenas fornece componentes que s\u00e3o essenciais, como routing, request, handling, sessions . Para outras funcionalidades o desenvolvedor deve escrever m\u00f3dulos customizados ou usar uma extens\u00e3o. Essa abordagem evita boilerplate code.","title":"Micro-framework"},{"location":"Flask/#o-modelo-arquitetural-cliente-servidor","text":"Cliente : Enviar requisi\u00e7\u00e3o para os servidores e enviar de volta os dados necess\u00e1rios. Servidor : Espera por requisi\u00e7\u00f5es dos clientes e responde a elas. O servidor responde a essas requisi\u00e7\u00f5es e envia a informa\u00e7\u00e3o que o cliente pediu.","title":"O Modelo Arquitetural Cliente-Servidor"},{"location":"Flask/#comunicacao-cliente-servidor","text":"Atrav\u00e9s de m\u00faltiplos protocolos diferentes. Em nosso contexto, HTTP ou HTTPS s\u00e3o usados. M\u00e9todos HTTP: GET POST PUT DELETE","title":"Comunica\u00e7\u00e3o cliente servidor"},{"location":"Flask/#uma-aplicacao-flask-como-um-servidor","text":"A aplica\u00e7\u00e3o Flask aqui ser\u00e1 do lado servidor. o Browser agir\u00e1 como cliente mandando requisi\u00e7\u00f5es para nossa aplica\u00e7\u00e3o web. Ent\u00e3o a aplica\u00e7\u00e3o enviar\u00e1 a resposta apropriada.","title":"Uma aplica\u00e7\u00e3o Flask como um servidor"},{"location":"Flask/#arquitetura-model-template-view-mtv","text":"A arquitetura MTV \u00e9 uma varia\u00e7\u00e3o da arquitetura do MVC ( Model-View-Controler ). A arquitetura MVC \u00e9 um padr\u00e3o arquitetural de software no qual a l\u00f3gica da aplica\u00e7\u00e3o \u00e9 dividida em 3 componentes na base da funcionalidade: Models Views Controllers \u00c9 usado n\u00e3o apenas para aplica\u00e7\u00f5es Desktop como tamb\u00e9m para Web e Mobile.","title":"Arquitetura Model-Template-View (MTV)"},{"location":"Flask/#componentes-da-arquitetura-mvc","text":"Models Models representam como os dados s\u00e3o armazenados no banco de dados. Cont\u00e9m todas as defini\u00e7\u00f5es de dados para a aplica\u00e7\u00e3o (o schema). Views Views s\u00e3o componentes que s\u00e3o vis\u00edveis ao usu\u00e1rio, como um output ou um Graphical User Interface (GUI). Controllers Controllers s\u00e3o componentes que agem como uma interface entre models e views . O controller interpreta as intera\u00e7\u00f5es do usu\u00e1rio (inputs) e executa tarefas nos models antes de retornar os dados apropriados atrav\u00e9s dos views.","title":"Componentes da Arquitetura MVC"},{"location":"Flask/#mtv","text":"A arquitetura MTV \u00e9 uma leve varia\u00e7\u00e3o da MVC . Por si s\u00f3, Flask \u00e9 um micro framwork e n\u00e3o cont\u00e9m suporte built-in para nenhum framework arquitetural. Entretanto, programadores que usam Flask t\u00eam a arquitetura MTV porque outro framework de desenvolvimento web baseado em Python, chamado Django a introduziu. Abaixo, uma compara\u00e7\u00e3o grosseira entre MVC e MTV:","title":"MTV"},{"location":"Flask/#wsgi-e-jinja2","text":"","title":"WSGI e Jinja2"},{"location":"Flask/#web-server-gateway-interface-wsgi","text":"WSGI \u00e9 um padr\u00e3o que descreve as especifica\u00e7\u00f5es concernentes \u00e0 comunica\u00e7\u00e3o entre um servidor web e uma aplica\u00e7\u00e3o cliente. Os detalhes desse padr\u00e3o est\u00e3o presentes na PEP33. Alguns benef\u00edcios do WSGI: Flexibilidade com os componentes da aplica\u00e7\u00e3o. Interoperabilidade entre diferentes frameworks Python. Escalabilidade da aplica\u00e7\u00e3o com o aumento de usu\u00e1rios. Efici\u00eancia em termos de velocidade de desenvolvimento. N\u00e3o precisamos nos preocupar com detalhes internos do WSGI porque o modulo Flask lida com isso.","title":"Web Server Gateway Interface (WSGI)"},{"location":"Flask/#a-linguagem-de-template-jinja","text":"Jinja \u00e9 uma linguagem de template usada em Python. Podemos renderizar conte\u00fado din\u00e2mico em HTML usando Jinja.","title":"A linguagem de template Jinja"},{"location":"Flask/#hello-world","text":"A aplica\u00e7\u00e3o mais simples em Flask pode ser feita usando apenas um script. Chamaremos de app.py . O programa ser\u00e1 dividido em passos.","title":"Hello World!"},{"location":"Flask/#rotas-url-e-views","text":"A homepage de um website pode ser facilmente achada na URL hostname seguida de / , /home , /index ou algo auto explicativo. Estes tipos de URLs permitem que os usu\u00e1rios lembrem da URL e acessem facilmente. Seria inesperado se uma homepage fosse em uma URL aleat\u00f3ria como /39283@&3911 ou /more_eggs . Flask nos permite usar o decorator route() para vincular uma URL significativa a cada fun\u00e7\u00e3o view que criarmos.","title":"Rotas URL e Views"},{"location":"Flask/#o-decorator-route","text":"O decorator route leva os seguintes par\u00e2metros: rule : representa a regra de URL que \u00e9 passada como string ao decorador. endpoint (n\u00e3o necess\u00e1rio): \u00c9 o nome da fun\u00e7\u00e3o de view que \u00e9 vinculada a rota URL. options (n\u00e3o necess\u00e1rio): Par\u00e2metro opcional.","title":"O decorator route()"},{"location":"Flask/#static-routing","text":"Em roteamento est\u00e1tico, especificamos uma string URL constante como uma regra para o decorator route() . Na aplica\u00e7\u00e3o abaixo especificamos duas rotas est\u00e1ticas tendo URLs / e educative , respectivamente. Nota : A rule \u00e9 uma string case-sensitive. Portanto, educative e Educative s\u00e3o URLs totalmente diferentes.","title":"Static Routing"},{"location":"Flask/#um-exemplo-usando-rotas-url-estaticas","text":"from flask import Flask , render_template app = Flask ( __name__ ) @app . route ( \"/\" ) def home (): return \"Welcome to the HomePage!\" @app . route ( \"/educative\" ) def learn (): return \"Happy Learning at Educative!\" if __name__ == \"__main__\" : app . run ( debug = True , host = \"0.0.0.0\" , port = 3000 )","title":"Um Exemplo usando rotas URL est\u00e1ticas"},{"location":"Flask/#dynamic-routing","text":"Em roteamento din\u00e2mico, o par\u00e2metro rule n\u00e3o \u00e9 uma string constante e sim uma vari\u00e1vel .","title":"Dynamic Routing"},{"location":"Flask/#converter","text":"No exemplo anterior, a vari\u00e1vel my_name foi extra\u00edda da URL e foi convertida em uma string e passada para a fun\u00e7\u00e3o greetings() para ser usada. Este \u00e9 o comportamento padr\u00e3o do converter . @app . route ( '/square/<int:number>' ) def show_square ( number ): \"\"\"View that shows the square of the number passed by URL\"\"\" return \"Square of \" + str ( number ) + \" is: \" + str ( number * number )","title":"Converter"},{"location":"Flask/#como-usar-templates-html","text":"","title":"Como usar Templates HTML"},{"location":"Flask/#templates-estaticos","text":"S\u00e3o arquivos HTML que permanecem constantes. De fato, arquivos HTML padr\u00e3o s\u00e3o est\u00e1ticos por natureza. Sempre que o mesmo arquivo \u00e9 renderizado, ele mostra o mesmo output, a menos que o arquivo seja alterado. At\u00e9 agora, estamos retornando apenas uma string de uma fun\u00e7\u00e3o view. Mas em uma aplica\u00e7\u00e3o do mundo real, esperamos que um arquivo HTML seja retornado e renderizado no tela do browser.","title":"Templates Est\u00e1ticos"},{"location":"Flask/#renderizando-templates-html","text":"HTML pode ser renderizado com Flask usando dois m\u00e9todos.","title":"Renderizando templates HTML"},{"location":"Flask/#uma-string","text":"Podemos utilizar HTML como uma string em uma fun\u00e7\u00e3o view. from flask import Flask app = Flask ( __name__ ) @app . route ( \"/\" ) def home (): return \"<h1>Welcome to the HomePage!</h1>\" if __name__ == \"__main__\" : app . run ( debug = True , host = \"0.0.0.0\" , port = 3000 )","title":"Uma String"},{"location":"Flask/#estrategias-de-estrutura-de-arquivos","text":"O framework Flask procura pelos arquivos de template HTML dentro de um diret\u00f3rio nomeado \\templates . Este diret\u00f3rio deve ser posto de forma que Flask possa encontrar.","title":"Estrat\u00e9gias de estrutura de arquivos"},{"location":"Flask/#arquivos-estaticos","text":"","title":"Arquivos Est\u00e1ticos"},{"location":"Flask/#como-servimos-arquivos-estaticos","text":"Arquivos est\u00e1ticos (ou assets), s\u00e3o arquivos que o servidor manda para o cliente \"como eles s\u00e3o\", sem qualquer interven\u00e7\u00e3o. Por exemplo, qualquer arquivo css , ou JavaScript que podemos ter em nosso website s\u00e3o enviados para o cliente sem qualquer modifica\u00e7\u00e3o.","title":"Como Servimos Arquivos Est\u00e1ticos?"},{"location":"Flask/#passos-para-servir-arquivos-estaticos","text":"Os passos a seguir s\u00e3o necess\u00e1rios para hospedar um asset est\u00e1tico.","title":"Passos para servir Arquivos Est\u00e1ticos"},{"location":"Flask/#templates-dinamicos","text":"","title":"Templates Din\u00e2micos"},{"location":"Flask/#templates-jinja2","text":"Considere que estamos fazendo uma aplica\u00e7\u00e3o com m\u00faltiplos usu\u00e1rios, tal como uma rede social, cada usu\u00e1rio ter\u00e1 um perfil \u00fanico com informa\u00e7\u00f5es \u00fanicas associadas a ele. \u00c9 nosso trabalho na aplica\u00e7\u00e3o web servir um template \u00fanico contendo o conte\u00fado correspondente a usu\u00e1rio que est\u00e1 logado. Podemos observar, que do lado do servidor, um template gen\u00e9rico est\u00e1 colocado contendo uma variable rule . Quando este template \u00e9 renderizado no lado do cliente, uma valor apropriado \u00e9 colocado ao inv\u00e9s da rule . Esse novo valor \u00e9 de acordo com o contexto da aplica\u00e7\u00e3o. Este tipo de comportamento din\u00e2mico de um template \u00e9 chamado de dynamic templating . Muitas tecnologias server-side nos permitem implementar comportamento de template din\u00e2mico. Flask tem suporte embutido para uma engine para cria\u00e7\u00e3o de templates din\u00e2micos chamada Jinja .","title":"Templates Jinja2"},{"location":"Flask/#template-inheritance","text":"","title":"Template Inheritance"},{"location":"Flask/#formularios","text":"O pacote Flask n\u00e3o fornece uma forma de lidar com formul\u00e1rios. Existem duas formas que desenvolvedor lidam com isso: Via objeto request . Via extens\u00e3o Flask-WTF .","title":"Formul\u00e1rios"},{"location":"Flask/#utilizando-request","text":"Por padr\u00e3o, o decorator route() serve apenas requisi\u00e7\u00f5es get . Portanto, devemos fornecer um par\u00e2metro extra, chamado methods para o decorator route() . @app . route ( \"/login\" , methods = [ \"GET\" , \"POST\" ]) login.html {% block content %} < h1 > Login </ h1 > < form action = \"{{url_for('login')}}\" method = \"POST\" > Email: < br > < input type = \"text\" name = \"email\" > < br > Password: < br > < input type = \"password\" name = \"password\" > < br >< br > < input type = \"submit\" value = \"Login\" > </ form > {% endblock %}","title":"Utilizando Request"},{"location":"Flask/#data-handling-usando-objeto-request","text":"Para acessar dados enviados pelo usu\u00e1rio usamos o objeto global request . from flask import request","title":"Data Handling usando objeto Request"},{"location":"Flask/#recebendo-o-tipo-de-method-de-request","text":"Podemos utilizar o atributo method do objeto request para determinar o m\u00e9todo de um requisi\u00e7\u00e3o entrante. @app . route ( \"/login\" , methods = [ \"GET\" , \"POST\" ]) def login (): if request . method == \"POST\" : ... else ... return render_template ( \"login.html\" )","title":"Recebendo o tipo de method de request."},{"location":"Flask/#recebendo-form-data-de-request","text":"Podemos usar o atributo form de um objeto request para obter os valores que o usu\u00e1rio submeteu. a form \u00e9 uma estrutura de dados especial chamado ImmutableMultiDict . @app . route ( \"/login\" , methods = [ \"GET\" , \"POST\" ]) def login (): if request . method == \"POST\" : email = request . form [ \"email\" ] password = request . form [ \"password\" ] ... else : ... return render_template ( \"login.html\" )","title":"Recebendo Form data de request"},{"location":"Flask/#criando-formularios-usando-flask-wtf-e-wtforms","text":"Em nossa aplica\u00e7\u00e3o n\u00e3o t\u00ednhamos nenhuma checagem para email e password porque era um exemplo simples. Se quisermos adicionar esses checks dever\u00edamos escreve l\u00f3gica para isso no front end ou no backend (dentro da view login ). Em aplica\u00e7\u00f5es maiores esses tipos de componentes extras podem facilmente se tornar boiler-plate e dif\u00edcil de ler, para esse prop\u00f3sito algumas biblioteca tornam este processo mais f\u00e1cil. WTForms : \u00c9 um biblioteca que torna trabalhar com formul\u00e1rios f\u00e1cil. Ela lida n\u00e3o apenas com valida\u00e7\u00e3o mas tamb\u00e9m com a renderiza\u00e7\u00e3o no front-end. Adicionalmente, WTForms n\u00e3o \u00e9 limitada somente a Flask. Flask-WTF : \u00c9 uma biblioteca espec\u00edfica de Flask que integra a biblioteca WTForm com Flask . Age como um add-on de WTForms e adiciona alguns componentes extra, como seguran\u00e7a. Criando um m\u00f3dulo forms: Primeiro, separamos nosso m\u00f3dulo da aplica\u00e7\u00e3o do m\u00f3dulo dos formul\u00e1rios. Adicionaremos um novo arquivo chamado forms.py , que agir\u00e1 como um m\u00f3dulo de formul\u00e1rios. Importando FlaskForm de flask_wtf : from flask_wtf import FlaskForm # Essa classe \u00e9 uma subclasse de Form da bilioteca wtforms Criando classe LoginForm : Para cada formul\u00e1rio em nosso website, criaremos uma classe a medida em que estamos criando um formul\u00e1rio de login. Portanto, vamos nomear essa classe LoginForm . Esta classe ir\u00e1 herdar da classe FlaskForm importada previamente. class LoginForm ( FlaskForm ): ... Adicionando campos de formul\u00e1rio de wtforms O formul\u00e1rio de login anterior tinha 3 componentes: Um campo de input para email. Um campo de input para password. O campo do bot\u00e3o submit. Para todo campo poss\u00edvel, wtforms tem classes associadas. Para este exemplo particular, importaremos apenas os campos que precisamos: StringField para email. PasswordField para um password. SubmitField para o bot\u00e3o submit. from wtforms import StringField , PasswordField , SubmitField Agora vamos criar inst\u00e2ncias dessas classes como vari\u00e1veis membros da nossa classe e iremos passar os r\u00f3tulos desses campos como inputs para os construtores. class LoginForm ( FlaskForm ): email = StringField ( 'Email' ) password = PasswordField ( 'Password' ) submit = SubmitField ( 'Login' ) Adicionar validadores de campo do wtforms : Validadores s\u00e3o regras e checks que queremos aplicar aos nossos campos dentro de um formul\u00e1rio. Por exemplo, em um campo de email queremos ter certeza de que o input \u00e9 um email v\u00e1lido. Para esse prop\u00f3sito iremos usar o validador Email . from wtforms.validators import InputRequired , Email Para aplicar estes validadores aos campos, fornecemos uma lista de validadores como par\u00e2metros a eles: class LoginForm ( FlaskForm ): email = StringField ( 'Email' , validators = [ InputRequired (), Email ()]) password = PasswordField ( 'Password' , validators = [ InputRequired ()]) submit = SubmitField ( 'Login' ) InputRequired(): coloca o atributo required no HTML. Email() : checa se o input \u00e9 um email v\u00e1lido. Implementa\u00e7\u00e3o completa from flask_wtf import FlaskForm from wtforms import StringField , PasswordField , SubmitField from wtforms.validators import InputRequired , Email class LoginForm ( FlaskForm ): email = StringField ( 'Email' , validators = [ InputRequired (), Email ()]) password = PasswordField ( 'Password' , validators = [ InputRequired ()]) submit = SubmitField ( 'Login' )","title":"Criando Formul\u00e1rios usando Flask-WTF e WTForms"},{"location":"Flask/#renderizando-formularios-flask-wtf-em-templates","text":"Para renderizar um formul\u00e1rio, primeiro precisamos retornar ele de uma view para um template .","title":"Renderizando formul\u00e1rios Flask-WTF em templates"},{"location":"Flask/#banco-de-dados-com-sqlalchemy","text":"Flask-SQLAlchemy \u00e9 um biblioteca para integrar SQLAlchemy com Flask: from flask_sqlalchemy import SQLAlchemy Iniciando uma conex\u00e3o com o banco de dados: app = Flask(__name__) # Caminho para o banco de dados app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///example.db' # app como par\u00e2metro para o construtor db = SQLAlchemy(app)","title":"Banco de dados com SQLAlchemy"},{"location":"Flask/#criando-modelos","text":"Criando uma classe de modelo para User: class User ( db . Model ): # adicionando colunas/atributos email = db . Column ( db . String , primary_key = True , unique = True , nullable = False ) password = db . Column ( db . String , nullable = False ) O primeiro par\u00e2metro define o tipo de dado. Tipos de dados Permitidos ''' markdown 1. Integer 2. String(size) 3. Text 4. DateTime 5. Float 6. Boolean 7. PickleType 8. LargeBinary ''' Outros par\u00e2metros comuns: primary_key : Se True , indica a chave prim\u00e1ria da tabela. nullable : Se False , \u00e9 obrigat\u00f3rio dar um valor para essa coluna. unique : Se True , ent\u00e3o todos os valores para essa coluna devem ser \u00fanicos. index : Se True , indica que a coluna ser\u00e1 indexada.","title":"Criando Modelos"},{"location":"Flask/#relacionamento-um-um-para-muitos","text":"O c\u00f3digo abaixo cria um relacionamento entre Employee e Department class Employee ( db . Model ): employee_id = db . Column ( db . Integer , primary_key = True ) first_name = db . Column ( db . String ( 50 ), nullable = False ) last_name = db . Column ( db . String ( 50 ), nullable = False ) department_name = db . Column ( db . String , db . ForeignKey ( 'department.name' ), nullable = False ) class Department ( db . Model ): name = db . Column ( db . String ( 50 ), primary_key = True , nullable = False ) location = db . Column ( db . String ( 120 ), nullable = False ) employees = db . relationship ( 'Employee' , backref = 'department' ) class Project ( db . Model ): project_id = db . Column ( db . Integer , primary_key = True , nullable = False ) name = db . Column ( db . String ( 100 ), nullable = False )","title":"Relacionamento um Um-Para-Muitos"},{"location":"Flask/#pygal-em-flask","text":"@app . route ( '/charts/line.svg' ) def line_route (): chart = pygal . Line () ... return chart . render_response ()","title":"Pygal em Flask"},{"location":"Lan%C3%A7andoWebsite/","text":"Introdu\u00e7\u00e3o \u00b6 Localhost \u00b6 O termo \"localhost\" se refere ao endere\u00e7o de IP padr\u00e3o do computador. Localhost (Loopback IP Adress) \u00c9 geralmente usado para hospedar um website no endere\u00e7o 127.0.0.1 que \u00e9 acess\u00edvel apenas no seu sistema. Ele nos permite testar e otimizar o website at\u00e9 que todos os bugs estejam consertados, o que nos d\u00e1 o benef\u00edcio de pagar apenas quando o site estiver 100% pronto para ser hospedado em um servidor web. M\u00e9todos para construir um Website \u00b6 Criar o site do zero em um localhost usando qualquer tecnologia de desenvolvimento web e ent\u00e3o: Comprar um dom\u00ednio e um servi\u00e7o de hospedagem na web separadamente. Comprar um dom\u00ednio e um servi\u00e7o de hospedagem na web separadamente. Comprar tudo em um pacote configurando o Website usando um criador de websites . Tr\u00eas elementos s\u00e3o necess\u00e1rios para colocar um site online: Dom\u00ednio DNS Servi\u00e7os de Hospedagem Web Passos para lan\u00e7ar um Website: Registrar um Nome de Dom\u00ednio Achar um servi\u00e7o de hospedagem Publicar o website Teste e Manuten\u00e7\u00e3o SEO e Web Analytics Nome do Dom\u00ednio \u00b6 O nome do dom\u00ednio \u00e9 um endere\u00e7o \u00fanico (URL) que o usu\u00e1rio dever\u00e1 digitar para visitar o site. Nomes de dom\u00ednio s\u00e3o utilizados no lugar de endere\u00e7os de IP porque s\u00e3o mais f\u00e1ceis de lembrar do que um n\u00famero de IP. Um URL consiste basicamente de 4 partes: Dom\u00ednio de Segundo N\u00edvel: Usualmente o nome verdadeiro do website. Dom\u00ednio de Topo: A \u00faltima parte que segue ap\u00f3s o nome Subdom\u00ednio: A parte que vem antes do dom\u00ednio de segundo n\u00edvel Protocolo: HTTP ou HTTPS DNS \u00b6 DNS (Domain Name Server) mapeia a URL para o real endere\u00e7o de IP. Ele \u00e9 formado por um cojunto de registro de configura\u00e7\u00f5es , cada registro aponta para uma hospedagem na web. Elementos do DNS: Um registro : Este registro aponto para o endere\u00e7o de IP do website. Uma vez queo dom\u00ednio est\u00e1 apontando para o registro correto ent\u00e3o podemos ser direcionados para a hospedagem web correta. Registro mx : Este registro aponta os emails que v\u00e3o para o seu dome de dom\u00ednio para o servi\u00e7o de hospedagem e de email. Hospedagem Web \u00b6 Os arquivos do website s\u00e3o armazenados no servidor de hospedagem. Existe uma grande variedade de servi\u00e7os de hospedagem web dispon\u00edveis. Quando acessamos uma URL, a requisi\u00e7\u00e3o vai para o servidor DNS que retorna o endere\u00e7o de IP, essa requisi\u00e7\u00e3o ent\u00e3o \u00e9 feita para o servidor de hospedagem web nesse endere\u00e7o e ent\u00e3o o servidor manda a resposta. Registrador de Nome de Dom\u00ednio \u00b6 \u00c9 preciso de um registrador de nome de dom\u00ednio para comprar um dom\u00ednio para um website. Todos os registradores s\u00e3o aprovados pelo ICANN (a organiza\u00e7\u00e3o sem fins lucrativos que administra o sistema de nome de dom\u00ednio). A maioria dos Registradores tem um conjunto similar de caracter\u00edsticas e tamb\u00e9m desvantagens. Existem centenas de Registradores dispon\u00edveis na internet hoje em dia, os mais populares s\u00e3o: GoDaddy Hover Domain.com Bluehost Hostgator Namecheap Como Escolher? \u00b6 Pre\u00e7o \u00b6 Os valores geralmente s\u00e3o cobrados anualmente ou at\u00e9 em intervalos de mais de um ano. Se n\u00e3o houver renova\u00e7\u00e3o autom\u00e1tica, corre o risco de algu\u00e9m comprar o dom\u00ednio. Suporte ao Consumidor \u00b6 Alguns registradores podem ser baratos mas oferecer um p\u00e9ssimo suporte, o que causar\u00e1 problemas a longo prazo. Features adicionais \u00b6 Se seguram dom\u00ednio ap\u00f3s expira\u00e7\u00e3o. Se permitem compra de certificados. Se permitem transfer\u00eancia de dom\u00ednio. Passos para Registrar um nome de dom\u00ednio. \u00b6 Escolher um nome de dom\u00ednio \u00b6 Sufixo Uso .com Uso comercial .biz Para uso em neg\u00f3cios .net Alternativa para .com .org Para organiza\u00e7\u00f5es sem fins lucrativos .edu Para institutos educacionais Tamb\u00e9m existem C\u00f3digo de pa\u00eds em adi\u00e7\u00e3o a esses dom\u00ednios, como: .br , .uk , .de . Checar a disponibilidade do nome \u00b6 Usar um motor de busca como DomainTools. Registrar o nome do dom\u00ednio com um registrador de dom\u00ednios \u00b6 As taxas para registrar e renovar o dom\u00ednio anualmente s\u00e3o por volta de 10 a 15 d\u00f3lares. Servi\u00e7o de Hospedagem \u00b6 Um servi\u00e7o de hospedagem armazena o site em um servidor e o publica online para acesso p\u00fablico. Podemos hospedar um site por conta pr\u00f3pria, mas precisar\u00edamos de um servidor web poderoso para lidar com o tr\u00e1fego de usu\u00e1rios. Tipos de Hospedagem \u00b6 Servidores Dedicados \u00b6 Um servidor dedicado aloca todos os seus recursos para hospedar apenas nosso website. Nunca precisamos compartilhar o poder de computa\u00e7\u00e3o do servidor com mais algu\u00e9m. Podendo at\u00e9 ser usado para gerenciar m\u00faltiplos sites e softwares. Este \u00e9 o tipo mais caro de servidor, com valores mensais variando de $50 a $100. Bluehost and HostGator s\u00e3o servi\u00e7os de hospedagem populares. Hospedagem Gerenciada \u00b6 Hospedagem gerenciada \u00e9 uma subcategoria de servidores dedicados onde o provedor do servi\u00e7o administra o servidor para n\u00f3s. O que garante uma maior seguran\u00e7a e reduz a chances de falha no servidor. Mais caro . Servidor Privado Virtual (VPS) \u00b6 Um servidor que roda v\u00e1rios servidores virtuais , cada um dedicado a um website. Ainda temos a flexibilidade de usar o servidor em um ambiente privado, mas a performance n\u00e3o ser\u00e1 t\u00e3o boa quando em um servidor puramente dedicado. Um VPS t\u00edpico custa por volta de $30 por m\u00eas. Namecheap e InMotion Hosting s\u00e3o servi\u00e7os comuns. Hospedagem Compartilhada \u00b6 N\u00e3o t\u00e3o eficiente, porque os recursos s\u00e3o compartilhados, tr\u00e1fego em um site afeta os outros. Custa menos de $10 por m\u00eas. Hospedagem em Nuvem \u00b6 O desenvolvimento mais atual no mundo das hospedagens de websites. Os recursos para o website est\u00e3o divididos entre m\u00faltiplos servidores virtuais que s\u00e3o parte da nuvem. Podemos adquirir quantos servidores virtuais na nuvem quisermos e podemos ainda especificar os recursos desejados (RAM, armazenamento...). Mais protegidos contra falha do servidor, os dados podem ser movidos entre qualquer dos servidores ao redor do mundo. Em rela\u00e7\u00e3o aos custos, pagamos apenas pelo que usarmos, os custos se ajustam automaticamente \u00e0 escala de uso. Principais provedores deste servi\u00e7o: Amazon , Google e Microsoft . Utilidades Necess\u00e1rias \u00b6 O servidores que escolhermos deve ter as seguintes ferramentas acess\u00edveis: PHP, Perl, JavaScript (web development languages) File Transfer Protocol (file accessibility) .htaccess (Apache server configuration) Server Side Includes MySQL or MongoDB (database management) SSH (remote server communication) Cron (job scheduler)","title":"Publicando um Website"},{"location":"Lan%C3%A7andoWebsite/#introducao","text":"","title":"Introdu\u00e7\u00e3o"},{"location":"Lan%C3%A7andoWebsite/#localhost","text":"O termo \"localhost\" se refere ao endere\u00e7o de IP padr\u00e3o do computador. Localhost (Loopback IP Adress) \u00c9 geralmente usado para hospedar um website no endere\u00e7o 127.0.0.1 que \u00e9 acess\u00edvel apenas no seu sistema. Ele nos permite testar e otimizar o website at\u00e9 que todos os bugs estejam consertados, o que nos d\u00e1 o benef\u00edcio de pagar apenas quando o site estiver 100% pronto para ser hospedado em um servidor web.","title":"Localhost"},{"location":"Lan%C3%A7andoWebsite/#metodos-para-construir-um-website","text":"Criar o site do zero em um localhost usando qualquer tecnologia de desenvolvimento web e ent\u00e3o: Comprar um dom\u00ednio e um servi\u00e7o de hospedagem na web separadamente. Comprar um dom\u00ednio e um servi\u00e7o de hospedagem na web separadamente. Comprar tudo em um pacote configurando o Website usando um criador de websites . Tr\u00eas elementos s\u00e3o necess\u00e1rios para colocar um site online: Dom\u00ednio DNS Servi\u00e7os de Hospedagem Web Passos para lan\u00e7ar um Website: Registrar um Nome de Dom\u00ednio Achar um servi\u00e7o de hospedagem Publicar o website Teste e Manuten\u00e7\u00e3o SEO e Web Analytics","title":"M\u00e9todos para construir um Website"},{"location":"Lan%C3%A7andoWebsite/#nome-do-dominio","text":"O nome do dom\u00ednio \u00e9 um endere\u00e7o \u00fanico (URL) que o usu\u00e1rio dever\u00e1 digitar para visitar o site. Nomes de dom\u00ednio s\u00e3o utilizados no lugar de endere\u00e7os de IP porque s\u00e3o mais f\u00e1ceis de lembrar do que um n\u00famero de IP. Um URL consiste basicamente de 4 partes: Dom\u00ednio de Segundo N\u00edvel: Usualmente o nome verdadeiro do website. Dom\u00ednio de Topo: A \u00faltima parte que segue ap\u00f3s o nome Subdom\u00ednio: A parte que vem antes do dom\u00ednio de segundo n\u00edvel Protocolo: HTTP ou HTTPS","title":"Nome do Dom\u00ednio"},{"location":"Lan%C3%A7andoWebsite/#hospedagem-web","text":"Os arquivos do website s\u00e3o armazenados no servidor de hospedagem. Existe uma grande variedade de servi\u00e7os de hospedagem web dispon\u00edveis. Quando acessamos uma URL, a requisi\u00e7\u00e3o vai para o servidor DNS que retorna o endere\u00e7o de IP, essa requisi\u00e7\u00e3o ent\u00e3o \u00e9 feita para o servidor de hospedagem web nesse endere\u00e7o e ent\u00e3o o servidor manda a resposta.","title":"Hospedagem Web"},{"location":"Lan%C3%A7andoWebsite/#registrador-de-nome-de-dominio","text":"\u00c9 preciso de um registrador de nome de dom\u00ednio para comprar um dom\u00ednio para um website. Todos os registradores s\u00e3o aprovados pelo ICANN (a organiza\u00e7\u00e3o sem fins lucrativos que administra o sistema de nome de dom\u00ednio). A maioria dos Registradores tem um conjunto similar de caracter\u00edsticas e tamb\u00e9m desvantagens. Existem centenas de Registradores dispon\u00edveis na internet hoje em dia, os mais populares s\u00e3o: GoDaddy Hover Domain.com Bluehost Hostgator Namecheap","title":"Registrador de Nome de Dom\u00ednio"},{"location":"Lan%C3%A7andoWebsite/#como-escolher","text":"","title":"Como Escolher?"},{"location":"Lan%C3%A7andoWebsite/#passos-para-registrar-um-nome-de-dominio","text":"","title":"Passos para Registrar um nome de dom\u00ednio."},{"location":"Lan%C3%A7andoWebsite/#escolher-um-nome-de-dominio","text":"Sufixo Uso .com Uso comercial .biz Para uso em neg\u00f3cios .net Alternativa para .com .org Para organiza\u00e7\u00f5es sem fins lucrativos .edu Para institutos educacionais Tamb\u00e9m existem C\u00f3digo de pa\u00eds em adi\u00e7\u00e3o a esses dom\u00ednios, como: .br , .uk , .de .","title":"Escolher um nome de dom\u00ednio"},{"location":"Lan%C3%A7andoWebsite/#checar-a-disponibilidade-do-nome","text":"Usar um motor de busca como DomainTools.","title":"Checar a disponibilidade do nome"},{"location":"Lan%C3%A7andoWebsite/#registrar-o-nome-do-dominio-com-um-registrador-de-dominios","text":"As taxas para registrar e renovar o dom\u00ednio anualmente s\u00e3o por volta de 10 a 15 d\u00f3lares.","title":"Registrar o nome do dom\u00ednio com um registrador de dom\u00ednios"},{"location":"Lan%C3%A7andoWebsite/#servico-de-hospedagem","text":"Um servi\u00e7o de hospedagem armazena o site em um servidor e o publica online para acesso p\u00fablico. Podemos hospedar um site por conta pr\u00f3pria, mas precisar\u00edamos de um servidor web poderoso para lidar com o tr\u00e1fego de usu\u00e1rios.","title":"Servi\u00e7o de Hospedagem"},{"location":"Lan%C3%A7andoWebsite/#tipos-de-hospedagem","text":"","title":"Tipos de Hospedagem"},{"location":"Lan%C3%A7andoWebsite/#utilidades-necessarias","text":"O servidores que escolhermos deve ter as seguintes ferramentas acess\u00edveis: PHP, Perl, JavaScript (web development languages) File Transfer Protocol (file accessibility) .htaccess (Apache server configuration) Server Side Includes MySQL or MongoDB (database management) SSH (remote server communication) Cron (job scheduler)","title":"Utilidades Necess\u00e1rias"},{"location":"MachineLearningDeploy/","text":"Machine Learning em Produ\u00e7\u00e3o \u00b6 Desafios da Engenharia de Software: Confiabilidade Reusabilidade Manutenibilidade Flexibilidade Especificamente em modelos de aprendizado de m\u00e1quina: Reprodutibilidade Ambiente: O ambiente \u00e9 a configura\u00e7\u00e3o ou estado do computador onde o software ou outros produtos s\u00e3o desenvolvidos ou colocados em opera\u00e7\u00e3o. O Ambiente de Pesquisa \u00e9 configurado com ferramentas, programas e software adequados para a an\u00e1lise de dados e o desenvolvimento de modelos de Machine Learning. O Ambiente de Produ\u00e7\u00e3o \u00e9 uma configura\u00e7\u00e3o em tempo real com programas rodando e configura\u00e7\u00f5es de hardware que permitem a opera\u00e7\u00e3o di\u00e1ria de uma organiza\u00e7\u00e3o. \u00c9 o lugar onde os modelos de ML s\u00e3o usados para realmente produzir valor para o neg\u00f3cio. Reprodutibilidade em Machine Learning \u00b6 Reprodutibilidade \u00e9 a habilidade de duplicar um modelo de aprendizado de m\u00e1quina fielmente, de forma que com o mesmo input de dados brutos e o mesmo modelo seja poss\u00edvel retornar o mesmo output. Vis\u00e3o Geral da Pipeline de Machine Learning: flowchart LR a[Aquisi\u00e7\u00e3o \\n dos Dados]-->B[An\u00e1lise \\n dos Dados] --> c[Pr\u00e9 Processamento \\n / Feature Engineering] --> d[Feature \\n Selection] --> e[Modelagem \\n/ constru\u00e7\u00e3o \\n do modelo] --> f[Deploy \\n do \\n modelo] Em todas as etapas da Pipeline deve haver reprodutibilidade. Reprodutibilidade na Aquisi\u00e7\u00e3o dos Dados \u00b6 A parte mais dif\u00edcil de obter reprodutibilidade. Desafios : \u00b6 O conjunto de treino n\u00e3o podem ser reproduzidos. Bancos de dados s\u00e3o constantemente atualizados e sobrescritos. A ordem dos dados no carregamento \u00e9 aleat\u00f3ria. Solu\u00e7\u00f5es : \u00b6 Salvar uma \"fotografia\" do conjunto de treino. Simples. Potencial conflito com GDPR. Invi\u00e1vel para Big Data. Projetar fontes de dados com timestamps precisas. Solu\u00e7\u00e3o ideal. Grande esfor\u00e7o para redesenhar as fontes de dados. Reprodutibilidade Durante a Cria\u00e7\u00e3o de Features \u00b6 Causas da falta de reprodutibilidade: \u00b6 Substitui\u00e7\u00e3o de valores faltantes por valores extra\u00eddos aleatoriamente. Remo\u00e7\u00e3o de r\u00f3tulos baseado na porcentagem das observa\u00e7\u00f5es. C\u00e1lculo de valores estat\u00edsticos como m\u00e9dia para usar como substituto para valores faltantes. C\u00e1lculos complexos para cria\u00e7\u00e3o de features. Solu\u00e7\u00f5es: \u00b6 O c\u00f3digo para cria\u00e7\u00e3o de features deve ser monitorado por sistema de versionamento e publicado com vers\u00f5es hasheadas com timestamp ou auto incrementadas. Muitos dos par\u00e2metros extra\u00eddos para engenharia de features dependem dos dados usados para o treino, devemos garantir com os dados de treino s\u00e3o reprodut\u00edveis. Se usarmos extra\u00e7\u00e3o aleat\u00f3ria, devemos sempre usar um seed. Reprodutibilidade durante o Treinamento do Modelo \u00b6 Causas: \u00b6 Modelos de ML se valem de aleatoriedade para o treinamento. Dados e extra\u00e7\u00e3o de features para \u00e1rvores. Inicializa\u00e7\u00e3o de pesos para redes neurais. Implementa\u00e7\u00e3o de modelos de ML trabalham com arrays agn\u00f3sticas ao nome das features. Precisamos alimentar os dados na ordem correta. Solu\u00e7\u00f5es: \u00b6 Gravar a ordem das features. Gravar as transforma\u00e7\u00f5es de features aplicadas. Gravar os hiperpar\u00e2metros. Sempre definir um seed para modelos com aleatoriedade. Se o modelo final \u00e9 uma pilha de modelos, gravar a estrutura do ensemble. Arquitetura de Sistemas de Machine Learning \u00b6 Manter um sistema de ML \u00e9 dif\u00edcil, al\u00e9m dos desafios tradicionais, existem novos desafios relacionados a modelos e mudan\u00e7as nos dados. Componentes de um sistema de ML em produ\u00e7\u00e3o: Infraestrutura Aplica\u00e7\u00f5es Dados Documenta\u00e7\u00e3o Configura\u00e7\u00e3o flowchart LR a[Model \\n Requirements] --> b[Data \\n Collection] --> c[Data \\n Cleaning] --> d[Data \\n Labeling] --> e[Feature \\n Engineering] --> f[Model \\n Training] --> g[Model \\n Evaluation] --> h[Model \\n Deployment] --> i[Model \\n Monitoring] Formas de servir um modelo \u00b6 Serializar o modelo com um objeto pickle. MLFlow fornece um formato comum de serializa\u00e7\u00e3o para exportar e importar modelos Spark, Scikit-learn e Tensorflow. Formatos de interc\u00e2mbio independentes da linguagem como PMML, PFA e ONNX. Embedded \u00b6 O modelo \u00e9 um depend\u00eancia da aplica\u00e7\u00e3o. O modelo \u00e9 empacotado junto com a aplica\u00e7\u00e3o que o ir\u00e1 consumir. Modelo pr\u00e9 treinado. Predi\u00e7\u00e3o na mesma hora. Modelo com API dedicada \u00b6 O modelo \u00e9 embrulhado em um servi\u00e7o que pode ser implantado independentemente. Modelo pr\u00e9 treinado. Predi\u00e7\u00e3o s\u00edncrona. flowchart RL b[API \\n do modelo] --\"Invoca\u00e7\u00e3o remota da predi\u00e7\u00e3o \\n (REST/ gRPC / SOAP / Messaging)\"--> a[Aplica\u00e7\u00e3o] Modelo Publicado como Dado \u00b6 flowchart RL subgraph one[\"Plataforma de Streaming\"] direction LR b[Modelo v1] c[Modelo v2] end one --\"Ingest\u00e3o em tempo de execu\u00e7\u00e3o\"--> a[Aplica\u00e7\u00e3o \\n Streaming Permitido] Modelo pr\u00e9 treinado. Predi\u00e7\u00e3o s\u00edncrona. Predi\u00e7\u00f5es Offline (Batch Offline) \u00b6 Todos os passos da predi\u00e7\u00e3o s\u00e3o realizados Offline e as predi\u00e7\u00f5es s\u00e3o armazenadas em um banco de dados. Modelo pr\u00e9 treinado. Sem ass\u00edncrona.","title":"Machine Learning em produ\u00e7\u00e3o"},{"location":"MachineLearningDeploy/#machine-learning-em-producao","text":"Desafios da Engenharia de Software: Confiabilidade Reusabilidade Manutenibilidade Flexibilidade Especificamente em modelos de aprendizado de m\u00e1quina: Reprodutibilidade Ambiente: O ambiente \u00e9 a configura\u00e7\u00e3o ou estado do computador onde o software ou outros produtos s\u00e3o desenvolvidos ou colocados em opera\u00e7\u00e3o. O Ambiente de Pesquisa \u00e9 configurado com ferramentas, programas e software adequados para a an\u00e1lise de dados e o desenvolvimento de modelos de Machine Learning. O Ambiente de Produ\u00e7\u00e3o \u00e9 uma configura\u00e7\u00e3o em tempo real com programas rodando e configura\u00e7\u00f5es de hardware que permitem a opera\u00e7\u00e3o di\u00e1ria de uma organiza\u00e7\u00e3o. \u00c9 o lugar onde os modelos de ML s\u00e3o usados para realmente produzir valor para o neg\u00f3cio.","title":"Machine Learning em Produ\u00e7\u00e3o"},{"location":"MachineLearningDeploy/#reprodutibilidade-em-machine-learning","text":"Reprodutibilidade \u00e9 a habilidade de duplicar um modelo de aprendizado de m\u00e1quina fielmente, de forma que com o mesmo input de dados brutos e o mesmo modelo seja poss\u00edvel retornar o mesmo output. Vis\u00e3o Geral da Pipeline de Machine Learning: flowchart LR a[Aquisi\u00e7\u00e3o \\n dos Dados]-->B[An\u00e1lise \\n dos Dados] --> c[Pr\u00e9 Processamento \\n / Feature Engineering] --> d[Feature \\n Selection] --> e[Modelagem \\n/ constru\u00e7\u00e3o \\n do modelo] --> f[Deploy \\n do \\n modelo] Em todas as etapas da Pipeline deve haver reprodutibilidade.","title":"Reprodutibilidade em Machine Learning"},{"location":"MachineLearningDeploy/#reprodutibilidade-na-aquisicao-dos-dados","text":"A parte mais dif\u00edcil de obter reprodutibilidade.","title":"Reprodutibilidade na Aquisi\u00e7\u00e3o dos Dados"},{"location":"MachineLearningDeploy/#reprodutibilidade-durante-a-criacao-de-features","text":"","title":"Reprodutibilidade Durante a Cria\u00e7\u00e3o de Features"},{"location":"MachineLearningDeploy/#reprodutibilidade-durante-o-treinamento-do-modelo","text":"","title":"Reprodutibilidade durante o Treinamento do Modelo"},{"location":"MachineLearningDeploy/#arquitetura-de-sistemas-de-machine-learning","text":"Manter um sistema de ML \u00e9 dif\u00edcil, al\u00e9m dos desafios tradicionais, existem novos desafios relacionados a modelos e mudan\u00e7as nos dados. Componentes de um sistema de ML em produ\u00e7\u00e3o: Infraestrutura Aplica\u00e7\u00f5es Dados Documenta\u00e7\u00e3o Configura\u00e7\u00e3o flowchart LR a[Model \\n Requirements] --> b[Data \\n Collection] --> c[Data \\n Cleaning] --> d[Data \\n Labeling] --> e[Feature \\n Engineering] --> f[Model \\n Training] --> g[Model \\n Evaluation] --> h[Model \\n Deployment] --> i[Model \\n Monitoring]","title":"Arquitetura de Sistemas de Machine Learning"},{"location":"MachineLearningDeploy/#formas-de-servir-um-modelo","text":"Serializar o modelo com um objeto pickle. MLFlow fornece um formato comum de serializa\u00e7\u00e3o para exportar e importar modelos Spark, Scikit-learn e Tensorflow. Formatos de interc\u00e2mbio independentes da linguagem como PMML, PFA e ONNX.","title":"Formas de servir um modelo"},{"location":"MachineLearningDeploy/#embedded","text":"O modelo \u00e9 um depend\u00eancia da aplica\u00e7\u00e3o. O modelo \u00e9 empacotado junto com a aplica\u00e7\u00e3o que o ir\u00e1 consumir. Modelo pr\u00e9 treinado. Predi\u00e7\u00e3o na mesma hora.","title":"Embedded"},{"location":"MachineLearningDeploy/#modelo-com-api-dedicada","text":"O modelo \u00e9 embrulhado em um servi\u00e7o que pode ser implantado independentemente. Modelo pr\u00e9 treinado. Predi\u00e7\u00e3o s\u00edncrona. flowchart RL b[API \\n do modelo] --\"Invoca\u00e7\u00e3o remota da predi\u00e7\u00e3o \\n (REST/ gRPC / SOAP / Messaging)\"--> a[Aplica\u00e7\u00e3o]","title":"Modelo com API dedicada"},{"location":"MachineLearningDeploy/#modelo-publicado-como-dado","text":"flowchart RL subgraph one[\"Plataforma de Streaming\"] direction LR b[Modelo v1] c[Modelo v2] end one --\"Ingest\u00e3o em tempo de execu\u00e7\u00e3o\"--> a[Aplica\u00e7\u00e3o \\n Streaming Permitido] Modelo pr\u00e9 treinado. Predi\u00e7\u00e3o s\u00edncrona.","title":"Modelo Publicado como Dado"},{"location":"MachineLearningDeploy/#predicoes-offline-batch-offline","text":"Todos os passos da predi\u00e7\u00e3o s\u00e3o realizados Offline e as predi\u00e7\u00f5es s\u00e3o armazenadas em um banco de dados. Modelo pr\u00e9 treinado. Sem ass\u00edncrona.","title":"Predi\u00e7\u00f5es Offline (Batch Offline)"},{"location":"Mkdocs/","text":"Introdu\u00e7\u00e3o \u00b6 Refer\u00eancia r\u00e1pida para Material for MkDocs , um tema de MkDocs , um gerador de site est\u00e1ticos direcionado a documenta\u00e7\u00e3o t\u00e9cnica de projetos. No meu projeto, biblioteca mkdocs-material foi instalado no conda enviroment docs , que \u00e9 um clone do base miniconda com alguns pacotes b\u00e1sicos preciamente instalados, como python e pip. conda create --name docs --clone base conda activate docs Instala\u00e7\u00e3o \u00b6 pip install mkdocs-material ### Isso cria a seguinte estrutura: . \u251c\u2500 docs/ \u2502 \u2514\u2500 index.md \u2514\u2500 mkdocs.yml Criando um site \u00b6 No diret\u00f3rio em que est\u00e1 o projeto: mkdocs new . Configura\u00e7\u00e3o \u00b6 Instalar o tema theme : name : material Visualizar o site ao vivo \u00b6 mkdocs serve # localhost:8000 Construindo o site \u00b6 mkdocs build Publicando o site \u00b6 Criar um reposit\u00f3rio no github. Fazer o push do diret\u00f3rio do projeto. Utilizar o comando: mkdocs gh-deploy --force Customiza\u00e7\u00e3o \u00b6 CSS adicional \u00b6 Criar um novo arquivo css em stylesheets. . \u251c\u2500 docs/ \u2502 \u2514\u2500 stylesheets/ \u2502 \u2514\u2500 extra.css \u2514\u2500 mkdocs.yml Adicionar os par\u00e2metros em mkdocs.yml : extra_css : - stylesheets/extra.css JavaScript Adicional \u00b6 . \u251c\u2500 docs/ \u2502 \u2514\u2500 javascripts/ \u2502 \u2514\u2500 extra.js \u2514\u2500 mkdocs.yml Adicionar os par\u00e2metros em mkdocs.yml : extra_javascript : - javascripts/extra.js Mudar Cores \u00b6 scheme : default = Light mode slate = Dark mode theme : palette : scheme : default Cor prim\u00e1ria : red, pink, purple... theme : palette : primary : indigo Mudar fonte \u00b6 Pode ser colocada qualquer fonte do Google Fonts theme : font : text : Roboto code : Roboto Mono Mudar logo \u00b6 Criar pasta assets dentro no diret\u00f3rio com os markdowns. Colocar \u00edcone desejado dentro da pasta asset. Incluir os par\u00e2metros no mkdocs.yml : theme : logo : assets/logo.png Mudar a url para que o logo aponta: extra : homepage : https://example.com Estutura de Navega\u00e7\u00e3o \u00b6 Expandir todos os subt\u00f3picos automaticamente: theme : features : - navigation.expand Habilitar Busca \u00b6 plugins : - search : lang : pt Footer \u00b6 extra: social: - icon: fontawesome/brands/twitter link: https://twitter.com/squidfunk Admonitions \u00b6 Habilita\u00e7\u00e3o: markdown_extensions : - admonition - pymdownx.details - pymdownx.superfences Op\u00e7\u00f5es: theme : icon : admonition : note : octicons/tag-16 abstract : octicons/checklist-16 info : octicons/info-16 tip : octicons/squirrel-16 success : octicons/check-16 question : octicons/question-16 warning : octicons/alert-16 failure : octicons/x-circle-16 danger : octicons/zap-16 bug : octicons/bug-16 example : octicons/beaker-16 quote : octicons/quote-16 theme : icon : admonition : note : fontawesome/solid/sticky-note abstract : fontawesome/solid/book info : fontawesome/solid/info-circle tip : fontawesome/solid/bullhorn success : fontawesome/solid/check question : fontawesome/solid/question-circle warning : fontawesome/solid/exclamation-triangle failure : fontawesome/solid/bomb danger : fontawesome/solid/skull bug : fontawesome/solid/robot example : fontawesome/solid/flask quote : fontawesome/solid/quote-left Note Abstract Info Tip Sucess Question Warning Failure Danger Example Quote Sintaxe: Come\u00e7a com !!! seguido do quantificador de tipo , o texto vai identado por 4 espa\u00e7os na pr\u00f3xima linha . !!! note lorem ipsum dolor Mudando o t\u00edtulo: !!! note \"T\u00edtulo desejado\" lorem ipsum dolor Admonition colaps\u00e1vel: ??? note \"T\u00edtulo desejado\" lorem ipsum dolor Annotations \u00b6 Configura\u00e7\u00e3o: markdown_extensions : - attr_list - md_in_html - pymdownx.superfences Atualmente apenas para patrocinadores :/ Content tabs \u00b6 Podemos agrupar texto, c\u00f3digo e etc... markdown_extensions : - pymdownx.superfences - pymdownx.tabbed : alternate_style : true Sinxtaxe: === \"C\" ``` c #include <stdio.h> int main(void) { printf(\"Hello world!\\n\"); return 0; } C++ #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } **Aninhado com admonitions:** Example Unordered List Ordered List * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci ## Diagramas **Ativa\u00e7\u00e3o:** ```yaml markdown_extensions: - pymdownx.superfences: custom_fences: - name: mermaid class: mermaid format: !!python/name:pymdownx.superfences.fence_code_format Diagrama de fluxo: ``` mermaid graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; ``` graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; Diagrama Sequencial: ``` mermaid sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! ``` sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! Diagrama de estado: ``` mermaid stateDiagram-v2 state fork_state <<fork>> [*] --> fork_state fork_state --> State2 fork_state --> State3 state join_state <<join>> State2 --> join_state State3 --> join_state join_state --> State4 State4 --> [*] ``` stateDiagram-v2 state fork_state <<fork>> [*] --> fork_state fork_state --> State2 fork_state --> State3 state join_state <<join>> State2 --> join_state State3 --> join_state join_state --> State4 State4 --> [*] Diagrama de classe: ``` mermaid classDiagram Person <|-- Student Person <|-- Professor Person : +String name Person : +String phoneNumber Person : +String emailAddress Person: +purchaseParkingPass() Address \"1\" <-- \"0..1\" Person:lives at class Student{ +int studentNumber +int averageMark +isEligibleToEnrol() +getSeminarsTaken() } class Professor{ +int salary } class Address{ +String street +String city +String state +int postalCode +String country -validate() +outputAsLabel() } ``` classDiagram Person <|-- Student Person <|-- Professor Person : +String name Person : +String phoneNumber Person : +String emailAddress Person: +purchaseParkingPass() Address \"1\" <-- \"0..1\" Person:lives at class Student{ +int studentNumber +int averageMark +isEligibleToEnrol() +getSeminarsTaken() } class Professor{ +int salary } class Address{ +String street +String city +String state +int postalCode +String country -validate() +outputAsLabel() } Diagrama entidade relacionamento: ``` mermaid erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses ``` erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses \u00cdcones e Emojis \u00b6 Podem ser usados mais de 8000 \u00edcones e milhares de emojis j\u00e1 integrados. Ativa\u00e7\u00e3o: markdown_extensions : - attr_list - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji emoji_generator : !!python/name:materialx.emoji.to_svg :smile: :fontawesome-regular-face-laugh-wink: Imagens \u00b6 configura\u00e7\u00e3o: markdown_extensions : - attr_list - md_in_html Alinhamento: # esquerda ![Image title](https://dummyimage.com/600x400/eee/aaa){ align=left } # direita ![Image title](https://dummyimage.com/600x400/eee/aaa){ align=right } Subt\u00edtulo: <figure markdown> ![Image title](https://dummyimage.com/600x400/){ width=\"300\" } <figcaption>Image caption</figcaption> </figure> Matem\u00e1tica \u00b6 Precisamos ativar MathJax: Em docs/javascripts/mathjax.js window . MathJax = { tex : { inlineMath : [[ \"\\\\(\" , \"\\\\)\" ]], displayMath : [[ \"\\\\[\" , \"\\\\]\" ]], processEscapes : true , processEnvironments : true }, options : { ignoreHtmlClass : \".*|\" , processHtmlClass : \"arithmatex\" } }; document $ . subscribe (() => { MathJax . typesetPromise () }) Em mkdocs.yml markdown_extensions : - pymdownx.arithmatex : generic : true extra_javascript : - javascripts/mathjax.js - https://polyfill.io/v3/polyfill.min.js?features=es6 - https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js Truques \u00b6 Adicionar SVG din\u00e2mico para ser renderizado na p\u00e1gina: N\u00e3o usar como c\u00f3digo, e sim como texto bruto. <object alt=\"Browser Evolution\" data=\"../assets/browser_evolution.svg\"></object>","title":"Mkdocs"},{"location":"Mkdocs/#introducao","text":"Refer\u00eancia r\u00e1pida para Material for MkDocs , um tema de MkDocs , um gerador de site est\u00e1ticos direcionado a documenta\u00e7\u00e3o t\u00e9cnica de projetos. No meu projeto, biblioteca mkdocs-material foi instalado no conda enviroment docs , que \u00e9 um clone do base miniconda com alguns pacotes b\u00e1sicos preciamente instalados, como python e pip. conda create --name docs --clone base conda activate docs","title":"Introdu\u00e7\u00e3o"},{"location":"Mkdocs/#instalacao","text":"pip install mkdocs-material ### Isso cria a seguinte estrutura: . \u251c\u2500 docs/ \u2502 \u2514\u2500 index.md \u2514\u2500 mkdocs.yml","title":"Instala\u00e7\u00e3o"},{"location":"Mkdocs/#criando-um-site","text":"No diret\u00f3rio em que est\u00e1 o projeto: mkdocs new .","title":"Criando um site"},{"location":"Mkdocs/#configuracao","text":"Instalar o tema theme : name : material","title":"Configura\u00e7\u00e3o"},{"location":"Mkdocs/#visualizar-o-site-ao-vivo","text":"mkdocs serve # localhost:8000","title":"Visualizar o site ao vivo"},{"location":"Mkdocs/#construindo-o-site","text":"mkdocs build","title":"Construindo o site"},{"location":"Mkdocs/#publicando-o-site","text":"Criar um reposit\u00f3rio no github. Fazer o push do diret\u00f3rio do projeto. Utilizar o comando: mkdocs gh-deploy --force","title":"Publicando o site"},{"location":"Mkdocs/#customizacao","text":"","title":"Customiza\u00e7\u00e3o"},{"location":"Mkdocs/#css-adicional","text":"Criar um novo arquivo css em stylesheets. . \u251c\u2500 docs/ \u2502 \u2514\u2500 stylesheets/ \u2502 \u2514\u2500 extra.css \u2514\u2500 mkdocs.yml Adicionar os par\u00e2metros em mkdocs.yml : extra_css : - stylesheets/extra.css","title":"CSS adicional"},{"location":"Mkdocs/#javascript-adicional","text":". \u251c\u2500 docs/ \u2502 \u2514\u2500 javascripts/ \u2502 \u2514\u2500 extra.js \u2514\u2500 mkdocs.yml Adicionar os par\u00e2metros em mkdocs.yml : extra_javascript : - javascripts/extra.js","title":"JavaScript Adicional"},{"location":"Mkdocs/#mudar-cores","text":"scheme : default = Light mode slate = Dark mode theme : palette : scheme : default Cor prim\u00e1ria : red, pink, purple... theme : palette : primary : indigo","title":"Mudar Cores"},{"location":"Mkdocs/#mudar-fonte","text":"Pode ser colocada qualquer fonte do Google Fonts theme : font : text : Roboto code : Roboto Mono","title":"Mudar fonte"},{"location":"Mkdocs/#mudar-logo","text":"Criar pasta assets dentro no diret\u00f3rio com os markdowns. Colocar \u00edcone desejado dentro da pasta asset. Incluir os par\u00e2metros no mkdocs.yml : theme : logo : assets/logo.png Mudar a url para que o logo aponta: extra : homepage : https://example.com","title":"Mudar logo"},{"location":"Mkdocs/#estutura-de-navegacao","text":"Expandir todos os subt\u00f3picos automaticamente: theme : features : - navigation.expand","title":"Estutura de Navega\u00e7\u00e3o"},{"location":"Mkdocs/#habilitar-busca","text":"plugins : - search : lang : pt","title":"Habilitar Busca"},{"location":"Mkdocs/#footer","text":"extra: social: - icon: fontawesome/brands/twitter link: https://twitter.com/squidfunk","title":"Footer"},{"location":"Mkdocs/#admonitions","text":"Habilita\u00e7\u00e3o: markdown_extensions : - admonition - pymdownx.details - pymdownx.superfences Op\u00e7\u00f5es: theme : icon : admonition : note : octicons/tag-16 abstract : octicons/checklist-16 info : octicons/info-16 tip : octicons/squirrel-16 success : octicons/check-16 question : octicons/question-16 warning : octicons/alert-16 failure : octicons/x-circle-16 danger : octicons/zap-16 bug : octicons/bug-16 example : octicons/beaker-16 quote : octicons/quote-16 theme : icon : admonition : note : fontawesome/solid/sticky-note abstract : fontawesome/solid/book info : fontawesome/solid/info-circle tip : fontawesome/solid/bullhorn success : fontawesome/solid/check question : fontawesome/solid/question-circle warning : fontawesome/solid/exclamation-triangle failure : fontawesome/solid/bomb danger : fontawesome/solid/skull bug : fontawesome/solid/robot example : fontawesome/solid/flask quote : fontawesome/solid/quote-left Note Abstract Info Tip Sucess Question Warning Failure Danger Example Quote Sintaxe: Come\u00e7a com !!! seguido do quantificador de tipo , o texto vai identado por 4 espa\u00e7os na pr\u00f3xima linha . !!! note lorem ipsum dolor Mudando o t\u00edtulo: !!! note \"T\u00edtulo desejado\" lorem ipsum dolor Admonition colaps\u00e1vel: ??? note \"T\u00edtulo desejado\" lorem ipsum dolor","title":"Admonitions"},{"location":"Mkdocs/#annotations","text":"Configura\u00e7\u00e3o: markdown_extensions : - attr_list - md_in_html - pymdownx.superfences Atualmente apenas para patrocinadores :/","title":"Annotations"},{"location":"Mkdocs/#content-tabs","text":"Podemos agrupar texto, c\u00f3digo e etc... markdown_extensions : - pymdownx.superfences - pymdownx.tabbed : alternate_style : true Sinxtaxe: === \"C\" ``` c #include <stdio.h> int main(void) { printf(\"Hello world!\\n\"); return 0; } C++ #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } **Aninhado com admonitions:** Example Unordered List Ordered List * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci ## Diagramas **Ativa\u00e7\u00e3o:** ```yaml markdown_extensions: - pymdownx.superfences: custom_fences: - name: mermaid class: mermaid format: !!python/name:pymdownx.superfences.fence_code_format Diagrama de fluxo: ``` mermaid graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; ``` graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; Diagrama Sequencial: ``` mermaid sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! ``` sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! Diagrama de estado: ``` mermaid stateDiagram-v2 state fork_state <<fork>> [*] --> fork_state fork_state --> State2 fork_state --> State3 state join_state <<join>> State2 --> join_state State3 --> join_state join_state --> State4 State4 --> [*] ``` stateDiagram-v2 state fork_state <<fork>> [*] --> fork_state fork_state --> State2 fork_state --> State3 state join_state <<join>> State2 --> join_state State3 --> join_state join_state --> State4 State4 --> [*] Diagrama de classe: ``` mermaid classDiagram Person <|-- Student Person <|-- Professor Person : +String name Person : +String phoneNumber Person : +String emailAddress Person: +purchaseParkingPass() Address \"1\" <-- \"0..1\" Person:lives at class Student{ +int studentNumber +int averageMark +isEligibleToEnrol() +getSeminarsTaken() } class Professor{ +int salary } class Address{ +String street +String city +String state +int postalCode +String country -validate() +outputAsLabel() } ``` classDiagram Person <|-- Student Person <|-- Professor Person : +String name Person : +String phoneNumber Person : +String emailAddress Person: +purchaseParkingPass() Address \"1\" <-- \"0..1\" Person:lives at class Student{ +int studentNumber +int averageMark +isEligibleToEnrol() +getSeminarsTaken() } class Professor{ +int salary } class Address{ +String street +String city +String state +int postalCode +String country -validate() +outputAsLabel() } Diagrama entidade relacionamento: ``` mermaid erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses ``` erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses","title":"Content tabs"},{"location":"Mkdocs/#icones-e-emojis","text":"Podem ser usados mais de 8000 \u00edcones e milhares de emojis j\u00e1 integrados. Ativa\u00e7\u00e3o: markdown_extensions : - attr_list - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji emoji_generator : !!python/name:materialx.emoji.to_svg :smile: :fontawesome-regular-face-laugh-wink:","title":"\u00cdcones e Emojis"},{"location":"Mkdocs/#imagens","text":"configura\u00e7\u00e3o: markdown_extensions : - attr_list - md_in_html Alinhamento: # esquerda ![Image title](https://dummyimage.com/600x400/eee/aaa){ align=left } # direita ![Image title](https://dummyimage.com/600x400/eee/aaa){ align=right } Subt\u00edtulo: <figure markdown> ![Image title](https://dummyimage.com/600x400/){ width=\"300\" } <figcaption>Image caption</figcaption> </figure>","title":"Imagens"},{"location":"Mkdocs/#matematica","text":"Precisamos ativar MathJax: Em docs/javascripts/mathjax.js window . MathJax = { tex : { inlineMath : [[ \"\\\\(\" , \"\\\\)\" ]], displayMath : [[ \"\\\\[\" , \"\\\\]\" ]], processEscapes : true , processEnvironments : true }, options : { ignoreHtmlClass : \".*|\" , processHtmlClass : \"arithmatex\" } }; document $ . subscribe (() => { MathJax . typesetPromise () }) Em mkdocs.yml markdown_extensions : - pymdownx.arithmatex : generic : true extra_javascript : - javascripts/mathjax.js - https://polyfill.io/v3/polyfill.min.js?features=es6 - https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js","title":"Matem\u00e1tica"},{"location":"Mkdocs/#truques","text":"Adicionar SVG din\u00e2mico para ser renderizado na p\u00e1gina: N\u00e3o usar como c\u00f3digo, e sim como texto bruto. <object alt=\"Browser Evolution\" data=\"../assets/browser_evolution.svg\"></object>","title":"Truques"},{"location":"ModelandoComScikitLearn/","text":"Treinando Modelos com Scikit Learn \u00b6 Classifica\u00e7\u00e3o Multiclasse \u00b6 Regress\u00e3o Log\u00edstica \u00b6 from sklearn.linear_model import LogisticRegression y deve ser apenas uma coluna categ\u00f3rica. model_rl = LogisticRegression ( multi_class = 'multinomial' ) model_rl . fit ( X_train , y_train ) y_pred = model_rl . predict ( X_test ) y_pred_probs = model_rl . predict_proba ( X_test ) y_pred_train = model_rl . predict ( X_train ) Com Grid Search: N\u00e3o tem muito o que procurar em uma regress\u00e3o log\u00edstica. # Definindo o espa\u00e7o de busca space = { \"C\" : np . logspace ( - 4 , 4 , 50 )} # Instanciando o modelo model = LogisticRegression ( multi_class = 'multinomial' , max_iter = 1000 ) # Inst\u00e2nciando uma valida\u00e7\u00e3o cruzada com repeti\u00e7\u00e3o cv = RepeatedStratifiedKFold ( n_splits = 5 , n_repeats = 3 , random_state = 42 ) # Inst\u00e2nciando o Grid Search search = GridSearchCV ( model01 , space , cv = cv , n_jobs =- 1 ) # Buscando result = search . fit ( X_train , y_train ) Random Forest \u00b6 from sklearn.ensemble import RandomForestClassifier model_rf = RandomForestClassifier() model_rf.fit(X_train, y_train) y_pred = model_rf.predict(X_test) y_pred_probs = model_rf.predict_proba(X_test) y_pred_train = model_rf.predict(X_train) Com Random Search: n_estimators = [ int ( x ) for x in np . linspace ( 200 , 2000 , 10 )] max_features = [ 'auto' , 'sqrt' ] max_depth = [ int ( x ) for x in np . linspace ( 10 , 110 , num = 11 )] max_depth . append ( None ) min_samples_split = [ 2 , 5 , 10 ] min_samples_leaf = [ 1 , 2 , 4 ] space = { 'n_estimators' : n_estimators , 'max_features' : max_features , 'max_depth' : max_depth , 'min_samples_split' : min_samples_split , 'min_samples_leaf' : min_samples_leaf , } model = RandomForestClassifier () cv = RepeatedStratifiedKFold ( n_splits = 5 , n_repeats = 3 , random_state = 42 ) search = RandomizedSearchCV ( model , space , cv = cv , n_jobs =- 1 , n_iter = 300 ) result = search . fit ( X_train , y_train ) ps: N\u00e3o fa\u00e7a 300 itera\u00e7\u00f5es se seu dataset n\u00e3o for pequeno e seu pc n\u00e3o for bom e voc\u00ea n\u00e3o tiver indo dormir.","title":"Treinando Modelos com Scikit Learn"},{"location":"ModelandoComScikitLearn/#treinando-modelos-com-scikit-learn","text":"","title":"Treinando Modelos com Scikit Learn"},{"location":"ModelandoComScikitLearn/#classificacao-multiclasse","text":"","title":"Classifica\u00e7\u00e3o Multiclasse"},{"location":"ModelandoComScikitLearn/#regressao-logistica","text":"from sklearn.linear_model import LogisticRegression y deve ser apenas uma coluna categ\u00f3rica. model_rl = LogisticRegression ( multi_class = 'multinomial' ) model_rl . fit ( X_train , y_train ) y_pred = model_rl . predict ( X_test ) y_pred_probs = model_rl . predict_proba ( X_test ) y_pred_train = model_rl . predict ( X_train ) Com Grid Search: N\u00e3o tem muito o que procurar em uma regress\u00e3o log\u00edstica. # Definindo o espa\u00e7o de busca space = { \"C\" : np . logspace ( - 4 , 4 , 50 )} # Instanciando o modelo model = LogisticRegression ( multi_class = 'multinomial' , max_iter = 1000 ) # Inst\u00e2nciando uma valida\u00e7\u00e3o cruzada com repeti\u00e7\u00e3o cv = RepeatedStratifiedKFold ( n_splits = 5 , n_repeats = 3 , random_state = 42 ) # Inst\u00e2nciando o Grid Search search = GridSearchCV ( model01 , space , cv = cv , n_jobs =- 1 ) # Buscando result = search . fit ( X_train , y_train )","title":"Regress\u00e3o Log\u00edstica"},{"location":"ModelandoComScikitLearn/#random-forest","text":"from sklearn.ensemble import RandomForestClassifier model_rf = RandomForestClassifier() model_rf.fit(X_train, y_train) y_pred = model_rf.predict(X_test) y_pred_probs = model_rf.predict_proba(X_test) y_pred_train = model_rf.predict(X_train) Com Random Search: n_estimators = [ int ( x ) for x in np . linspace ( 200 , 2000 , 10 )] max_features = [ 'auto' , 'sqrt' ] max_depth = [ int ( x ) for x in np . linspace ( 10 , 110 , num = 11 )] max_depth . append ( None ) min_samples_split = [ 2 , 5 , 10 ] min_samples_leaf = [ 1 , 2 , 4 ] space = { 'n_estimators' : n_estimators , 'max_features' : max_features , 'max_depth' : max_depth , 'min_samples_split' : min_samples_split , 'min_samples_leaf' : min_samples_leaf , } model = RandomForestClassifier () cv = RepeatedStratifiedKFold ( n_splits = 5 , n_repeats = 3 , random_state = 42 ) search = RandomizedSearchCV ( model , space , cv = cv , n_jobs =- 1 , n_iter = 300 ) result = search . fit ( X_train , y_train ) ps: N\u00e3o fa\u00e7a 300 itera\u00e7\u00f5es se seu dataset n\u00e3o for pequeno e seu pc n\u00e3o for bom e voc\u00ea n\u00e3o tiver indo dormir.","title":"Random Forest"},{"location":"Probabilidade/","text":"Probabilidade \u00b6 An\u00e1lise combinat\u00f3ria \u00b6 Princ\u00edpio B\u00e1sico da Contagem \u00b6 O princ\u00edpio b\u00e1sico da contagem diz que se um experimento tem m resultados poss\u00edveis e outro experimento tem n resultados poss\u00edveis, ent\u00e3o os dois experimentos juntos possuem n * m resultados poss\u00edveis. Exemplo: Existem em uma loja existem \\(3\\) monitores e \\(5\\) mouses. Assim podemos escolher 1 monitor e 1 mouse de \\(3 * 5 = 15\\) formas diferentes. O princ\u00edpio pode ser generalizado para m\u00faltiplos experimentos: $$ possibilidades = n_1 \\times n_2 \\times ... \\times n_r $$ Permuta\u00e7\u00f5es \u00b6 Permuta\u00e7\u00f5es s\u00e3o arranjos ordenados de objetos, usamos o princ\u00edpio b\u00e1sico da contagem para contar a quantidade de permuta\u00e7\u00f5es poss\u00edveis. Se temos 4 objetos para 4 posi\u00e7\u00f5es poss\u00edveis, ent\u00e3o temos 4 possibilidades para a primeira posi\u00e7\u00e3o, 3 possibilidades para a terceira, 2 para a segunda e 1 para a primeira, totalizando \\(4!\\) . $$ Perm(n) = n! $$ Exemplo: Alinhar 10 livros em uma prateleira, sendo 4 de matem\u00e1tica, 3 de Qu\u00edmica, 2 de hist\u00f3ria e 1 de portugu\u00eas, de forma que todos os livros do mesmo assunto fiquem juntos: \\(4!\\) formas de arranjar os assuntos, \\(4!\\) formas de arranjar matem\u00e1tica, \\(3!\\) formas de arranjar Qu\u00edmica, \\(2!\\) formas de arranjar hist\u00f3ria e \\(1!\\) de arranjar portugu\u00eas. Total = \\(4!4!3!2!1! = 6912\\) .","title":"Probabilidade"},{"location":"Probabilidade/#probabilidade","text":"","title":"Probabilidade"},{"location":"Probabilidade/#analise-combinatoria","text":"","title":"An\u00e1lise combinat\u00f3ria"},{"location":"Probabilidade/#principio-basico-da-contagem","text":"O princ\u00edpio b\u00e1sico da contagem diz que se um experimento tem m resultados poss\u00edveis e outro experimento tem n resultados poss\u00edveis, ent\u00e3o os dois experimentos juntos possuem n * m resultados poss\u00edveis. Exemplo: Existem em uma loja existem \\(3\\) monitores e \\(5\\) mouses. Assim podemos escolher 1 monitor e 1 mouse de \\(3 * 5 = 15\\) formas diferentes. O princ\u00edpio pode ser generalizado para m\u00faltiplos experimentos: $$ possibilidades = n_1 \\times n_2 \\times ... \\times n_r $$","title":"Princ\u00edpio B\u00e1sico da Contagem"},{"location":"Probabilidade/#permutacoes","text":"Permuta\u00e7\u00f5es s\u00e3o arranjos ordenados de objetos, usamos o princ\u00edpio b\u00e1sico da contagem para contar a quantidade de permuta\u00e7\u00f5es poss\u00edveis. Se temos 4 objetos para 4 posi\u00e7\u00f5es poss\u00edveis, ent\u00e3o temos 4 possibilidades para a primeira posi\u00e7\u00e3o, 3 possibilidades para a terceira, 2 para a segunda e 1 para a primeira, totalizando \\(4!\\) . $$ Perm(n) = n! $$ Exemplo: Alinhar 10 livros em uma prateleira, sendo 4 de matem\u00e1tica, 3 de Qu\u00edmica, 2 de hist\u00f3ria e 1 de portugu\u00eas, de forma que todos os livros do mesmo assunto fiquem juntos: \\(4!\\) formas de arranjar os assuntos, \\(4!\\) formas de arranjar matem\u00e1tica, \\(3!\\) formas de arranjar Qu\u00edmica, \\(2!\\) formas de arranjar hist\u00f3ria e \\(1!\\) de arranjar portugu\u00eas. Total = \\(4!4!3!2!1! = 6912\\) .","title":"Permuta\u00e7\u00f5es"},{"location":"PyGal/","text":"In\u00edcio r\u00e1pido \u00b6 PyGal \u00e9 uma biblioteca python para cria\u00e7\u00e3o de gr\u00e1ficos din\u00e2micos em SVG. Instala\u00e7\u00e3o \u00b6 Simplesmente usar pip. $ pip install pygal Usar em Jupyter Notebooks \u00b6 from IPython.display import HTML Exemplos b\u00e1sicos \u00b6 Coisas que d\u00e3o Medo (Pesquisa elaborada pelo ser\u00edssimo Centro de Pesquisas CTPK). \u00b6 Em um Jupyter Notebook : from IPython.display import HTML bar_chart = pygal . Bar ( truncate_legend = 25 ) bar_chart . title = 'Coisas que mais d\u00e3o medo (CTPK - 2022)' bar_chart . add ( \"Barata Voadora\" , [ 30 ]) bar_chart . add ( \"Dois Caras Numa Moto\" , [ 45 ]) bar_chart . add ( \"Entrar no pr\u00f3ximo Lei\u00f3fe\" , [ 24 ]) bar_chart . add ( \"Resultado da elei\u00e7\u00e3o 2022\" , [ 83 ]) bar_chart . render_to_file ( 'coisas_que_dao_medo.svg' ) HTML ( ''' <object data=\"coisas_que_dao_medo.svg\" width=100 % he ight=100%> </object> ''' ) Com lxml instalado, o comando render_in_browser faz o Gr\u00e1fico aparecer no navegador padr\u00e3o. bar_chart . render_in_browser () Resultado: Os componentes de um gr\u00e1fico de pygal s\u00e3o bastante intuitivos, neste Gr\u00e1fico podemos alguns dos principais elementos: A documenta\u00e7\u00e3o de pygal adota este padr\u00e3o para a nomea\u00e7\u00e3o dos objetos: tipodegr\u00e1fico_chart . Os objetos de gr\u00e1fico est\u00e3o dentro do pacote pygal e podem ser inicializados usando a sintaxe: pygal.Tipo(par\u00e2metros) , um exemplo de par\u00e2metro \u00e9 o truncate_legend , que usei neste gr\u00e1fico para aumentar o n\u00famero de caracteres na legenda antes que sejam truncados. chart.add usado para adicionar os elementos ao gr\u00e1fico. chart.render() m\u00e9todo para renderizar o SVG. Em um jupyter notebook precisamos utilizar display e SVG. A fun\u00e7\u00e3o chart.render_to_file('chart.svg') pode ser usada para criar um arquivo SVG que pode facilmente ser colocado na WEB como este gr\u00e1fico acima. A fun\u00e7\u00e3o HTML de IPython.display serve para renderizar HTML no IPython. Para adicionar o gr\u00e1fico com interatividade em uma p\u00e1gina html use a tag object : < object data = \"assets/browser_evolution.svg\" width = 80% height = 50% > </ object > Forma Alternativa de escrever o c\u00f3digo do gr\u00e1fico acima: # escrever uma vez import pygal as pg from IPython.display import HTML import pygal as pg def pgr ( chart_object , nome_arquivo ): \"\"\" Fun\u00e7\u00e3o para renderizar arquivos SVG criados por pygal em um jupyter notebook, ela cria uma pasta charts na pasta de trabalho salva o SVG nela e sem seguida, renderiza o SVG em um HTML usando a tag <object>, que \u00e9 a tag apropriada para SVG din\u00e2mico. args: - chart_object (um objeto de gr\u00e1fico em pygal que queremos renderizar) - nome_arquivo (o nome) return: - SVG din\u00e2mico renderizado em HTML. \"\"\" import os from IPython.display import HTML os . makedirs ( 'charts' , exist_ok = True ) chart_object . render_to_file ( f \"charts/ { nome_arquivo } .svg\" ) return HTML ( ''' <object data=\"charts/ {} .svg\" width=95 % he ight=80%> </object> ''' . format ( nome_arquivo )) # C\u00f3digo para o gr\u00e1fico interativo c = pg . Bar ( truncate_legend = 25 ) c . title = 'Coisas que mais d\u00e3o medo (CTPK - 2022)' c . add ( \"Barata Voadora\" , [ 30 ]) c . add ( \"Dois Caras Numa Moto\" , [ 45 ]) c . add ( \"Entrar no pr\u00f3ximo Lei\u00f3fe\" , [ 24 ]) c . add ( \"Resultado da elei\u00e7\u00e3o 2022\" , [ 83 ]) pgr ( c , 'medo' ) Gr\u00e1fico de linhas b\u00e1sico (documenta\u00e7\u00e3o oficial) \u00b6 line_chart = pygal . Line () line_chart . title = 'Browser usage evolution (in %)' line_chart . x_labels = map ( str , range ( 2002 , 2013 )) line_chart . add ( 'Firefox' , [ None , None , 0 , 16.6 , 25 , 31 , 36.4 , 45.5 , 46.3 , 42.8 , 37.1 ]) line_chart . add ( 'Chrome' , [ None , None , None , None , None , None , 0 , 3.9 , 10.8 , 23.8 , 35.3 ]) line_chart . add ( 'IE' , [ 85.8 , 84.6 , 84.7 , 74.5 , 66 , 58.6 , 54.7 , 44.8 , 36.2 , 26.6 , 20.1 ]) line_chart . add ( 'Others' , [ 14.2 , 15.4 , 15.3 , 8.9 , 9 , 10.4 , 8.9 , 5.8 , 6.7 , 6.8 , 7.5 ]) bar_chart . render_to_file ( 'browser_evolution.svg' ) HTML ( ''' <object data=\"browser_evolution.svg\" width=100 % he ight=100%> </object> ''' ) Resultado:","title":"PyGal"},{"location":"PyGal/#inicio-rapido","text":"PyGal \u00e9 uma biblioteca python para cria\u00e7\u00e3o de gr\u00e1ficos din\u00e2micos em SVG.","title":"In\u00edcio r\u00e1pido"},{"location":"PyGal/#instalacao","text":"Simplesmente usar pip. $ pip install pygal","title":"Instala\u00e7\u00e3o"},{"location":"PyGal/#usar-em-jupyter-notebooks","text":"from IPython.display import HTML","title":"Usar em Jupyter Notebooks"},{"location":"PyGal/#exemplos-basicos","text":"","title":"Exemplos b\u00e1sicos"},{"location":"SobreMim/","text":"Sobre mim \u00b6 Gletson Barreto \u00b6 gletsongirao@gmail.com https://www.linkedin.com/in/gletsonbarreto/ https://github.com/GLETSONGIRAO 27 anos - Fortaleza - CE Como um bom Engenheiro e Produ\u00e7\u00e3o, estou sempre pensando em como otimizar processos e aumentar a produtividade com base nos resultados pretendidos. Como um Cientista fascinado por dados e tecnologia estou (literalmente) sempre estudando algo relacionado a dados, intelig\u00eancia artificial e tecnologia. Aberto a ofertas de parceria ou colabora\u00e7\u00e3o em projetos (volunt\u00e1rios ou n\u00e3o, bem como de trabalhos remoto. Forma\u00e7\u00e3o Acad\u00eamica \u00b6 Universidade Federal do Cear\u00e1 - Mestrado em Ci\u00eancias da Computa\u00e7\u00e3o (Cursando) Linha de pesquisa: Intelig\u00eancia Artificial Dura\u00e7\u00e3o: 2022.1 a 2023.2 Universidade Federal do Cear\u00e1 - Engenharia de Produ\u00e7\u00e3o Mec\u00e2nica Dura\u00e7\u00e3o: 2018.1 a 2021.2 Optativas: Aprendizado de M\u00e1quina | Aprendizado de M\u00e1quina Probabil\u00edstico | Modelagem Econ\u00f4mico Financeira Avan\u00e7ada | Estruturas de Dados | Gest\u00e3o de Estoques Habilidades \u00b6 Tech \u00b6 Machine Learning Manipula\u00e7\u00e3o de Dados Explora\u00e7\u00e3o e An\u00e1lise de Dados Modelo de dados relacional Visualiza\u00e7\u00e3o de Dados Estat\u00edstica Storytelling com dados Desenvolvimento Web Ferramentas \u00b6 Python Pandas, NumPy, Scikit-Learn Matplotlib, Seaborn, Pygal, Plotly Streamlit Power Bi SQL Jupyter Notebook VsCode Business \u00b6 Comunica\u00e7\u00e3o Escrita e Visual Vis\u00e3o Hol\u00edstica de uma Organiza\u00e7\u00e3o Administra\u00e7\u00e3o Estrat\u00e9gica Gest\u00e3o da Qualidade Gest\u00e3o, Mapeamento e Melhoria de Processos Gest\u00e3o de Custos An\u00e1lise de Investimentos e Modelagem Econ\u00f4mico Financeira Projeto Industrial Gest\u00e3o da produ\u00e7\u00e3o Gest\u00e3o de Estoques Cursos e Certifica\u00e7\u00f5es \u00b6 Data Scientist Nanodegree | Udacity Machine Learning | Coursera Data Scientist with Python track | DATACAMP SQL Fundamentals Skill Track | DATACAMP Microsoft Power BI Para Data Science | Data Science Academy Feature Engineering for Machine Learning | Udemy Feature Selection for Machine Learning | Udemy Machine Learning with Imbalanced Data | Udemy Financial Markets | Coursera Model Thinking | Coursera Improving Your Statistical Inferences | Coursera Outros... Experi\u00eancia \u00b6 Estagiei por 4 meses na \u00e1rea de Business Intelligence na empresa do ramo industrial, \u00c1gua de Coco , onde implementei, mantive e melhorei Dashboards relacionados a todos os setores da empresa, sendo tamb\u00e9m um dos respons\u00e1veis pela manuten\u00e7\u00e3o de toda a pipeline de dados do setor de BI. Usei principalmente Power BI como ferramenta. Fora do ramo Tech, j\u00e1 trabalhei como atendente de Telemarketing e Policial, onde desenvolvi habilidades de atendimento ao p\u00fablico , comunica\u00e7\u00e3o oral , relacionamento com equipes plurais , lideran\u00e7a , resili\u00eancia , tomada de decis\u00e3o e trabalho sob press\u00e3o . Bagagem esta, que certamente me acompanhar\u00e1 pelo resto da vida.","title":"Profissional"},{"location":"SobreMim/#sobre-mim","text":"","title":"Sobre mim"},{"location":"SobreMim/#gletson-barreto","text":"gletsongirao@gmail.com https://www.linkedin.com/in/gletsonbarreto/ https://github.com/GLETSONGIRAO 27 anos - Fortaleza - CE Como um bom Engenheiro e Produ\u00e7\u00e3o, estou sempre pensando em como otimizar processos e aumentar a produtividade com base nos resultados pretendidos. Como um Cientista fascinado por dados e tecnologia estou (literalmente) sempre estudando algo relacionado a dados, intelig\u00eancia artificial e tecnologia. Aberto a ofertas de parceria ou colabora\u00e7\u00e3o em projetos (volunt\u00e1rios ou n\u00e3o, bem como de trabalhos remoto.","title":"Gletson Barreto"},{"location":"SobreMim/#formacao-academica","text":"Universidade Federal do Cear\u00e1 - Mestrado em Ci\u00eancias da Computa\u00e7\u00e3o (Cursando) Linha de pesquisa: Intelig\u00eancia Artificial Dura\u00e7\u00e3o: 2022.1 a 2023.2 Universidade Federal do Cear\u00e1 - Engenharia de Produ\u00e7\u00e3o Mec\u00e2nica Dura\u00e7\u00e3o: 2018.1 a 2021.2 Optativas: Aprendizado de M\u00e1quina | Aprendizado de M\u00e1quina Probabil\u00edstico | Modelagem Econ\u00f4mico Financeira Avan\u00e7ada | Estruturas de Dados | Gest\u00e3o de Estoques","title":"Forma\u00e7\u00e3o Acad\u00eamica"},{"location":"SobreMim/#habilidades","text":"","title":"Habilidades"},{"location":"SobreMim/#cursos-e-certificacoes","text":"Data Scientist Nanodegree | Udacity Machine Learning | Coursera Data Scientist with Python track | DATACAMP SQL Fundamentals Skill Track | DATACAMP Microsoft Power BI Para Data Science | Data Science Academy Feature Engineering for Machine Learning | Udemy Feature Selection for Machine Learning | Udemy Machine Learning with Imbalanced Data | Udemy Financial Markets | Coursera Model Thinking | Coursera Improving Your Statistical Inferences | Coursera Outros...","title":"Cursos e Certifica\u00e7\u00f5es"},{"location":"SobreMim/#experiencia","text":"Estagiei por 4 meses na \u00e1rea de Business Intelligence na empresa do ramo industrial, \u00c1gua de Coco , onde implementei, mantive e melhorei Dashboards relacionados a todos os setores da empresa, sendo tamb\u00e9m um dos respons\u00e1veis pela manuten\u00e7\u00e3o de toda a pipeline de dados do setor de BI. Usei principalmente Power BI como ferramenta. Fora do ramo Tech, j\u00e1 trabalhei como atendente de Telemarketing e Policial, onde desenvolvi habilidades de atendimento ao p\u00fablico , comunica\u00e7\u00e3o oral , relacionamento com equipes plurais , lideran\u00e7a , resili\u00eancia , tomada de decis\u00e3o e trabalho sob press\u00e3o . Bagagem esta, que certamente me acompanhar\u00e1 pelo resto da vida.","title":"Experi\u00eancia"},{"location":"Streamlit/","text":"Streamlit Para Ci\u00eancia de Dados \u00b6 \"A forma mais r\u00e1pida de construir e compartilhar aplicativos de dados\" Streamlit \u00e9 um framework para desenvolvimentos de aplica\u00e7\u00f5es web em python de forma r\u00e1pida e interativa. Possui convenientes m\u00e9todos built-in que permitem input de usu\u00e1rios, e a cria\u00e7\u00e3o e implementa\u00e7\u00e3o de gr\u00e1ficos usando as bibliotecas mais populares de Python. Instala\u00e7\u00e3o \u00b6 Podemos simplesmente instalar com pip : pip install streamlit Podemos rodar uma demonstra\u00e7\u00e3o escrevendo no terminal: streamlit hello O que ir\u00e1 abrir uma janela no navegador rodando uma aplica\u00e7\u00e3o Streamlit em servidor local. Introdu\u00e7\u00e3o \u00b6 Streamlit tem fun\u00e7\u00f5es \u00fanicas para cada tipo de conte\u00fado como textos, gr\u00e1ficos, figuras e outros tipos de m\u00eddia, usamos estes conte\u00fados como blocos para todos os aplicativos. A fun\u00e7\u00e3o st.write() leva uma string (dentre outros tipos de objetos do python) e escreve ela diretamente no aplicativo, na ordem em que ela \u00e9 chamada. Hello World \u00b6 A aplica\u00e7\u00e3o mais b\u00e1sica que pode ser constru\u00edda \u00e9 a que simplesmente printa \"Hello World\" na tela. import streamlit as st st . write ( 'Hello World' ) Para rodar uma aplica\u00e7\u00e3o no Terminal: streamlit run clt_demo . py Compatibilidade \u00b6 Streamlit \u00e9 compat\u00edvel com as principais bibliotecas de python para o mundo de dados: bokeh Altair PyTorch OpenCV DECK.GL pandas Vega-Lite matplotlib numpy scikit-learn TensorFlow plotly Keras Mais bibliotecas usando Streamlit Components . st.pyplot() \u00b6 A fun\u00e7\u00e3o st.pyploy() no permite usar a biblioteca matplotlib no nosso aplicativo. Para mostrar o gr\u00e1fico na p\u00e1gina usamos a figura criado como argumenta para a fun\u00e7\u00e3o. import streamlit as st import numpy as np import matplotlib.pyplot as plt points = np . linspace ( - 5 , 5 , 100 ) sigmoids = [ ( 1 / ( 1 + ( np . exp ( - x )))) for x in points ] fig , ax = plt . subplots () ax = plt . plot ( points , sigmoids ) st . pyplot ( fig ) User Input \u00b6 Streamlit tem v\u00e1rias fun\u00e7\u00f5es para entrada de usu\u00e1rios, como st.text_input() para texto de forma livre, st.radio() e st.number_input() para n\u00fameros. Exemplo: plot_alura.py import streamlit as st import matplotlib.pyplot as plt st . write ( \"Qual a sua altura comparada \u00e0 minha?\" ) your_height = st . number_input ( label = \"Sua altura em cent\u00edmetros\" ) fig , ax = plt . subplots () ax = plt . bar ( x = [ \"me\" , \"you\" ], height = [ 177 , your_height ]) st . pyplot ( fig ) Adicionando texto em Streamlit \u00b6 Al\u00e9m de st.write , outras fun\u00e7\u00f5es ajudam a criar a estrutura de texto do aplicativo: st.title() st.header() st.subheader() st.markdown() Explora\u00e7\u00e3o e Manipula\u00e7\u00e3o de Dados \u00b6 Usando a fun\u00e7\u00e3o select_box() pode receber um input do usu\u00e1rio para selecionar um item dentre uma lista de op\u00e7\u00f5es, o primeiro argumento \u00e9 o t\u00edtulo do campo que ir\u00e1 aparecer no aplicativo e o segundo argumento \u00e9 a lista de op\u00e7\u00f5es. Com o pr\u00f3ximo aplicativo, podemos criar scatterplots personalizados dos atributos dos Pokemons import streamlit as st import matplotlib.pyplot as plt import pandas as pd import seaborn as sns path = \"https://gist.githubusercontent.com/armgilles/194bcff35001e7eb53a2a8b441e8b2c6/raw/92200bc0a673d5ce2110aaad4544ed6c4010f687/pokemon.csv\" poke_df = pd . read_csv ( path ) st . title ( \"Explorando Pokemons\" ) st . subheader ( \"Um app para explorar status dos Pokemons com scatterplots\" ) poke_type_1 = list ( poke_df [ \"Type 1\" ] . unique ()) atributos = [ 'HP' , 'Attack' , 'Defense' , 'Sp. Atk' , 'Sp. Def' , 'Speed' ] selected_type = st . selectbox ( \"Selecione um tipo de pokemon\" , poke_type_1 ) selected_x = st . selectbox ( \"Selecione um atributo para o eixo x\" , atributos ) selected_y = st . selectbox ( \"Selecione um atributo para o eixo y\" , atributos ) data = poke_df [ poke_df [ \"Type 1\" ] == selected_type ] fig , ax = plt . subplots () ax = sns . scatterplot ( data = data , x = selected_x , y = selected_y , hue = \"Legendary\" ) plt . xlabel ( selected_x ) plt . ylabel ( selected_y ) st . pyplot ( fig ) Basicamente, usamos pandas para manipula\u00e7\u00e3o b\u00e1sica de dados com st.selectbox() nos fornecendo a entrada desejada. Upload de Arquivos \u00b6 A fun\u00e7\u00e3o st.file_uploader() permite o upload de arquivos para nossa aplica\u00e7\u00e3o. O tamanho m\u00e1ximo \u00e9 de 200mb. Podemos usar para ler um conjunto de dados, por exemplo. arquivo = st . file_uploader ( 'Selecione seu arquivo local' ) dataframe = pd . read_csv ( arquivo ) Visualiza\u00e7\u00e3o de Dados com Streamlit \u00b6 Al\u00e9m da fun\u00e7\u00f5es nativas de Streamlit para visualiza\u00e7\u00e3o de dados, podem ser usadas as seguintes biblioteca de Python : Matplotlib Seaborn Plotly Bokeh Altair PyDeck Fun\u00e7\u00f5es Nativas \u00b6 Existem 3 fun\u00e7\u00f5es nativas no Streamlit para cria\u00e7\u00e3o de gr\u00e1ficos: st.line_chart() st.bar_chart() st.area_chart() O c\u00f3digo abaixo pode ser adicionado ao \u00faltimo app criado para testar as fun\u00e7\u00f5es: st . write ( \"Testando as fun\u00e7\u00f5es nativas\" ) contagem_tipos = poke_df [ 'Type 1' ] . value_counts () st . area_chart ( contagem_tipos ) st . line_chart ( contagem_tipos ) st . bar_chart ( contagem_tipos ) As fun\u00e7\u00f5es nativas criam gr\u00e1ficos interativos que possuem um visual e formata\u00e7\u00e3o bacana (usando Altair como backend). Estas fun\u00e7\u00f5es s\u00e3o bastante \u00fateis para problemas simples, por\u00e9m bem menos flex\u00edveis do que as bibliotecas pr\u00f3prias para este fim. Outra fun\u00e7\u00e3o, st.map() utiliza PyDeck e plota mapas em DataFrame com colunas do tipo longitude e latitude . Cada linhas ser\u00e1 um ponto no mapa. Plotly \u00b6 A fun\u00e7\u00e3o st.plotly_chart() permite que sejam chamados gr\u00e1ficos de plotly . Usando plotly para explorar a distribui\u00e7\u00e3o dos atributos: selected_att = st . selectbox ( \"Selecione um atributo\" , atributos ) fig = px . histogram ( data [ selected_att ]) st . plotly_chart ( fig ) Machine Learning com Streamlit \u00b6 O c\u00f3digo abaixo cria um modelo b\u00e1sico para classificar pokemons como Lend\u00e1rio ou n\u00e3o, e ent\u00e3o salva o modelo com pickle . import pandas as pd from sklearn.model_selection import train_test_split from sklearn.preprocessing import OneHotEncoder from sklearn.preprocessing import StandardScaler from sklearn.ensemble import RandomForestClassifier from sklearn.pipeline import Pipeline from sklearn.metrics import accuracy_score, roc_auc_score, classification_report poke_df = pd.read_csv(\"https://gist.githubusercontent.com/armgilles/194bcff35001e7eb53a2a8b441e8b2c6/raw/92200bc0a673d5ce2110aaad4544ed6c4010f687/pokemon.csv\") # Processo b\u00e1sico de modelagem X = poke_df[['Total', 'HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed']] y = poke_df['Legendary'] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42) pipe = Pipeline([ ('scaler', StandardScaler()), ('model', RandomForestClassifier(random_state = 42)) ]) pipe.fit(X_train, y_train) # Salvando o modelo import pickle filename = 'poke_model.sav' pickle.dump(pipe, open(filename, 'wb')) Ent\u00e3o podemos carregar o modelo na aplica\u00e7\u00e3o Streamlit e testar se est\u00e1 funcionando. filename = \"poke_model.sav\" loaded_pipe = pickle . load ( open ( filename , 'rb' )) X = poke_df [[ 'Total' , 'HP' , 'Attack' , 'Defense' , 'Sp. Atk' , 'Sp. Def' , 'Speed' ]] y = poke_df [ 'Legendary' ] X_train , X_test , y_train , y_test = train_test_split ( X , y , test_size = 0.33 , random_state = 42 ) y_pred = loaded_pipe . predict ( X_test ) acc = accuracy_score ( y_test , y_pred ) auc = roc_auc_score ( y_test , y_pred ) st . subheader ( \"Carregando um modelo de ML pr\u00e9 treinado\" ) st . write ( f \"Acur\u00e1cia: { acc } \" ) st . write ( f \"AUC score: { auc } \" ) st . text ( classification_report ( y_test , y_pred )) Deploy com Streamlit \u00b6 Podemos usar Streamlit Cloud para implementar, gerenciar e compartilhar em apenas 3 passos: Colocar o app em um reposit\u00f3rio p\u00fablico do GitHub (incluindo requirements.txt) Se cadastrar em share.streamlit.io Clicar em \"Deploy an App\" e ent\u00e3o compartilhar a URL do GitHub.","title":"Streamlit Para Ci\u00eancia de Dados"},{"location":"Streamlit/#streamlit-para-ciencia-de-dados","text":"\"A forma mais r\u00e1pida de construir e compartilhar aplicativos de dados\" Streamlit \u00e9 um framework para desenvolvimentos de aplica\u00e7\u00f5es web em python de forma r\u00e1pida e interativa. Possui convenientes m\u00e9todos built-in que permitem input de usu\u00e1rios, e a cria\u00e7\u00e3o e implementa\u00e7\u00e3o de gr\u00e1ficos usando as bibliotecas mais populares de Python.","title":"Streamlit Para Ci\u00eancia de Dados"},{"location":"Streamlit/#instalacao","text":"Podemos simplesmente instalar com pip : pip install streamlit Podemos rodar uma demonstra\u00e7\u00e3o escrevendo no terminal: streamlit hello O que ir\u00e1 abrir uma janela no navegador rodando uma aplica\u00e7\u00e3o Streamlit em servidor local.","title":"Instala\u00e7\u00e3o"},{"location":"Streamlit/#introducao","text":"Streamlit tem fun\u00e7\u00f5es \u00fanicas para cada tipo de conte\u00fado como textos, gr\u00e1ficos, figuras e outros tipos de m\u00eddia, usamos estes conte\u00fados como blocos para todos os aplicativos. A fun\u00e7\u00e3o st.write() leva uma string (dentre outros tipos de objetos do python) e escreve ela diretamente no aplicativo, na ordem em que ela \u00e9 chamada.","title":"Introdu\u00e7\u00e3o"},{"location":"Streamlit/#hello-world","text":"A aplica\u00e7\u00e3o mais b\u00e1sica que pode ser constru\u00edda \u00e9 a que simplesmente printa \"Hello World\" na tela. import streamlit as st st . write ( 'Hello World' ) Para rodar uma aplica\u00e7\u00e3o no Terminal: streamlit run clt_demo . py","title":"Hello World"},{"location":"Streamlit/#compatibilidade","text":"Streamlit \u00e9 compat\u00edvel com as principais bibliotecas de python para o mundo de dados: bokeh Altair PyTorch OpenCV DECK.GL pandas Vega-Lite matplotlib numpy scikit-learn TensorFlow plotly Keras Mais bibliotecas usando Streamlit Components .","title":"Compatibilidade"},{"location":"Streamlit/#stpyplot","text":"A fun\u00e7\u00e3o st.pyploy() no permite usar a biblioteca matplotlib no nosso aplicativo. Para mostrar o gr\u00e1fico na p\u00e1gina usamos a figura criado como argumenta para a fun\u00e7\u00e3o. import streamlit as st import numpy as np import matplotlib.pyplot as plt points = np . linspace ( - 5 , 5 , 100 ) sigmoids = [ ( 1 / ( 1 + ( np . exp ( - x )))) for x in points ] fig , ax = plt . subplots () ax = plt . plot ( points , sigmoids ) st . pyplot ( fig )","title":"st.pyplot()"},{"location":"Streamlit/#user-input","text":"Streamlit tem v\u00e1rias fun\u00e7\u00f5es para entrada de usu\u00e1rios, como st.text_input() para texto de forma livre, st.radio() e st.number_input() para n\u00fameros. Exemplo: plot_alura.py import streamlit as st import matplotlib.pyplot as plt st . write ( \"Qual a sua altura comparada \u00e0 minha?\" ) your_height = st . number_input ( label = \"Sua altura em cent\u00edmetros\" ) fig , ax = plt . subplots () ax = plt . bar ( x = [ \"me\" , \"you\" ], height = [ 177 , your_height ]) st . pyplot ( fig )","title":"User Input"},{"location":"Streamlit/#adicionando-texto-em-streamlit","text":"Al\u00e9m de st.write , outras fun\u00e7\u00f5es ajudam a criar a estrutura de texto do aplicativo: st.title() st.header() st.subheader() st.markdown()","title":"Adicionando texto em Streamlit"},{"location":"Streamlit/#exploracao-e-manipulacao-de-dados","text":"Usando a fun\u00e7\u00e3o select_box() pode receber um input do usu\u00e1rio para selecionar um item dentre uma lista de op\u00e7\u00f5es, o primeiro argumento \u00e9 o t\u00edtulo do campo que ir\u00e1 aparecer no aplicativo e o segundo argumento \u00e9 a lista de op\u00e7\u00f5es. Com o pr\u00f3ximo aplicativo, podemos criar scatterplots personalizados dos atributos dos Pokemons import streamlit as st import matplotlib.pyplot as plt import pandas as pd import seaborn as sns path = \"https://gist.githubusercontent.com/armgilles/194bcff35001e7eb53a2a8b441e8b2c6/raw/92200bc0a673d5ce2110aaad4544ed6c4010f687/pokemon.csv\" poke_df = pd . read_csv ( path ) st . title ( \"Explorando Pokemons\" ) st . subheader ( \"Um app para explorar status dos Pokemons com scatterplots\" ) poke_type_1 = list ( poke_df [ \"Type 1\" ] . unique ()) atributos = [ 'HP' , 'Attack' , 'Defense' , 'Sp. Atk' , 'Sp. Def' , 'Speed' ] selected_type = st . selectbox ( \"Selecione um tipo de pokemon\" , poke_type_1 ) selected_x = st . selectbox ( \"Selecione um atributo para o eixo x\" , atributos ) selected_y = st . selectbox ( \"Selecione um atributo para o eixo y\" , atributos ) data = poke_df [ poke_df [ \"Type 1\" ] == selected_type ] fig , ax = plt . subplots () ax = sns . scatterplot ( data = data , x = selected_x , y = selected_y , hue = \"Legendary\" ) plt . xlabel ( selected_x ) plt . ylabel ( selected_y ) st . pyplot ( fig ) Basicamente, usamos pandas para manipula\u00e7\u00e3o b\u00e1sica de dados com st.selectbox() nos fornecendo a entrada desejada.","title":"Explora\u00e7\u00e3o e Manipula\u00e7\u00e3o de Dados"},{"location":"Streamlit/#upload-de-arquivos","text":"A fun\u00e7\u00e3o st.file_uploader() permite o upload de arquivos para nossa aplica\u00e7\u00e3o. O tamanho m\u00e1ximo \u00e9 de 200mb. Podemos usar para ler um conjunto de dados, por exemplo. arquivo = st . file_uploader ( 'Selecione seu arquivo local' ) dataframe = pd . read_csv ( arquivo )","title":"Upload de Arquivos"},{"location":"Streamlit/#visualizacao-de-dados-com-streamlit","text":"Al\u00e9m da fun\u00e7\u00f5es nativas de Streamlit para visualiza\u00e7\u00e3o de dados, podem ser usadas as seguintes biblioteca de Python : Matplotlib Seaborn Plotly Bokeh Altair PyDeck","title":"Visualiza\u00e7\u00e3o de Dados com Streamlit"},{"location":"Streamlit/#funcoes-nativas","text":"Existem 3 fun\u00e7\u00f5es nativas no Streamlit para cria\u00e7\u00e3o de gr\u00e1ficos: st.line_chart() st.bar_chart() st.area_chart() O c\u00f3digo abaixo pode ser adicionado ao \u00faltimo app criado para testar as fun\u00e7\u00f5es: st . write ( \"Testando as fun\u00e7\u00f5es nativas\" ) contagem_tipos = poke_df [ 'Type 1' ] . value_counts () st . area_chart ( contagem_tipos ) st . line_chart ( contagem_tipos ) st . bar_chart ( contagem_tipos ) As fun\u00e7\u00f5es nativas criam gr\u00e1ficos interativos que possuem um visual e formata\u00e7\u00e3o bacana (usando Altair como backend). Estas fun\u00e7\u00f5es s\u00e3o bastante \u00fateis para problemas simples, por\u00e9m bem menos flex\u00edveis do que as bibliotecas pr\u00f3prias para este fim. Outra fun\u00e7\u00e3o, st.map() utiliza PyDeck e plota mapas em DataFrame com colunas do tipo longitude e latitude . Cada linhas ser\u00e1 um ponto no mapa.","title":"Fun\u00e7\u00f5es Nativas"},{"location":"Streamlit/#plotly","text":"A fun\u00e7\u00e3o st.plotly_chart() permite que sejam chamados gr\u00e1ficos de plotly . Usando plotly para explorar a distribui\u00e7\u00e3o dos atributos: selected_att = st . selectbox ( \"Selecione um atributo\" , atributos ) fig = px . histogram ( data [ selected_att ]) st . plotly_chart ( fig )","title":"Plotly"},{"location":"Streamlit/#machine-learning-com-streamlit","text":"O c\u00f3digo abaixo cria um modelo b\u00e1sico para classificar pokemons como Lend\u00e1rio ou n\u00e3o, e ent\u00e3o salva o modelo com pickle . import pandas as pd from sklearn.model_selection import train_test_split from sklearn.preprocessing import OneHotEncoder from sklearn.preprocessing import StandardScaler from sklearn.ensemble import RandomForestClassifier from sklearn.pipeline import Pipeline from sklearn.metrics import accuracy_score, roc_auc_score, classification_report poke_df = pd.read_csv(\"https://gist.githubusercontent.com/armgilles/194bcff35001e7eb53a2a8b441e8b2c6/raw/92200bc0a673d5ce2110aaad4544ed6c4010f687/pokemon.csv\") # Processo b\u00e1sico de modelagem X = poke_df[['Total', 'HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed']] y = poke_df['Legendary'] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42) pipe = Pipeline([ ('scaler', StandardScaler()), ('model', RandomForestClassifier(random_state = 42)) ]) pipe.fit(X_train, y_train) # Salvando o modelo import pickle filename = 'poke_model.sav' pickle.dump(pipe, open(filename, 'wb')) Ent\u00e3o podemos carregar o modelo na aplica\u00e7\u00e3o Streamlit e testar se est\u00e1 funcionando. filename = \"poke_model.sav\" loaded_pipe = pickle . load ( open ( filename , 'rb' )) X = poke_df [[ 'Total' , 'HP' , 'Attack' , 'Defense' , 'Sp. Atk' , 'Sp. Def' , 'Speed' ]] y = poke_df [ 'Legendary' ] X_train , X_test , y_train , y_test = train_test_split ( X , y , test_size = 0.33 , random_state = 42 ) y_pred = loaded_pipe . predict ( X_test ) acc = accuracy_score ( y_test , y_pred ) auc = roc_auc_score ( y_test , y_pred ) st . subheader ( \"Carregando um modelo de ML pr\u00e9 treinado\" ) st . write ( f \"Acur\u00e1cia: { acc } \" ) st . write ( f \"AUC score: { auc } \" ) st . text ( classification_report ( y_test , y_pred ))","title":"Machine Learning com Streamlit"},{"location":"Streamlit/#deploy-com-streamlit","text":"Podemos usar Streamlit Cloud para implementar, gerenciar e compartilhar em apenas 3 passos: Colocar o app em um reposit\u00f3rio p\u00fablico do GitHub (incluindo requirements.txt) Se cadastrar em share.streamlit.io Clicar em \"Deploy an App\" e ent\u00e3o compartilhar a URL do GitHub.","title":"Deploy com Streamlit"},{"location":"XGBoost/","text":"Gradient Boosting com XGBoost \u00b6 XGBoost \u00e9 uma biblioteca para Gradient Boosted Decision Trees altamente eficiente utilizada para classifica\u00e7\u00e3o e regress\u00e3o. XGBoost implemente uma vers\u00e3o altamente eficiente de Gradient Boosted Trees. Os modelos do XGBoost treinam muito mais r\u00e1pido do que os modelos em scikit-learn. Em competi\u00e7\u00f5es de ci\u00eancia de dados para pequenos e m\u00e9dios conjuntos de dados, XGBoost est\u00e1 sempre os modelos com melhores resultados. Estruturas de dados B\u00e1sicas \u00b6 A estrutura de dados b\u00e1sica para XGBoost \u00e9 a DMatrix , que representa uma matriz de dados. A DMatrix pode ser constru\u00edda a partir de arrays NumPy. O c\u00f3digo abaixo criar objetos DMatrix com e sem r\u00f3tulos. import xgboost as xgb dmat1 = xgb . DMatrix ( data ) # data = np.array # com r\u00f3tulos labels = np . array ([ 0 , 1 ]) dmat2 = xgb . DMatrix ( data , label = labels ) O objeto DMatrix pode ent\u00e3o ser usado para treinar e usar um objeto Booster , que representa a Gradient Boosted Decision Tree. A fun\u00e7\u00e3o train do XGBoost nos permite treinar um Booster com um conjunto de par\u00e2metros especificado. dtrain = xgb . DMatrix ( data , label = labels ) params = { 'max_depth' : 0 , 'objective' : 'binary:logistic' , 'eval_metric' : 'logloss' } bst = xgb . train ( params , dtrain ) Lista de poss\u00edveis par\u00e2metros para Tree Booster: eta [default=0.3, alias: learning_rate ] gamma [default=0, alias: min_split_loss ] max_depth [default=6] min_child_weight [default=1] max_delta_step [default=0] subsample [default=1] sampling_method [default= uniform ] uniform gradient_based colsample_bytree , colsample_bylevel , colsample_bynode [default=1] lambda alpha tree_method sketch_eps [default=0.03] scale_pos_weight [default=1] updater refresh_leaf [default=1] process_type [default= default ] grow_policy [default= depthwise ] depthwise lossguide max_leaves [default=0] max_bin , [default=256] predictor , [default= auto ] auto cpu_predictor gpu_predictor num_parallel_tree , [default=1] monotone_constraints interaction_constraints Usando um Booster \u00b6 Depois de treinar o Booster podemos avaliar e usar para fazer predi\u00e7\u00f5es. deval = xgb . DMatrix ( eval_data , label = eval_labels ) dpred = xgb . DMatrix ( new_data ) predictions = bst . predict ( dpred ) Valida\u00e7\u00e3o Cruzada \u00b6 Escolhendo par\u00e2metros \u00b6 Como existem muitos par\u00e2metros no xgb e muitos valores poss\u00edveis para cada par\u00e2metro, geralmente \u00e9 necess\u00e1rio tunar e para isso utilizar Valida\u00e7\u00e3o Cruzada. A fun\u00e7\u00e3o cv executa valida\u00e7\u00e3o cruzada para um conjunto de par\u00e2metros em um conjunto de dados. cv_results = xgb . cv ( params , dtrain ) A sa\u00edda de cv \u00e9 um DataFrame (pandas) que cont\u00e9m os resultados de treino e teste para m\u00e9dia e desvio padr\u00e3o de cada itera\u00e7\u00e3o. O nfold padr\u00e3o \u00e9 3 e o n\u00famero de itera\u00e7\u00f5es num_boost_round padr\u00e3o \u00e9 10. cv_results = xgb . cv ( params , dtrain , num_boost_round = 5 ) Guardando Boosters \u00b6 Depois de achar os melhores par\u00e2metros para um Booster podemos salvar o modelo \u00e9 um arquivo bin\u00e1rio. Cada Booster cont\u00e9m uma fun\u00e7\u00e3o chamada save_model , que salva o arquivo bin\u00e1rio do modelo em um arquivo. bst = xgb . train ( params , dtrain ) bst . save_model ( 'model.bin' ) Podemos restaurar um Booster a partir de um arquivo bin\u00e1rio com a fun\u00e7\u00e3o load_model , mas primeiro precisamos inicializar um Booster vazio. new_bst = xgb . Booster () new_bst . load_model ( 'model.bin' ) XGBoost Classifier \u00b6 Podemos utilizar XGBoost para classifica\u00e7\u00e3o e regress\u00e3o seguindo uma API com o mesmo estilo do Scikit Learn. Para classifica\u00e7\u00e3o o modelo da API \u00e9 chamado XGBClassifier e pode ser treinado com o m\u00e9todo fit e arrays NumPy. model = xgb . XGBClassifier ( use_label_encoder = False , eval_metric = 'logloss' ) model . fit ( data , labels ) predictions = model . predict ( new_data ) A fun\u00e7\u00e3o predict do XGBClassifier retorna a predi\u00e7\u00e3o real e n\u00e3o as probabilidades. XGBoost Regressor \u00b6 Objeto XGBRegressor . model = xgb . XGBRegressor ( max_depth = 2 ) model . fit ( data , labels ) Feature Importance \u00b6 Depois do treinamento, podemos ver a import\u00e2ncia dos atributos de cada conjunto de dados utilizado a propriedade do modelo feature_importances_ . model = xgb . XGBClassifier ( objective = 'multi:softmax' , eval_metric = 'mlogloss' , use_label_encoder = False ) model . fit ( data , labels ) print ( model . feature_importances_ ) Plotando as import\u00e2ncias com a fun\u00e7\u00e3o plot_importance : model = xgb . XGBRegressor () model . fit ( data , labels ) xgb . plot_importance ( model ) plt . show () O resultado \u00e9 um gr\u00e1fico de barras dos F-scores para cada atributo. Por padr\u00e3o, a fun\u00e7\u00e3o usa feature weight como m\u00e9trica de import\u00e2ncia, que diz o qu\u00e3o frequente o atributo aparece na Boosted Decision Tree. Podemos selecionar uma m\u00e9trica diferente com o argumento importance_type : xgb . plot_importance ( model , importance_type = 'gain' ) Tunando Hiperpar\u00e2metros \u00b6 Usando a API para estilo sklearn podemos usar os modelos com a API real do sklearn. Usando GridSearchCV para tunar hiperpar\u00e2metros: model = xgb . XGBClassifier ( objective = 'binary:logistic' , eval_metric = 'logloss' , use_label_encoder = False ) params = { 'max_depth' : range ( 2 , 5 )} from sklearn.model_selection import GridSearchCV cv_model = GridSearchCV ( model , params , cv = 4 ) cv_model . fit ( data , labels ) cv_model . best_params_ [ 'max_depth' ] Par\u00e2metros comumente tunados s\u00e3o max_depth e eta .","title":"XGBoost"},{"location":"XGBoost/#gradient-boosting-com-xgboost","text":"XGBoost \u00e9 uma biblioteca para Gradient Boosted Decision Trees altamente eficiente utilizada para classifica\u00e7\u00e3o e regress\u00e3o. XGBoost implemente uma vers\u00e3o altamente eficiente de Gradient Boosted Trees. Os modelos do XGBoost treinam muito mais r\u00e1pido do que os modelos em scikit-learn. Em competi\u00e7\u00f5es de ci\u00eancia de dados para pequenos e m\u00e9dios conjuntos de dados, XGBoost est\u00e1 sempre os modelos com melhores resultados.","title":"Gradient Boosting com XGBoost"},{"location":"XGBoost/#estruturas-de-dados-basicas","text":"A estrutura de dados b\u00e1sica para XGBoost \u00e9 a DMatrix , que representa uma matriz de dados. A DMatrix pode ser constru\u00edda a partir de arrays NumPy. O c\u00f3digo abaixo criar objetos DMatrix com e sem r\u00f3tulos. import xgboost as xgb dmat1 = xgb . DMatrix ( data ) # data = np.array # com r\u00f3tulos labels = np . array ([ 0 , 1 ]) dmat2 = xgb . DMatrix ( data , label = labels ) O objeto DMatrix pode ent\u00e3o ser usado para treinar e usar um objeto Booster , que representa a Gradient Boosted Decision Tree. A fun\u00e7\u00e3o train do XGBoost nos permite treinar um Booster com um conjunto de par\u00e2metros especificado. dtrain = xgb . DMatrix ( data , label = labels ) params = { 'max_depth' : 0 , 'objective' : 'binary:logistic' , 'eval_metric' : 'logloss' } bst = xgb . train ( params , dtrain ) Lista de poss\u00edveis par\u00e2metros para Tree Booster: eta [default=0.3, alias: learning_rate ] gamma [default=0, alias: min_split_loss ] max_depth [default=6] min_child_weight [default=1] max_delta_step [default=0] subsample [default=1] sampling_method [default= uniform ] uniform gradient_based colsample_bytree , colsample_bylevel , colsample_bynode [default=1] lambda alpha tree_method sketch_eps [default=0.03] scale_pos_weight [default=1] updater refresh_leaf [default=1] process_type [default= default ] grow_policy [default= depthwise ] depthwise lossguide max_leaves [default=0] max_bin , [default=256] predictor , [default= auto ] auto cpu_predictor gpu_predictor num_parallel_tree , [default=1] monotone_constraints interaction_constraints","title":"Estruturas de dados B\u00e1sicas"},{"location":"XGBoost/#usando-um-booster","text":"Depois de treinar o Booster podemos avaliar e usar para fazer predi\u00e7\u00f5es. deval = xgb . DMatrix ( eval_data , label = eval_labels ) dpred = xgb . DMatrix ( new_data ) predictions = bst . predict ( dpred )","title":"Usando um Booster"},{"location":"XGBoost/#validacao-cruzada","text":"","title":"Valida\u00e7\u00e3o Cruzada"},{"location":"XGBoost/#guardando-boosters","text":"Depois de achar os melhores par\u00e2metros para um Booster podemos salvar o modelo \u00e9 um arquivo bin\u00e1rio. Cada Booster cont\u00e9m uma fun\u00e7\u00e3o chamada save_model , que salva o arquivo bin\u00e1rio do modelo em um arquivo. bst = xgb . train ( params , dtrain ) bst . save_model ( 'model.bin' ) Podemos restaurar um Booster a partir de um arquivo bin\u00e1rio com a fun\u00e7\u00e3o load_model , mas primeiro precisamos inicializar um Booster vazio. new_bst = xgb . Booster () new_bst . load_model ( 'model.bin' )","title":"Guardando Boosters"},{"location":"XGBoost/#xgboost-classifier","text":"Podemos utilizar XGBoost para classifica\u00e7\u00e3o e regress\u00e3o seguindo uma API com o mesmo estilo do Scikit Learn. Para classifica\u00e7\u00e3o o modelo da API \u00e9 chamado XGBClassifier e pode ser treinado com o m\u00e9todo fit e arrays NumPy. model = xgb . XGBClassifier ( use_label_encoder = False , eval_metric = 'logloss' ) model . fit ( data , labels ) predictions = model . predict ( new_data ) A fun\u00e7\u00e3o predict do XGBClassifier retorna a predi\u00e7\u00e3o real e n\u00e3o as probabilidades.","title":"XGBoost Classifier"},{"location":"XGBoost/#xgboost-regressor","text":"Objeto XGBRegressor . model = xgb . XGBRegressor ( max_depth = 2 ) model . fit ( data , labels )","title":"XGBoost Regressor"},{"location":"XGBoost/#feature-importance","text":"Depois do treinamento, podemos ver a import\u00e2ncia dos atributos de cada conjunto de dados utilizado a propriedade do modelo feature_importances_ . model = xgb . XGBClassifier ( objective = 'multi:softmax' , eval_metric = 'mlogloss' , use_label_encoder = False ) model . fit ( data , labels ) print ( model . feature_importances_ ) Plotando as import\u00e2ncias com a fun\u00e7\u00e3o plot_importance : model = xgb . XGBRegressor () model . fit ( data , labels ) xgb . plot_importance ( model ) plt . show () O resultado \u00e9 um gr\u00e1fico de barras dos F-scores para cada atributo. Por padr\u00e3o, a fun\u00e7\u00e3o usa feature weight como m\u00e9trica de import\u00e2ncia, que diz o qu\u00e3o frequente o atributo aparece na Boosted Decision Tree. Podemos selecionar uma m\u00e9trica diferente com o argumento importance_type : xgb . plot_importance ( model , importance_type = 'gain' )","title":"Feature Importance"},{"location":"XGBoost/#tunando-hiperparametros","text":"Usando a API para estilo sklearn podemos usar os modelos com a API real do sklearn. Usando GridSearchCV para tunar hiperpar\u00e2metros: model = xgb . XGBClassifier ( objective = 'binary:logistic' , eval_metric = 'logloss' , use_label_encoder = False ) params = { 'max_depth' : range ( 2 , 5 )} from sklearn.model_selection import GridSearchCV cv_model = GridSearchCV ( model , params , cv = 4 ) cv_model . fit ( data , labels ) cv_model . best_params_ [ 'max_depth' ] Par\u00e2metros comumente tunados s\u00e3o max_depth e eta .","title":"Tunando Hiperpar\u00e2metros"},{"location":"eye_color_pt1/","text":"Introdu\u00e7\u00e3o \u00b6 E se a partir de uma amostra de DNA achado na cena de um crime os investigadores pudessem descobrir quais as caracter\u00edsticas f\u00edsicas do dono do DNA? Na verdade isto \u00e9 poss\u00edvel, o processo de prever fen\u00f3tipo a partir de informa\u00e7\u00f5es gen\u00e9ticas \u00e9 chamado de DNA Phenotyping ou Forensic DNA Phenotyping . A predi\u00e7\u00e3o de caracter\u00edsticas externamente vis\u00edveis baseada no DNA pode ajudar a pol\u00edcia a: Estreitar os caminhos de uma investiga\u00e7\u00e3o. Desvendar um crime mais r\u00e1pido, aumentando a produtividade. Diminuir os poss\u00edveis danos de um processo criminal contra uma pessoa inocente. Exemplo: A forma mais comum \u00e9: a partir da coleta de DNA, identificar algumas muta\u00e7\u00f5es chamadas SNPs. Cada SNP tem um C\u00f3digo identificador e est\u00e1 associada a um GENE. A SNP se manifesta no alelo em n\u00e3o presente: 0, Heterozigoto: 1 ou Homozigoto: 2. Com material gen\u00e9tico em m\u00e3os \u00e9 poss\u00edvel buscar por muta\u00e7\u00f5es dos genes chamadas SNPs ( Single-Nucleotide Polymorphisms ), algumas destas muta\u00e7\u00f5es podem estar associadas a Fen\u00f3tipos , como cor dos olhos, cor da pele, cor do cabelo e etc. Construindo um dataset \u00b6 Para auxiliar nesta tarefa de predizer fen\u00f3tipos baseado no material gen\u00e9tico, podem ser aplicados modelos de Aprendizado de M\u00e1quina. Para isso, s\u00e3o necess\u00e1rios... DADOS!!! E \u00e9 sobre a coleta e tratamento destes dados que se trata este trabalho. Com o advento das leis de prote\u00e7\u00f5es de dados, dados gen\u00e9ticos a n\u00edvel individual dificilmente podem ser encontrados na internet hoje em dia, bancos de dados gen\u00e9ticos tradicionais e publica\u00e7\u00f5es cient\u00edficas que disponibilizavam os dados n\u00e3o permitem mais o acesso. Uma forma de trabalhar com dados abertos e estudar rela\u00e7\u00f5es entre dados gen\u00e9ticos e fen\u00f3tipos \u00e9 a plataforma openSNP , que permite que clientes de empresas que fazem testes gen\u00e9ticos publiquem seus resultados e compartilhem ainda seus fen\u00f3tipos. Usando esta plataforma, foi poss\u00edvel baixar um grande arquivo que inclui dados gen\u00e9ticos de 6.322 usu\u00e1rios acompanhados da autodeclara\u00e7\u00e3o de seus fen\u00f3tipos. O arquivo baixado: Na plataforma, est\u00e3o cadastrados 673 fen\u00f3tipos que o usu\u00e1rio pode preencher. Dentre os arquivos disponibilizados, existe um arquivo auxiliar contendo os dados para os fen\u00f3tipos respondidos por cada usu\u00e1rio. Trabalhando com o arquivo auxiliar de Fen\u00f3tipos \u00b6 Dos 6.326 usu\u00e1rios que fizeram uploads dos gen\u00e9ticos individuais, 1.678 deles preencheram o campo para cor dos olhos. Nesta etapa foi feita a leitura do arquivo contendo os fen\u00f3tipos. Filtragem dos usu\u00e1rios que declaram a cor do olho. Agrupamento das cores do olho em categorias: Azul, Verde, Cinza: Olhos predominantemente claros. Intermedi\u00e1rios: Castanho claro, mel, avel\u00e3 (hazel). Castanho. Grava\u00e7\u00e3o do conjunto de dados processado em um arquivo auxiliar. Nesta etapa sobraram apenas 1286 usu\u00e1rios, devido ao descarte de r\u00f3tulos n\u00e3o informativos e de dados duplicados. Dicion\u00e1rio usado para mapear os dados: color_map = { \"Brown\" : \"Brown\" , \"Blue\" : \"BGG\" , \"Hazel\" : \"Int\" , \"Blue-grey\" : \"BGG\" , \"Green\" : \"BGG\" , \"Dark brown\" : \"Brown\" , \"Blue-green\" : \"BGG\" , \"Hazel (brown/green)\" : \"Int\" , \"Hazel/light brown\" : \"Int\" , \"Gray-blue\" : \"BGG\" , \"Blue-grey; broken amber collarette\" : \"BGG\" , \"hazel\" : \"Int\" , \"Dark blue\" : \"BGG\" , \"Green-hazel\" : \"Int\" , \"Green-brown\" : \"Int\" , \"brown\" : \"Brown\" , \"Green-gray\" : \"BGG\" , \"Blue-green\" : \"BGG\" , \"blue-green\" : \"BGG\" , \"blue\" : \"BGG\" , \"Blue, grey, green, changing\" : \"BGG\" , \"Blue grey\" : \"BGG\" , \"Blue with yellow parts\" : \"BGG\" , \"Blue-grey with central heterochromia\" : \"BGG\" , \"Light-mixed green\" : \"BGG\" , \"blue\" : \"BGG\" , \"blue-grey\" : \"BGG\" , \"Blue-green; amber collarette, and gray-blue ringing \" : \"BGG\" , \"Blue with a yellow ring of flecks that make my eyes look green depending on the light or my mood\" : \"BGG\" , \"Brown/black\" : \"Brown\" , \"Hazel (light brown, dark green, dark blue)\" : \"Int\" , \"Blue-green-grey\" : \"BGG\" , \"Green\" : \"BGG\" , \"Brown-amber\" : \"Int\" , \"blue, grey, green, changing\" : \"BGG\" , \"Amber\" : \"Int\" , \"Amber - (yellow/ocre brown)\" : \"Int\" , \"Hazel/Light Brown\" : \"Int\" , \"Amber - (yellow/ocre brown)\" : \"Int\" } Dataset 1 \u00b6 user_id : n\u00famero identifica\u00e7\u00e3o do usu\u00e1rio. genotype_filename : padr\u00e3o que identifica o arquivo com os dados gen\u00e9ticos do usu\u00e1rio. Eye_color : String contendo a cor do olho declarada pelo usu\u00e1rio. color_cat : Categorias de cor do olho, mapeada pelo dicion\u00e1rio acima. BGG: Verde, Cinza ou Azul. Int: Tons intermedi\u00e1rios. Brown: Castanho, escuro. Leitura dos SNPs dos arquivos individuais. \u00b6 Nesta etapa ser\u00e1 constru\u00eddo um conjunto de dados contendo os snps que queremos analisar e o id do usu\u00e1rio para cada usu\u00e1rio. Mapeamento dataset1 ['genotype_filename'] para o nome real do arquivo. Cria\u00e7\u00e3o de um conjunto de dados auxiliar utilizando a biblioteca glob . Utiliza\u00e7\u00e3o da biblioteca snps para parsear os dados gen\u00e9ticos de cada indiv\u00edduo em um objeto pandas dataframe. Filtragem do dataframe contendo dados individuais para criar um dataframe individual apenas dos dados de interesse. Jun\u00e7\u00e3o dos dados individuais em um dataframe com todos os dados. Dataset2 \u00b6 user_id : n\u00famero identifica\u00e7\u00e3o do usu\u00e1rio. filename : string contendo o nome verdadeiro de cada arquivo individual. Lista das SNPs que queremos filtrar. \u00b6 Foram escolhidos algumas SNPs com valor preditivo para cor dos olhos segundo artigos cient\u00edficos da \u00e1rea. snps_eye_color = [ 'rs12913832' , 'rs1800407' , 'rs12896399' , 'rs16891982' , 'rs1393350' , 'rs12203592' , 'rs1129038' , 'rs116363232' , 'rs1289399' ] Ap\u00f3s a execu\u00e7\u00e3o de um fun\u00e7\u00e3o que: Passa por cada nome de arquivo, Carrega os dados individuais em um dataframe usando a biblioteca snps . Salva o valor de cada snp em um dicion\u00e1rio ou salva como \"missing\" caso n\u00e3o exista a SNP desejada. Foi criado um dataframe contendo o valor das SNPs para cada um dos usu\u00e1rios presentes no Dataset2 . Dataset3 \u00b6 user_id : n\u00famero identifica\u00e7\u00e3o do usu\u00e1rio. rs12913832 : ['GG', 'AG', 'AA', 'missing'] e assim por diante. Considera\u00e7\u00f5es \u00b6 A partir do conjunto de dados produzidos, podem ser analisadas correla\u00e7\u00f5es entre as SNPs e o fen\u00f3tipo desejado. Tamb\u00e9m pode ser feita a modelagem preditiva do fen\u00f3tipo, sob a \u00f3tica do aprendizado de m\u00e1quina. Os detalhes s\u00f3rdidos dessa extra\u00e7\u00e3o de dados podem ser verificados no Github .","title":"01 - Aquisi\u00e7\u00e3o dos Dados"},{"location":"eye_color_pt1/#introducao","text":"E se a partir de uma amostra de DNA achado na cena de um crime os investigadores pudessem descobrir quais as caracter\u00edsticas f\u00edsicas do dono do DNA? Na verdade isto \u00e9 poss\u00edvel, o processo de prever fen\u00f3tipo a partir de informa\u00e7\u00f5es gen\u00e9ticas \u00e9 chamado de DNA Phenotyping ou Forensic DNA Phenotyping . A predi\u00e7\u00e3o de caracter\u00edsticas externamente vis\u00edveis baseada no DNA pode ajudar a pol\u00edcia a: Estreitar os caminhos de uma investiga\u00e7\u00e3o. Desvendar um crime mais r\u00e1pido, aumentando a produtividade. Diminuir os poss\u00edveis danos de um processo criminal contra uma pessoa inocente. Exemplo: A forma mais comum \u00e9: a partir da coleta de DNA, identificar algumas muta\u00e7\u00f5es chamadas SNPs. Cada SNP tem um C\u00f3digo identificador e est\u00e1 associada a um GENE. A SNP se manifesta no alelo em n\u00e3o presente: 0, Heterozigoto: 1 ou Homozigoto: 2. Com material gen\u00e9tico em m\u00e3os \u00e9 poss\u00edvel buscar por muta\u00e7\u00f5es dos genes chamadas SNPs ( Single-Nucleotide Polymorphisms ), algumas destas muta\u00e7\u00f5es podem estar associadas a Fen\u00f3tipos , como cor dos olhos, cor da pele, cor do cabelo e etc.","title":"Introdu\u00e7\u00e3o"},{"location":"eye_color_pt1/#construindo-um-dataset","text":"Para auxiliar nesta tarefa de predizer fen\u00f3tipos baseado no material gen\u00e9tico, podem ser aplicados modelos de Aprendizado de M\u00e1quina. Para isso, s\u00e3o necess\u00e1rios... DADOS!!! E \u00e9 sobre a coleta e tratamento destes dados que se trata este trabalho. Com o advento das leis de prote\u00e7\u00f5es de dados, dados gen\u00e9ticos a n\u00edvel individual dificilmente podem ser encontrados na internet hoje em dia, bancos de dados gen\u00e9ticos tradicionais e publica\u00e7\u00f5es cient\u00edficas que disponibilizavam os dados n\u00e3o permitem mais o acesso. Uma forma de trabalhar com dados abertos e estudar rela\u00e7\u00f5es entre dados gen\u00e9ticos e fen\u00f3tipos \u00e9 a plataforma openSNP , que permite que clientes de empresas que fazem testes gen\u00e9ticos publiquem seus resultados e compartilhem ainda seus fen\u00f3tipos. Usando esta plataforma, foi poss\u00edvel baixar um grande arquivo que inclui dados gen\u00e9ticos de 6.322 usu\u00e1rios acompanhados da autodeclara\u00e7\u00e3o de seus fen\u00f3tipos. O arquivo baixado: Na plataforma, est\u00e3o cadastrados 673 fen\u00f3tipos que o usu\u00e1rio pode preencher. Dentre os arquivos disponibilizados, existe um arquivo auxiliar contendo os dados para os fen\u00f3tipos respondidos por cada usu\u00e1rio.","title":"Construindo um dataset"},{"location":"eye_color_pt1/#trabalhando-com-o-arquivo-auxiliar-de-fenotipos","text":"Dos 6.326 usu\u00e1rios que fizeram uploads dos gen\u00e9ticos individuais, 1.678 deles preencheram o campo para cor dos olhos. Nesta etapa foi feita a leitura do arquivo contendo os fen\u00f3tipos. Filtragem dos usu\u00e1rios que declaram a cor do olho. Agrupamento das cores do olho em categorias: Azul, Verde, Cinza: Olhos predominantemente claros. Intermedi\u00e1rios: Castanho claro, mel, avel\u00e3 (hazel). Castanho. Grava\u00e7\u00e3o do conjunto de dados processado em um arquivo auxiliar. Nesta etapa sobraram apenas 1286 usu\u00e1rios, devido ao descarte de r\u00f3tulos n\u00e3o informativos e de dados duplicados. Dicion\u00e1rio usado para mapear os dados: color_map = { \"Brown\" : \"Brown\" , \"Blue\" : \"BGG\" , \"Hazel\" : \"Int\" , \"Blue-grey\" : \"BGG\" , \"Green\" : \"BGG\" , \"Dark brown\" : \"Brown\" , \"Blue-green\" : \"BGG\" , \"Hazel (brown/green)\" : \"Int\" , \"Hazel/light brown\" : \"Int\" , \"Gray-blue\" : \"BGG\" , \"Blue-grey; broken amber collarette\" : \"BGG\" , \"hazel\" : \"Int\" , \"Dark blue\" : \"BGG\" , \"Green-hazel\" : \"Int\" , \"Green-brown\" : \"Int\" , \"brown\" : \"Brown\" , \"Green-gray\" : \"BGG\" , \"Blue-green\" : \"BGG\" , \"blue-green\" : \"BGG\" , \"blue\" : \"BGG\" , \"Blue, grey, green, changing\" : \"BGG\" , \"Blue grey\" : \"BGG\" , \"Blue with yellow parts\" : \"BGG\" , \"Blue-grey with central heterochromia\" : \"BGG\" , \"Light-mixed green\" : \"BGG\" , \"blue\" : \"BGG\" , \"blue-grey\" : \"BGG\" , \"Blue-green; amber collarette, and gray-blue ringing \" : \"BGG\" , \"Blue with a yellow ring of flecks that make my eyes look green depending on the light or my mood\" : \"BGG\" , \"Brown/black\" : \"Brown\" , \"Hazel (light brown, dark green, dark blue)\" : \"Int\" , \"Blue-green-grey\" : \"BGG\" , \"Green\" : \"BGG\" , \"Brown-amber\" : \"Int\" , \"blue, grey, green, changing\" : \"BGG\" , \"Amber\" : \"Int\" , \"Amber - (yellow/ocre brown)\" : \"Int\" , \"Hazel/Light Brown\" : \"Int\" , \"Amber - (yellow/ocre brown)\" : \"Int\" }","title":"Trabalhando com o arquivo auxiliar de Fen\u00f3tipos"},{"location":"eye_color_pt1/#leitura-dos-snps-dos-arquivos-individuais","text":"Nesta etapa ser\u00e1 constru\u00eddo um conjunto de dados contendo os snps que queremos analisar e o id do usu\u00e1rio para cada usu\u00e1rio. Mapeamento dataset1 ['genotype_filename'] para o nome real do arquivo. Cria\u00e7\u00e3o de um conjunto de dados auxiliar utilizando a biblioteca glob . Utiliza\u00e7\u00e3o da biblioteca snps para parsear os dados gen\u00e9ticos de cada indiv\u00edduo em um objeto pandas dataframe. Filtragem do dataframe contendo dados individuais para criar um dataframe individual apenas dos dados de interesse. Jun\u00e7\u00e3o dos dados individuais em um dataframe com todos os dados.","title":"Leitura dos SNPs dos arquivos individuais."},{"location":"eye_color_pt1/#consideracoes","text":"A partir do conjunto de dados produzidos, podem ser analisadas correla\u00e7\u00f5es entre as SNPs e o fen\u00f3tipo desejado. Tamb\u00e9m pode ser feita a modelagem preditiva do fen\u00f3tipo, sob a \u00f3tica do aprendizado de m\u00e1quina. Os detalhes s\u00f3rdidos dessa extra\u00e7\u00e3o de dados podem ser verificados no Github .","title":"Considera\u00e7\u00f5es"},{"location":"eye_color_pt2/","text":"Parte 2: Prepara\u00e7\u00e3o e An\u00e1lise dos dados \u00b6 Prepara\u00e7\u00e3o dos Dados \u00b6 Carregando os arquivos: phenotypes = pd . read_csv ( 'datasets/eye_color_df_snp.csv' ) snps = pd . read_csv ( 'datasets/users_snps.csv' ) Relembrando como s\u00e3o os dados: Dataset com fen\u00f3tipos: Tamanho: 1286 Dataset com snps: Tamanho: 1264 Juntando os dados: df = pd . merge ( left = snps , right = phenotypes , how = 'left' , on = 'user_id' ) display ( df . head ( 2 )) Resultado: Tamanho: 1264 Conjunto com todas as snps carregadas: snp_list = [ 'rs12913832' , 'rs1800407' , 'rs12896399' , 'rs16891982' , 'rs1393350' , 'rs12203592' , 'rs1129038' , 'rs116363232' , 'rs1289399' ] Tratamento dos atributos \u00b6 Cada atributos de snp deve conter apenas 4 classes diferentes: \"RR\": Dois alelos com o valor de refer\u00eancia. \"RM\": Um alelo com o valor de refer\u00eancia e outro com o valor da muta\u00e7\u00e3o. \"MM\": Dois alelos com o valor de muta\u00e7\u00e3o, e \"missing\": valor que n\u00e3o foi obtido no processo de aquisi\u00e7\u00e3o. Ap\u00f3s contar os valores de cada coluna foi constatada a necessidade das seguintes interven\u00e7\u00f5es: Descartar entradas que tiveram fora dos padr\u00e3o. (Exemplo: BB quando os alelos tem valor A ou G.) Transformar RM em MR visto que estes t\u00eam o mesmo valor. An\u00e1lise individual das colunas: \u00b6 Primeira Coluna Snp analisada: rs12913832 GG 566 AG 381 AA 167 missing 148 BB 1 Entradas fora do padr\u00e3o: BB Removendo entradas fora do padr\u00e3o... Tamanho df final: 1263 Segunda Coluna Snp analisada: rs1800407 CC 1044 CT 113 missing 59 TC 37 TT 8 GG 1 Entradas fora do padr\u00e3o: GG Entradas iguais: ['CT', 'TC'] Removendo entradas fora do padr\u00e3o... Substituindo TC por CT... Tamanho df final: 1262 Terceira Coluna Snp analisada: rs12896399 GT 432 GG 344 missing 230 TT 197 TG 57 AA 1 Entradas fora do padr\u00e3o: AA Entradas iguais: ['GT', 'TG'] Removendo entradas fora do padr\u00e3o... Substituindo TG por GT... Tamanho df final: 1261 Quarta Coluna Snp analisada: rs16891982 GG 757 missing 323 CG 124 CC 44 Entradas fora do padr\u00e3o: Entradas iguais: ['CG', 'GC'] Removendo entradas fora do padr\u00e3o... Substituindo GC por CG... Tamanho df final: 1261 Quinta Coluna Snp analisada: rs1393350 GG 634 AG 401 missing 147 AA 73 GA 5 Name: rs1393350, dtype: int64 Entradas fora do padr\u00e3o: Entradas iguais: ['AG', 'GA'] Removendo entradas fora do padr\u00e3o... Substituindo GA por AG... Tamanho df final: 1261 Sexta Coluna Snp analisada: rs12203592 CC 794 CT 221 missing 148 TC 59 TT 38 Entradas fora do padr\u00e3o: Entradas iguais: ['CT', 'TC'] Removendo entradas fora do padr\u00e3o... Substituindo TC por CT... Tamanho df final: 1261 S\u00e9tima Coluna Snp analisada: rs1129038 TT 595 CT 298 CC 183 TC 105 missing 78 Entradas fora do padr\u00e3o: Entradas iguais: ['CT', 'TC'] Removendo entradas fora do padr\u00e3o... Substituindo TC por CT... Tamanho df final: 1261 Oitava Coluna Snp analisada: rs116363232 missing 1090 CC 167 CT 3 Entradas fora do padr\u00e3o: Entradas iguais: [' ', ' '] Removendo entradas fora do padr\u00e3o... Substituindo por ... Tamanho df final: 1261 Nona Coluna Snp analisada: rs1289399 CC 460 missing 429 CT 3 Entradas fora do padr\u00e3o: Entradas iguais: [' ', ' '] Removendo entradas fora do padr\u00e3o... Substituindo por ... Tamanho df final: 1261 Tratamento de valores nulos \u00b6 Algumas entradas ainda t\u00eam valores nulos que n\u00e3o foram detectados no processo de aquisi\u00e7\u00e3o dos dados, vamos trocar por \"missing\". df . isna () . sum () rs12913832 1 rs1800407 1 rs12896399 1 rs16891982 4 rs1393350 1 rs12203592 1 rs1129038 369 rs116363232 1 rs1289399 369 user_id 0 genotype_filename 0 Eye color 0 color_cat 0 df = df . fillna ( \"missing\" ) An\u00e1lise dos Dados \u00b6 An\u00e1lise de propor\u00e7\u00e3o de valores faltantes em nossos atributos: C\u00f3digo para Cria\u00e7\u00e3o da Figura c = pg . Bar ( print_values = True , print_values_position = 'top' , x_label_rotation = 20 ) c . title = 'Dados Faltantes (em %)' c . x_labels = snp_list c . add ( 'Missing' , [ round (( df [ col ] == 'missing' ) . sum () / len ( df ), 2 ) for col in snp_list ]) c . add ( 'Not Missing' , [ round (( 1 - ( df [ col ] == 'missing' ) . sum () / len ( df )), 2 ) for col in snp_list ]) c . value_formatter = lambda x : f \" { 100 * x } %\" c . render_to_file ( 'missing.svg' ) pgr ( c , \"missing\" ) Remo\u00e7\u00e3o de atributos pouco \u00fateis: Devido \u00e0 grande propor\u00e7\u00e3o de valores faltantes, as 3 \u00faltimas snps n\u00e3o ser\u00e3o muito \u00fateis para predi\u00e7\u00e3o e ser\u00e3o removidas. df = df . drop ( columns = snp_list [ - 3 :]) Para entender melhor quais valores s\u00e3o muta\u00e7\u00f5es e quais s\u00e3o refer\u00eancia segue tabela descritiva das snps. SNP GENE Muta\u00e7\u00e3o rs12913832 HERC2 Refer\u00eancia: AA, Presen\u00e7a 1: GA/AG, Presen\u00e7a 2: GG rs1800407 OCA2 Refer\u00eancia: CC, Presen\u00e7a 1: CT/TC, Presen\u00e7a 2: TT rs12896399 LOC105370627 Refer\u00eancia: GG, Presen\u00e7a 1: GT/TG, Presen\u00e7a 2: TT rs16891982 SLC45A2 Refer\u00eancia: CC, Presen\u00e7a 1: GC/CG, Presen\u00e7a 2: GG rs1393350 TYR Refer\u00eancia: GG, Presen\u00e7a 1: GA/AG, Presen\u00e7a 2: AA rs12203592 IRF4 Refer\u00eancia: CC, Presen\u00e7a 1: CT/TA, Presen\u00e7a 2: CC Distribui\u00e7\u00e3o da Vari\u00e1vel Alvo: color_cat \u00b6 C\u00f3digo para Cria\u00e7\u00e3o da Figura labels = list ( df [ 'color_cat' ] . value_counts () . index ) values = list ( round ( ( df [ 'color_cat' ] . value_counts ()) / len ( df ), 4 ) ) c = pg . Bar ( print_values = True , print_values_position = 'top' , x_label_rotation = 20 ) c . title = 'Categoria de Cor dos Olhos' for i in range ( len ( labels )): c . add ( labels [ i ], values [ i ]) c . value_formatter = lambda x : f \" { 100 * x } %\" pgr ( c , \"color_count\" ) Distribui\u00e7\u00e3o das Features (snps): \u00b6 Contagem Total e Contagem segmentada por categoria alvo \u00b6 def plot_contagem ( col ): fig , ax = plt . subplots ( nrows = 1 , ncols = 2 , figsize = ( 20 , 9 )) fig . suptitle ( f \"An\u00e1lise da SNP { col } .\" ) sns . countplot ( ax = ax [ 0 ], x = col , data = df , palette = \"Blues_r\" ) ax [ 0 ] . set_title ( f \"Contagem total\" ) ax [ 0 ] . set_xlabel ( \" \" ) sns . countplot ( ax = ax [ 1 ], x = col , hue = \"color_cat\" , data = df , palette = \"Blues_r\" , hue_order = [ \"BGG\" , \"Int\" , \"Brown\" ]) ax [ 1 ] . set_title ( f \"Contagem Segmentada\" ) plt . show () for i in df . columns [: - 1 ]: display ( plot_contagem ( i )) Propor\u00e7\u00e3o da vari\u00e1vel alvo por classe de cada atributo \u00b6 for snp in snp_list [: - 3 ]: df_grouped = df . groupby ( \"color_cat\" )[ snp ] . value_counts () . unstack () df_grouped = df_grouped . apply ( lambda x : round ( x / x . sum (), 2 ) * 100 ) df_grouped fig , ax = plt . subplots ( nrows = 1 , ncols = 4 , figsize = ( 20 , 8 )) fig . suptitle ( f \"Propor\u00e7\u00f5es para SNP { snp } em %.\" ) #fig.axes.get_yaxis().set_visible(False) for i in range ( len ( df_grouped . columns )): y = df_grouped . columns [ i ] sns . barplot ( ax = ax [ i ], x = df_grouped . index , y = y , data = df_grouped , palette = \"Blues_r\" ) ax [ i ] . set_xlabel ( df_grouped . columns [ i ]) ax [ i ] . set_ylabel ( \" \" ) ax [ i ] . get_yaxis () . set_visible ( False ) for j in ax [ i ] . containers : ax [ i ] . bar_label ( j ,) Correla\u00e7\u00f5es entre as Vari\u00e1veis \u00b6 Foi utilizado One Hot Encoding pra transformar em as vari\u00e1veis categ\u00f3ricas em num\u00e9ricas e ent\u00e3o explorar a correla\u00e7\u00e3o linear entre as vari\u00e1veis com um Mapa de Calor das correla\u00e7\u00f5es de Pearson entre as vari\u00e1veis. df_num = pd . get_dummies ( df ) fig , ax = plt . subplots ( figsize = ( 20 , 13 )) ax = sns . heatmap ( df_num . corr (), cmap = \"Blues\" , annot = True ) ax . set_title ( \"Heat Map das correla\u00e7\u00f5es de Pearson entre as vari\u00e1veis\" ) plt . show () Baseline \u00b6 Usando um simples classificador multiclasse do xgboost sem mexer no hiperpar\u00e2metros foram obtidos os seguintes resultados: Acur\u00e1cia de treino: 80,57% Acur\u00e1cia de teste: 72,42% Classification Report (Teste), precision recall f1-score support 0 0.84 0.82 0.83 211 1 0.81 0.67 0.74 169 2 0.21 0.41 0.28 37 accuracy 0.72 417 macro avg 0.62 0.63 0.62 417 weighted avg 0.77 0.72 0.74 417 Onde 0 = \"BGG\", 1 = \"Brown\" e 2 = \"Int\". Mesmo sem um grande esfor\u00e7o de modelagem, foi poss\u00edvel encontrar resultados parecidos com o que se acha na literatura, inclusive com a mesma dificuldade: classificar cores intermedi\u00e1rias. Os c\u00f3digos para esse projeto podem ser encontrados no Github","title":"02 - Prepara\u00e7\u00e3o e An\u00e1lise"},{"location":"eye_color_pt2/#parte-2-preparacao-e-analise-dos-dados","text":"","title":"Parte 2: Prepara\u00e7\u00e3o e An\u00e1lise dos dados"},{"location":"eye_color_pt2/#preparacao-dos-dados","text":"Carregando os arquivos: phenotypes = pd . read_csv ( 'datasets/eye_color_df_snp.csv' ) snps = pd . read_csv ( 'datasets/users_snps.csv' ) Relembrando como s\u00e3o os dados: Dataset com fen\u00f3tipos: Tamanho: 1286 Dataset com snps: Tamanho: 1264 Juntando os dados: df = pd . merge ( left = snps , right = phenotypes , how = 'left' , on = 'user_id' ) display ( df . head ( 2 )) Resultado: Tamanho: 1264 Conjunto com todas as snps carregadas: snp_list = [ 'rs12913832' , 'rs1800407' , 'rs12896399' , 'rs16891982' , 'rs1393350' , 'rs12203592' , 'rs1129038' , 'rs116363232' , 'rs1289399' ]","title":"Prepara\u00e7\u00e3o dos Dados"},{"location":"eye_color_pt2/#tratamento-dos-atributos","text":"Cada atributos de snp deve conter apenas 4 classes diferentes: \"RR\": Dois alelos com o valor de refer\u00eancia. \"RM\": Um alelo com o valor de refer\u00eancia e outro com o valor da muta\u00e7\u00e3o. \"MM\": Dois alelos com o valor de muta\u00e7\u00e3o, e \"missing\": valor que n\u00e3o foi obtido no processo de aquisi\u00e7\u00e3o. Ap\u00f3s contar os valores de cada coluna foi constatada a necessidade das seguintes interven\u00e7\u00f5es: Descartar entradas que tiveram fora dos padr\u00e3o. (Exemplo: BB quando os alelos tem valor A ou G.) Transformar RM em MR visto que estes t\u00eam o mesmo valor.","title":"Tratamento dos atributos"},{"location":"eye_color_pt2/#analise-dos-dados","text":"An\u00e1lise de propor\u00e7\u00e3o de valores faltantes em nossos atributos: C\u00f3digo para Cria\u00e7\u00e3o da Figura c = pg . Bar ( print_values = True , print_values_position = 'top' , x_label_rotation = 20 ) c . title = 'Dados Faltantes (em %)' c . x_labels = snp_list c . add ( 'Missing' , [ round (( df [ col ] == 'missing' ) . sum () / len ( df ), 2 ) for col in snp_list ]) c . add ( 'Not Missing' , [ round (( 1 - ( df [ col ] == 'missing' ) . sum () / len ( df )), 2 ) for col in snp_list ]) c . value_formatter = lambda x : f \" { 100 * x } %\" c . render_to_file ( 'missing.svg' ) pgr ( c , \"missing\" ) Remo\u00e7\u00e3o de atributos pouco \u00fateis: Devido \u00e0 grande propor\u00e7\u00e3o de valores faltantes, as 3 \u00faltimas snps n\u00e3o ser\u00e3o muito \u00fateis para predi\u00e7\u00e3o e ser\u00e3o removidas. df = df . drop ( columns = snp_list [ - 3 :]) Para entender melhor quais valores s\u00e3o muta\u00e7\u00f5es e quais s\u00e3o refer\u00eancia segue tabela descritiva das snps. SNP GENE Muta\u00e7\u00e3o rs12913832 HERC2 Refer\u00eancia: AA, Presen\u00e7a 1: GA/AG, Presen\u00e7a 2: GG rs1800407 OCA2 Refer\u00eancia: CC, Presen\u00e7a 1: CT/TC, Presen\u00e7a 2: TT rs12896399 LOC105370627 Refer\u00eancia: GG, Presen\u00e7a 1: GT/TG, Presen\u00e7a 2: TT rs16891982 SLC45A2 Refer\u00eancia: CC, Presen\u00e7a 1: GC/CG, Presen\u00e7a 2: GG rs1393350 TYR Refer\u00eancia: GG, Presen\u00e7a 1: GA/AG, Presen\u00e7a 2: AA rs12203592 IRF4 Refer\u00eancia: CC, Presen\u00e7a 1: CT/TA, Presen\u00e7a 2: CC","title":"An\u00e1lise dos Dados"},{"location":"eye_color_pt2/#distribuicao-da-variavel-alvo-color_cat","text":"C\u00f3digo para Cria\u00e7\u00e3o da Figura labels = list ( df [ 'color_cat' ] . value_counts () . index ) values = list ( round ( ( df [ 'color_cat' ] . value_counts ()) / len ( df ), 4 ) ) c = pg . Bar ( print_values = True , print_values_position = 'top' , x_label_rotation = 20 ) c . title = 'Categoria de Cor dos Olhos' for i in range ( len ( labels )): c . add ( labels [ i ], values [ i ]) c . value_formatter = lambda x : f \" { 100 * x } %\" pgr ( c , \"color_count\" )","title":"Distribui\u00e7\u00e3o da Vari\u00e1vel Alvo: color_cat"},{"location":"eye_color_pt2/#distribuicao-das-features-snps","text":"","title":"Distribui\u00e7\u00e3o das Features (snps):"},{"location":"eye_color_pt2/#correlacoes-entre-as-variaveis","text":"Foi utilizado One Hot Encoding pra transformar em as vari\u00e1veis categ\u00f3ricas em num\u00e9ricas e ent\u00e3o explorar a correla\u00e7\u00e3o linear entre as vari\u00e1veis com um Mapa de Calor das correla\u00e7\u00f5es de Pearson entre as vari\u00e1veis. df_num = pd . get_dummies ( df ) fig , ax = plt . subplots ( figsize = ( 20 , 13 )) ax = sns . heatmap ( df_num . corr (), cmap = \"Blues\" , annot = True ) ax . set_title ( \"Heat Map das correla\u00e7\u00f5es de Pearson entre as vari\u00e1veis\" ) plt . show ()","title":"Correla\u00e7\u00f5es entre as Vari\u00e1veis"},{"location":"eye_color_pt2/#baseline","text":"Usando um simples classificador multiclasse do xgboost sem mexer no hiperpar\u00e2metros foram obtidos os seguintes resultados: Acur\u00e1cia de treino: 80,57% Acur\u00e1cia de teste: 72,42% Classification Report (Teste), precision recall f1-score support 0 0.84 0.82 0.83 211 1 0.81 0.67 0.74 169 2 0.21 0.41 0.28 37 accuracy 0.72 417 macro avg 0.62 0.63 0.62 417 weighted avg 0.77 0.72 0.74 417 Onde 0 = \"BGG\", 1 = \"Brown\" e 2 = \"Int\". Mesmo sem um grande esfor\u00e7o de modelagem, foi poss\u00edvel encontrar resultados parecidos com o que se acha na literatura, inclusive com a mesma dificuldade: classificar cores intermedi\u00e1rias. Os c\u00f3digos para esse projeto podem ser encontrados no Github","title":"Baseline"},{"location":"fundamentos_web/","text":"Aplica\u00e7\u00f5es Web e Arquitetura de Software \u00b6 Diferentes Camadas na Arquitetura de Software \u00b6 Uma camada \u00e9 como uma separa\u00e7\u00e3o l\u00f3gica e f\u00edsica dos componentes em uma aplica\u00e7\u00e3o ou servi\u00e7o. Esta separa\u00e7\u00e3o \u00e9 feita em n\u00edvel de componentes, n\u00e3o em n\u00edvel de c\u00f3digo. Aplica\u00e7\u00f5es em camada \u00fanica \u00b6 Em aplica\u00e7\u00f5es de camada \u00fanica a interface do usu\u00e1rio, o backend da l\u00f3gica do neg\u00f3cio e o banco de dados est\u00e3o na mesma m\u00e1quina. flowchart BT A[(Database)] <--> B[Server] <--> C[User Interface] Aplica\u00e7\u00f5es Desktop s\u00e3o exemplos de aplica\u00e7\u00f5es camada \u00fanica. Vantagens de Aplica\u00e7\u00f5es Camada \u00danica \u00b6 N\u00e3o h\u00e1 lat\u00eancia de conex\u00e3o, pois cada componente est\u00e1 na mesma m\u00e1quina. Aplica\u00e7\u00f5es multicamada mandam requisi\u00e7\u00f5es frequentes ao servidor, o que adiciona lat\u00eancia e reduz a velocidade no sistema, piorando a experi\u00eancia do usu\u00e1rio. Privacidade e seguran\u00e7a: Os dados do usu\u00e1rio permanecem sempre na mesma m\u00e1quina e n\u00e3o precisam ser transmitidos por rede. Desvantagens Aplica\u00e7\u00f5es Camada \u00danica \u00b6 O publicador da aplica\u00e7\u00e3o n\u00e3o tem controle sobre a aplica\u00e7\u00e3o, uma vez que o software \u00e9 entregue, n\u00e3o podem ser realizadas atualiza\u00e7\u00f5es ou manuten\u00e7\u00e3o, a menos que o cliente manualmente baixe um patch de instala\u00e7\u00e3o. O c\u00f3digo \u00e9 vulner\u00e1vel para ser mexido ou alvo de engenharia reversa, pode ser modificado ou copiado por algu\u00e9m mal intencionado. A performance da aplica\u00e7\u00e3o depende da m\u00e1quina de quem executa. Aplica\u00e7\u00f5es Camada Dupla \u00b6 Uma aplica\u00e7\u00e3o camada dupla envolve um cliente e um servidor. O cliente cont\u00e9m a interface do usu\u00e1rio com a l\u00f3gica do neg\u00f3cio em uma m\u00e1quina. Enquanto o servidor backend inclui um banco de dados rodando em uma m\u00e1quina diferente. O banco de dados \u00e9 hospedado pelo neg\u00f3cio e t\u00eam o controle sobre ele. flowchart LR A[Cliente]--\"Requisi\u00e7\u00e3o\"-----> B[Servidor Backend] B[Servidor Backend]--\"Resposta\"-----> A Exemplos de utilidade: Aplicativos de produtividade, jogos no browser. Os dados pesados s\u00e3o baixados uma vez e o servidor \u00e9 requisitado apenas para salvar o estado. Aplica\u00e7\u00f5es Tr\u00eas Camadas \u00b6 Esse tipo de aplica\u00e7\u00e3o \u00e9 bastante popular e amplamente utilizado na internet. Quase todo website simples como blogs e jornais fazem parte dessa categoria. Em aplica\u00e7\u00f5es Tr\u00eas Camada, a interface do usu\u00e1rio, a l\u00f3gica do neg\u00f3cio e o banco de dados, todos est\u00e3o em m\u00e1quinas diferentes, est\u00e3o separadas fisicamente. flowchart LR subgraph Cliente direction LR a1[cliente 1] a2[cliente 2] a5[cliente 3] end cliente <--> a3 a3[Servidor] <--> a4[(Banco de Dados)] Aplica\u00e7\u00f5es N-Camadas \u00b6 Uma aplica\u00e7\u00e3o que tem mais de 3 componentes envolvidos na arquitetura. Componentes podem ser: Cach\u00ea. Mensageria. Load Balancers. Servidores de busca. Componentes para processamento de grandes quantidades de dados. Componentes rodando servi\u00e7os web, micro servi\u00e7os. Popularmente conhecidos como Sistemas distribu\u00eddos . Dois princ\u00edpios do desenvolvimento de software s\u00e3o as chaves para justificar esta arquitetura: Responsabilidade \u00fanica e Separa\u00e7\u00e3o de Conceitos . Diferen\u00e7a entre Layers e Tiers: Layers s\u00e3o em n\u00edve lde c\u00f3digo (conceitual/l\u00f3gico), enquanto tier est\u00e1 relacionado \u00e0 separa\u00e7\u00e3o f\u00edsica dos componentes. Arquitetura Web \u00b6 Arquitetura Cliente-Servidor \u00b6 Essa arquitetura \u00e9 pe\u00e7a fundamental da internet. Funciona no modelo requisi\u00e7\u00e3o-resposta. O cliente manda a requisi\u00e7\u00e3o da informa\u00e7\u00e3o para o servidor e o servidor responde com a informa\u00e7\u00e3o. Cliente \u00b6 O cliente det\u00e9m a interface do usu\u00e1rio. A interface do usu\u00e1rio \u00e9 a parte da aplica\u00e7\u00e3o da apresenta\u00e7\u00e3o. \u00c9 escrita em HTML, JavaScript, CSS. Cliente Magro \u00b6 O cliente det\u00e9m apenas a interface do usu\u00e1rio da aplica\u00e7\u00e3o. N\u00e3o cont\u00e9m nenhum tipo de l\u00f3gica. Para toda a\u00e7\u00e3o o cliente manda um requisi\u00e7\u00e3o para o servidor de backend, como em uma aplica\u00e7\u00e3o de 3 camadas. Cliente Gordo \u00b6 Det\u00e9m toda ou alguma parte da l\u00f3gica do neg\u00f3cio. Estas, s\u00e3o Aplica\u00e7\u00f5es Duas Camadas. Servidor \u00b6 A tarefa prim\u00e1ria de um servidor \u00e9 receber requisi\u00e7\u00f5es do cliente e fornecer a resposta depois de executar a l\u00f3gica do neg\u00f3cio baseado nos par\u00e2metros da requisi\u00e7\u00e3o recebidos pelo cliente. Todo servi\u00e7o online precisa de um servidor para funcionar, servidores rodando aplica\u00e7\u00f5es web s\u00e3o conhecidos como servidores de aplica\u00e7\u00e3o. Renderiza\u00e7\u00e3o do lado do servidor \u00b6 Os desenvolvedores usam um servidor para renderizar a interface do usu\u00e1rio no backend e ent\u00e3o mandam os dados gerados para o cliente. Comunica\u00e7\u00e3o entre Cliente e Servidor \u00b6 Protocolo HTTP \u00b6 Toda a comunica\u00e7\u00e3o da web acontece atrav\u00e9s do protocolo HTTP. HTTP \u00e9 um protocolo requisi\u00e7\u00e3o-resposta que define como a informa\u00e7\u00e3o \u00e9 transmitida pela internet. \u00c9 um protocolo sem estado, e todo processo sobre HTTP \u00e9 executado independentemente e n\u00e3o tem conhecimento dos processos anteriores. REST API e Extremidades API \u00b6 No contexto de aplica\u00e7\u00f5es modernas multicamadas , todo cliente tem que atingir uma extremidade REST para buscar os dados no backend. O c\u00f3digo da aplica\u00e7\u00e3o no backend tem uma API REST implementada. Isso age como interface para as requisi\u00e7\u00f5es do mundo externo. Toda requisi\u00e7\u00e3o, seja ela do cliente, escrita pelo neg\u00f3cio ou por desenvolvedores terceiros, os que consomem a API precisam atingir as extremidades REST para buscar os dados. flowchart RL subgraph Cliente direction LR a1[cliente 1] a2[cliente 2] a5[cliente 3] end subgraph Servidor direction BT b1[REST API] b2[Servidor] end Servidor --\"Resposta\"--> Cliente Cliente --\"Requisi\u00e7\u00e3o HTTP: \\n GET \\n POST \\n PUT \\n DELETE\"--> Servidor API REST \u00b6 REST significa Representational State Transfer. \u00c9 um estilo de arquitetura de software para implementar web servi\u00e7os. Servi\u00e7os implementados utilizando o estilo REST s\u00e3o conhecidos como web servi\u00e7os RESTful . Uma API REST \u00e9 uma implementa\u00e7\u00e3o de API que adere \u00e0s restri\u00e7\u00f5es do estilo REST, ela age como uma interface. A comunica\u00e7\u00e3o entre cliente e servidor acontece atrav\u00e9s de HTTP, a API REST tira vantagem das metodologias HTTP disso para estabelecer comunica\u00e7\u00e3o entre o cliente e o servidor. REST tamb\u00e9m habilita servidores para cachear a resposta que melhora a performance da aplica\u00e7\u00e3o. A comunica\u00e7\u00e3o entre cliente e servidor \u00e9 livre de estado, ou seja, toda comunica\u00e7\u00e3o entre cliente e servidor \u00e9 como uma nova comunica\u00e7\u00e3o. REST endpoint \u00b6 Um endpoint API/REST/Backend significa uma URL do servi\u00e7o que o cliente pode alcan\u00e7ar. API Gateway \u00b6 A API REST age como um gateway ou um \u00fanico ponto de entrada no sistema. Ela encapsula a l\u00f3gica do neg\u00f3cio e lida com todas as requisi\u00e7\u00f5es dos cliente, tomando de conta das tarefas de autoriza\u00e7\u00e3o , autentica\u00e7\u00e3o , sanitiza\u00e7\u00e3o dos dados de entrada , antes de prover acesso para os recursos da aplica\u00e7\u00e3o. HTTP Push e Pull \u00b6 HTTP Pull - Polling With AJAX \u00b6 Existem duas formas de buscar os dados do servidor. A primeira \u00e9 mandar uma requisi\u00e7\u00e3o HTTP GET para o servidor manualmente, ativando um evento na interface do usu\u00e1rio ao clicar em um bot\u00e3o ou interagindo com outro elemento da p\u00e1gina. A outra \u00e9 buscar dinamicamente em intervalos regulares usando AJAX sem qualquer interven\u00e7\u00e3o humana. AJAX significa Asynchronous JavaScript e XML . Ajax \u00e9 usado para adicionar comportamento ass\u00edncrono \u00e0 p\u00e1gina web. AJAX usa um objeto XHTMLHttpRequest para mandar requisi\u00e7\u00f5es ao servidor. Este objeto vem com o browser e usa JavaScript para atualizar o HTML DOM. AJAX \u00e9 comumente usado com o framework jQuery para implementar o comportamento ass\u00edncrono na UI. Essa t\u00e9cnica din\u00e2mica de requisitar informa\u00e7\u00e3o do servidor em intervalos regulares \u00e9 conhecida como polling. HTTP PUSH \u00b6 Time to Live (TTL) \u00b6 Na comunica\u00e7\u00e3o regular entre cliente e servidor, que \u00e9 o HTTP PULL, existe um TTL para cada requisi\u00e7\u00e3o, pode ser de 30 a 60 segundos, variando de acordo com o browser. Se o cliente n\u00e3o receber resposta dentro do TTL, o browser mata a conex\u00e3o e o cliente tem que reenviar a requisi\u00e7\u00e3o. Conex\u00f5es abertas consomem recursos e existe um n\u00famero de conex\u00f5es abertas que um servidor pode lidar, se as conex\u00f5es n\u00e3o fecham e novas s\u00e3o introduzidas o servidor ficar\u00e1 sem mem\u00f3ria. Conex\u00e3o Persistente \u00b6 Se certa resposta leva mais tempo do que o TTL do browser, precisamos de uma conex\u00e3o persistente entre o cliente e o servidor. Uma conex\u00e3o persistente \u00e9 uma conex\u00e3o de rede entre o cliente e o servidor que permanece aberta para requisi\u00e7\u00f5es e respostas futuras, ao inv\u00e9s de serem fechadas ap\u00f3s uma \u00fanica comunica\u00e7\u00e3o. Heartbeat interceptors : Requisi\u00e7\u00f5es em branco entre o cliente e o servidor para prevenir que o browser mate a conex\u00e3o. Uso intensivo de recursos para manter a conex\u00e3o aberta, deve ser usado quando for vital para o funcionamento da aplica\u00e7\u00e3o. Implementa\u00e7\u00e3o : AJAX Long Polling, Web Sockets, Server-Sent Events, etc. Tecnologias HTTP baseadas em PUSH \u00b6 Web Sockets \u00b6 Uma conex\u00e3o web socket \u00e9 prefer\u00edvel quando precisamos de um fluxo de dados bi-direcional de baixa lat\u00eancia do cliente para o servidor e voltando. Casos t\u00edpicos: aplica\u00e7\u00f5es de chat, streams sociais de tempo real, MMO browser e etc. Estes aplicativos t\u00eam um n\u00famero significante de leituras e escritas comparados a apps web normais. Com web sockets, podemos manter conex\u00e3o cliente servidor aberta o tempo que quisermos. Web sockets n\u00e3o funcionam com HTTP, eles funcionam com TCP. Ambos os servidores e clientes devem suportar web sockets para que funcione. AJAX - Long polling \u00b6 Long polling est\u00e1 em algum lugar entre AJAX e Web Sockets. Nesta t\u00e9cnica, ao inv\u00e9s de retornar uma resposta vazia automaticamente, o servidor mant\u00e9m a respostas at\u00e9 que encontre uma atualiza\u00e7\u00e3o para ser enviada ao cliente. A conex\u00e3o no long polling permanece a aberta um pouco mais de tempo comparado ao polling. Se a conex\u00e3o quebrar, o cliente deve reestabelecer a conex\u00e3o ao servidor. HTML5 Event-Source API e Server-Sent Events \u00b6 Ao inv\u00e9s do cliente buscar pelos dados, o servidor automaticamente empurra os dados para o cliente sempre que uma atualiza\u00e7\u00e3o esta dispon\u00edvel. As mensagens advindas do servidor s\u00e3o tratadas como eventos. Nessa abordagem, os servidores podem iniciar a transmiss\u00e3o dos dados para os clientes uma vez que o cliente estabelece a conex\u00e3o. Isso ajuda a eliminar um n\u00famero consider\u00e1vel de ciclos requisi\u00e7\u00e3o-respota em branco, cortando o consumo de banda. Para implementar server-sent events, a linguagem de backend deve suportar a tecnologia. Na interface do usu\u00e1rio, HTML5 Event-Source API \u00e9 usada para receber dados vindos do backend. Uma vez que o cliente estabelece a conex\u00e3o, o fluxo de dados \u00e9 unidirecional apenas, do servidor para o cliente. Streaming over HTTP \u00b6 Ideal para casos em que precisamos stremar muitos dados atrav\u00e9s de HTTP quebrando em pequenos peda\u00e7os. Iisso \u00e9 poss\u00edvel com HTML5 uma API JavaScript Stream. Renderiza\u00e7\u00e3o Cliente vs Servidor \u00b6 Quando o browser recebe uma p\u00e1gina de web de um servidor como resposta, ele tem que renderizar a resposta na janela na forma de uma p\u00e1gina HTML. Para fazer isso o browser tem v\u00e1rios componentes, tais como: Engine do browser Engine de renderiza\u00e7\u00e3o Interpretador JavaScript Backend de Rede e UI Armazenamento de dados e etc. A engine de renderiza\u00e7\u00e3o constr\u00f3i a \u00e1rvore DOM e renderiza a constru\u00e7\u00e3o. Renderiza\u00e7\u00e3o no Servidor \u00b6 Para cortar esse tempo de renderiza\u00e7\u00e3o, os desenvolvedores geralmente renderizam a UI no servidor, geram o HTML l\u00e1 e direcionam a p\u00e1gina HTML para a UI. N\u00e3o \u00e9 compat\u00edvel com AJAX, pois necessitaria reenviar completamente a p\u00e1gina atualizada para o cliente. Podemos utilizar uma abordagem h\u00edbrida, renderizando a parte est\u00e1tica no servidor e a parte din\u00e2mica no cliente. Escalabilidade \u00b6 Escalabilidade \u00e9 o potencial de uma aplica\u00e7\u00e3o de lidar com uma crescente carga de trabalho sem sacrificar a performance. Lat\u00eancia \u00b6 \u00c9 o tempo que o sistema leva para responder \u00e0 uma requisi\u00e7\u00e3o de um usu\u00e1rio. Sistemas almejam possuir lat\u00eancia m\u00ednima. A lat\u00eancia \u00e9 medida como a diferen\u00e7a de tempo em que o usu\u00e1rio toma uma a\u00e7\u00e3o e a resposta do sistema. A lat\u00eancia \u00e9 usualmente dividida em duas partes: A lat\u00eancia da conex\u00e3o e a lat\u00eancia da aplica\u00e7\u00e3o. Lat\u00eancia da Conex\u00e3o \u00b6 \u00c9 o tempo em que a rede leva para mandar um pacote de dados do ponto A para o ponto B. A rede deve ser eficiente o suficiente para lidar com o aumento do tr\u00e1fego. Para diminuir a lat\u00eancia, neg\u00f3cios usam uma CDN (Content Delivery Network) para implementar seus servidores ao redor do globo o mais pr\u00f3ximo poss\u00edvel do usu\u00e1rio final. Essas localiza\u00e7\u00f5es pr\u00f3ximas ao usu\u00e1rios s\u00e3o conhecidas como Edge Locations . Lat\u00eancia da aplica\u00e7\u00e3o \u00b6 \u00c9 o tempo que a aplica\u00e7\u00e3o levar para processar uma requisi\u00e7\u00e3o do usu\u00e1rio. Existem v\u00e1rias formas de diminuir a lat\u00eancia da aplica\u00e7\u00e3o. O primeiro passo \u00e9 executar testes de stress e de carga. na aplica\u00e7\u00e3o para detectar os gargalos que afetam o sistema. Tipos de escalabilidade \u00b6 Para escalar uma aplica\u00e7\u00e3o \u00e9 necess\u00e1rio um s\u00f3lido poder computacional. Os servidores devem ser potentes o suficiente para lidar com o aumento do tr\u00e1fego. Existem duas formas de escalar uma aplica\u00e7\u00e3o: Escalamento Horizontal e Vertical. Escalabilidade Vertical : Aumentar o poder computacional do servidor. A escala vertical possui limites \u00f3bvios. Escalabilidade Horizontal : Aumentar a quantidade de servidores. A escala horizontal permite escalamento din\u00e2mico em tempo real quando necess\u00e1rio. A mais importante raz\u00e3o porque computa\u00e7\u00e3o em nuvem t\u00eam se tornado mainstream na ind\u00fastria \u00e9 devido a habilidade da nuvem de escalar dinamicamente. O processo de adicionar e remover servidores, aumentando e voltando \u00e0 capacidade original \u00e9 chamado de Elasticidade da Nuvem . O c\u00f3digo necess\u00e1rio para rodar sistemas distribu\u00eddos deve ser livre de estado . N\u00e3o devem haver inst\u00e2ncias est\u00e1ticas no c\u00f3digo, inst\u00e2ncias est\u00e1ticas mant\u00e9m os dados da aplica\u00e7\u00e3o no servidor particular, quando o servidor cai, os dados/estado \u00e9 perdido. Uma boa pr\u00e1tica \u00e9 evitar o uso de inst\u00e2ncias est\u00e1ticas de uma classe. O estado \u00e9 tipicamente persistido em uma mem\u00f3ria distribu\u00edda, isso facilita que os componentes sejam livre de estado. \u00c9 por isso que programa\u00e7\u00e3o funcional se tornou popular para sistemas distribu\u00eddos, as fun\u00e7\u00f5es n\u00e3o ret\u00e9m nenhum estado. Poss\u00edveis Gargalos \u00b6 Banco de Dados Projeto da aplica\u00e7\u00e3o N\u00e3o uso de caching L\u00f3gica de neg\u00f3cio no banco de dados Uso do banco de dados errado C\u00f3digo ineficiente e mal escrito Alta Disponibilidade \u00b6 Alta disponibilidade \u00e9 o modelo atual na ind\u00fastria. \u00c9 a habilidade de um sistema de permanecer online apesar da ocorr\u00eancia de falhas no n\u00edvel da estrutura e tempo real. Um servi\u00e7o altamente dispon\u00edvel significa que o sistema estar\u00e1 online em 99.99999% do tempo. Ou seja, ter\u00e1 um n\u00edvel de servi\u00e7o de 99.99999%. O n\u00edvel de servi\u00e7o \u00e9 um fator cr\u00edtico para alguns servi\u00e7os , como sistemas de avia\u00e7\u00e3o, sistemas espaciais, m\u00e1quinas de minera\u00e7\u00e3o, servidores de hospitais, mercado de capitais. Para obter essa disponibilidade o sistema deve ser projetados para serem tolerante a faltas e seus componentes s\u00e3o constru\u00eddos de forma redundante. Raz\u00f5es para falhas de sistemas \u00b6 Crash de software Falhas de hardware Erros Humanos Desligamento programado Arquitetura Monol\u00edtica \u00b6 Uma aplica\u00e7\u00e3o tem um arquitetura monol\u00edtica se ela cont\u00e9m toda a aplica\u00e7\u00e3o em uma \u00fanica base de c\u00f3digo. Uma aplica\u00e7\u00e3o monol\u00edtica \u00e9 autocontida. Monolitos s\u00e3o mais simples de construir, testar e implementar em compara\u00e7\u00e3o \u00e0 arquitetura de micro-servi\u00e7os. Vantagens da Arquitetura Monol\u00edtica \u00b6 Simplicidade: s\u00e3o simples de desenvolver, testar, implementar, monitorar e gerenciar, visto que tudo est\u00e1 em apenas um reposit\u00f3rio. Contras da Arquitetura Monol\u00edtica \u00b6 Implementa\u00e7\u00e3o cont\u00ednua \u00e9 uma dor em monolitos, at\u00e9 mesmo uma pequena mudan\u00e7a de c\u00f3digo pode resultar na necessidade de uma reimplementa\u00e7\u00e3o completa. Necessidade de Testes regressivos , visto que uma mudan\u00e7a de c\u00f3digo pode impactar potencialmente a funcionalidade de outras features do app. Um \u00danico Ponto de Falha pode derrubar toda a aplica\u00e7\u00e3o. Manuten\u00e7\u00e3o e Escalabilidade s\u00e3o um desafio em monolitos. Dificuldade em usar tecnologias diferentes . Arquitetura Micro Servi\u00e7os \u00b6 Na arquitetura de Micro Servi\u00e7os, diferentes features de um servi\u00e7o extensivo s\u00e3o implementadas separadamente como servi\u00e7os menores vagamente atrelados chamados micro servi\u00e7os . Estes micro servi\u00e7os trabalham em conjun\u00e7\u00e3o para formar um grande servi\u00e7o distribu\u00eddo. Cada servi\u00e7o tem uma \u00fanica responsabilidade de executar uma feature espec\u00edfica e \u00e9 separado dos outros servi\u00e7os. Esta arquitetura facilita uma manuten\u00e7\u00e3o mais r\u00e1pida e limpa, o desenvolvimento de novas features, o teste e a implementa\u00e7\u00e3o de m\u00f3dulos individuais. Bancos de Dados \u00b6 Um banco de dados \u00e9 um componente na arquitetura de uma aplica\u00e7\u00e3o necess\u00e1rio para persistir os dados. Dados podem ser: Estruturados, N\u00e3o Estruturados, Semi-Estruturados e dados de estado do usu\u00e1rio. Bancos de Dados Relacionais \u00b6 Bancos de Dados Relacionais persistem dados contendo relacionamentos: one to one, one to many, many to many, many to one, etc. \u00c9 o tipo de banco de dados mais usado em desenvolvimento web. Bancos de Dados Relacionais possuem um modelo de dados relacional, dados s\u00e3o organizados em tabelas contendo linhas e colunas e SQL \u00e9 a linguagem de consulta prim\u00e1ria para interagir com dados relacionais. Consist\u00eancia dos dados \u00b6 Bancos relacionais, asseguram a grava\u00e7\u00e3o dos dados de forma normalizada. Uma entidade pode ocorrer apenas em um lugar/tabela. Isso ajuda a manter a consist\u00eancia nos dados, podemos atualizar os dados em apenas um lugar ao inv\u00e9s de atualizar o dado em m\u00faltiplas tabelas. Transa\u00e7\u00f5es ACID \u00b6 Bancos de Dados Relacionais asseguram transa\u00e7\u00f5es ACID. ACID significa atomicidade , consist\u00eancia , isolamento e durabilidade . Uma transa\u00e7\u00e3o ACID significa que se uma transa\u00e7\u00e3o ocorre, ela ser\u00e1 executada com perfei\u00e7\u00e3o sem afetar qualquer outro processo ou transa\u00e7\u00e3o. Depois que a transa\u00e7\u00e3o \u00e9 completada o sistema ter\u00e1 um novo estado que ser\u00e1 dur\u00e1vel e consistente. No caso de alguma coisa errada acontecer durante a transa\u00e7\u00e3o, como uma pequena falha no sistema, toda a opera\u00e7\u00e3o ser\u00e1 revertida. Um transa\u00e7\u00e3o ACID acontece com um estado inicial do sistema, estado A, e se completa com um estado final do sistema, estado B. Ambos estes estados s\u00e3o dur\u00e1veis e consistentes. Bancos de Dados NO SQL \u00b6 Constru\u00eddos para leituras e escritas de alta frequ\u00eancia. Escal\u00e1vel Roda em Clusteres Mais f\u00e1ceis de aprender e amig\u00e1veis ao desenvolvedor Sem SQL Inconsist\u00eancia Sem suporte para ACID Diferentes Tipos de Banco de Dados \u00b6 BD orientado a documentos Data store Chave-valor Wide-Column DB BD Relacional BD em Grafo BD s\u00e9rie temporal DB dedicado a aplicativos mobile... Caching \u00b6 Caching \u00e9 a chave para a performance de qualquer aplica\u00e7\u00e3o, assegura baixa lat\u00eancia e alta taxa de transfer\u00eancia. Uma aplica\u00e7\u00e3o com caching sempre far\u00e1 melhor do que uma aplica\u00e7\u00e3o sem caching, simplesmente porque um cach\u00ea intercepta todas as requisi\u00e7\u00f5es para o banco de dados em fornece a resposta instantaneamente. Implementar caching \u00e9 uma aplica\u00e7\u00e3o web significa copiar dados frequentemente acessados do banco de dados, que \u00e9 baseado em hardware de disco, e armazenar na RAM para resposta r\u00e1pida. Caching pode ser usados para dados din\u00e2micos (com tempo de sobreviv\u00eancia - TTL) ou dados est\u00e1ticos. Fila de Mensagens \u00b6 Uma fila de mensagem \u00e9 uma fila que faz a rota de mensagem da fonte para o destino, ou do servidor para remetente para o receptor seguindo a pol\u00edtica FIFO (First In, First Out). Al\u00e9m de FIFO, filas de mensagens tamb\u00e9m suportam delivery baseado em prioridade, mensagens t\u00eam uma prioridade atribu\u00edda a elas e a fila processa as mensagens baseado no conjunto de prioridades. Essas filas s\u00e3o chamadas de filas de prioridade . Caracter\u00edsticas da Fila de Mensagens \u00b6 Filas de mensagens facilitam o comportamento ass\u00edncrono, esse comportamento permite que os m\u00f3dulos se comuniquem sem dificultar suas atividades prim\u00e1rias. Tamb\u00e9m facilitam a comunica\u00e7\u00e3o entres os m\u00f3dulos, o que \u00e9 chave para uma arquitetura orientada a servi\u00e7os e micro servi\u00e7os, elas permitem a comunica\u00e7\u00e3o em um ambiente heterog\u00eaneo, fornecendo armazenamento tempor\u00e1rio para mensagens at\u00e9 que elas sejam processadas e consumidas pelo consumidor.","title":"Fundamentos Web"},{"location":"fundamentos_web/#aplicacoes-web-e-arquitetura-de-software","text":"","title":"Aplica\u00e7\u00f5es Web e Arquitetura de Software"},{"location":"fundamentos_web/#diferentes-camadas-na-arquitetura-de-software","text":"Uma camada \u00e9 como uma separa\u00e7\u00e3o l\u00f3gica e f\u00edsica dos componentes em uma aplica\u00e7\u00e3o ou servi\u00e7o. Esta separa\u00e7\u00e3o \u00e9 feita em n\u00edvel de componentes, n\u00e3o em n\u00edvel de c\u00f3digo.","title":"Diferentes Camadas na Arquitetura de Software"},{"location":"fundamentos_web/#aplicacoes-em-camada-unica","text":"Em aplica\u00e7\u00f5es de camada \u00fanica a interface do usu\u00e1rio, o backend da l\u00f3gica do neg\u00f3cio e o banco de dados est\u00e3o na mesma m\u00e1quina. flowchart BT A[(Database)] <--> B[Server] <--> C[User Interface] Aplica\u00e7\u00f5es Desktop s\u00e3o exemplos de aplica\u00e7\u00f5es camada \u00fanica.","title":"Aplica\u00e7\u00f5es em camada \u00fanica"},{"location":"fundamentos_web/#aplicacoes-camada-dupla","text":"Uma aplica\u00e7\u00e3o camada dupla envolve um cliente e um servidor. O cliente cont\u00e9m a interface do usu\u00e1rio com a l\u00f3gica do neg\u00f3cio em uma m\u00e1quina. Enquanto o servidor backend inclui um banco de dados rodando em uma m\u00e1quina diferente. O banco de dados \u00e9 hospedado pelo neg\u00f3cio e t\u00eam o controle sobre ele. flowchart LR A[Cliente]--\"Requisi\u00e7\u00e3o\"-----> B[Servidor Backend] B[Servidor Backend]--\"Resposta\"-----> A Exemplos de utilidade: Aplicativos de produtividade, jogos no browser. Os dados pesados s\u00e3o baixados uma vez e o servidor \u00e9 requisitado apenas para salvar o estado.","title":"Aplica\u00e7\u00f5es Camada Dupla"},{"location":"fundamentos_web/#aplicacoes-tres-camadas","text":"Esse tipo de aplica\u00e7\u00e3o \u00e9 bastante popular e amplamente utilizado na internet. Quase todo website simples como blogs e jornais fazem parte dessa categoria. Em aplica\u00e7\u00f5es Tr\u00eas Camada, a interface do usu\u00e1rio, a l\u00f3gica do neg\u00f3cio e o banco de dados, todos est\u00e3o em m\u00e1quinas diferentes, est\u00e3o separadas fisicamente. flowchart LR subgraph Cliente direction LR a1[cliente 1] a2[cliente 2] a5[cliente 3] end cliente <--> a3 a3[Servidor] <--> a4[(Banco de Dados)]","title":"Aplica\u00e7\u00f5es Tr\u00eas Camadas"},{"location":"fundamentos_web/#aplicacoes-n-camadas","text":"Uma aplica\u00e7\u00e3o que tem mais de 3 componentes envolvidos na arquitetura. Componentes podem ser: Cach\u00ea. Mensageria. Load Balancers. Servidores de busca. Componentes para processamento de grandes quantidades de dados. Componentes rodando servi\u00e7os web, micro servi\u00e7os. Popularmente conhecidos como Sistemas distribu\u00eddos . Dois princ\u00edpios do desenvolvimento de software s\u00e3o as chaves para justificar esta arquitetura: Responsabilidade \u00fanica e Separa\u00e7\u00e3o de Conceitos . Diferen\u00e7a entre Layers e Tiers: Layers s\u00e3o em n\u00edve lde c\u00f3digo (conceitual/l\u00f3gico), enquanto tier est\u00e1 relacionado \u00e0 separa\u00e7\u00e3o f\u00edsica dos componentes.","title":"Aplica\u00e7\u00f5es N-Camadas"},{"location":"fundamentos_web/#arquitetura-web","text":"","title":"Arquitetura Web"},{"location":"fundamentos_web/#arquitetura-cliente-servidor","text":"Essa arquitetura \u00e9 pe\u00e7a fundamental da internet. Funciona no modelo requisi\u00e7\u00e3o-resposta. O cliente manda a requisi\u00e7\u00e3o da informa\u00e7\u00e3o para o servidor e o servidor responde com a informa\u00e7\u00e3o.","title":"Arquitetura Cliente-Servidor"},{"location":"fundamentos_web/#comunicacao-entre-cliente-e-servidor","text":"","title":"Comunica\u00e7\u00e3o entre Cliente e Servidor"},{"location":"fundamentos_web/#api-rest","text":"REST significa Representational State Transfer. \u00c9 um estilo de arquitetura de software para implementar web servi\u00e7os. Servi\u00e7os implementados utilizando o estilo REST s\u00e3o conhecidos como web servi\u00e7os RESTful . Uma API REST \u00e9 uma implementa\u00e7\u00e3o de API que adere \u00e0s restri\u00e7\u00f5es do estilo REST, ela age como uma interface. A comunica\u00e7\u00e3o entre cliente e servidor acontece atrav\u00e9s de HTTP, a API REST tira vantagem das metodologias HTTP disso para estabelecer comunica\u00e7\u00e3o entre o cliente e o servidor. REST tamb\u00e9m habilita servidores para cachear a resposta que melhora a performance da aplica\u00e7\u00e3o. A comunica\u00e7\u00e3o entre cliente e servidor \u00e9 livre de estado, ou seja, toda comunica\u00e7\u00e3o entre cliente e servidor \u00e9 como uma nova comunica\u00e7\u00e3o.","title":"API REST"},{"location":"fundamentos_web/#http-push-e-pull","text":"","title":"HTTP Push e Pull"},{"location":"fundamentos_web/#renderizacao-cliente-vs-servidor","text":"Quando o browser recebe uma p\u00e1gina de web de um servidor como resposta, ele tem que renderizar a resposta na janela na forma de uma p\u00e1gina HTML. Para fazer isso o browser tem v\u00e1rios componentes, tais como: Engine do browser Engine de renderiza\u00e7\u00e3o Interpretador JavaScript Backend de Rede e UI Armazenamento de dados e etc. A engine de renderiza\u00e7\u00e3o constr\u00f3i a \u00e1rvore DOM e renderiza a constru\u00e7\u00e3o.","title":"Renderiza\u00e7\u00e3o Cliente vs Servidor"},{"location":"fundamentos_web/#escalabilidade","text":"Escalabilidade \u00e9 o potencial de uma aplica\u00e7\u00e3o de lidar com uma crescente carga de trabalho sem sacrificar a performance.","title":"Escalabilidade"},{"location":"fundamentos_web/#latencia","text":"\u00c9 o tempo que o sistema leva para responder \u00e0 uma requisi\u00e7\u00e3o de um usu\u00e1rio. Sistemas almejam possuir lat\u00eancia m\u00ednima. A lat\u00eancia \u00e9 medida como a diferen\u00e7a de tempo em que o usu\u00e1rio toma uma a\u00e7\u00e3o e a resposta do sistema. A lat\u00eancia \u00e9 usualmente dividida em duas partes: A lat\u00eancia da conex\u00e3o e a lat\u00eancia da aplica\u00e7\u00e3o.","title":"Lat\u00eancia"},{"location":"fundamentos_web/#tipos-de-escalabilidade","text":"Para escalar uma aplica\u00e7\u00e3o \u00e9 necess\u00e1rio um s\u00f3lido poder computacional. Os servidores devem ser potentes o suficiente para lidar com o aumento do tr\u00e1fego. Existem duas formas de escalar uma aplica\u00e7\u00e3o: Escalamento Horizontal e Vertical. Escalabilidade Vertical : Aumentar o poder computacional do servidor. A escala vertical possui limites \u00f3bvios. Escalabilidade Horizontal : Aumentar a quantidade de servidores. A escala horizontal permite escalamento din\u00e2mico em tempo real quando necess\u00e1rio. A mais importante raz\u00e3o porque computa\u00e7\u00e3o em nuvem t\u00eam se tornado mainstream na ind\u00fastria \u00e9 devido a habilidade da nuvem de escalar dinamicamente. O processo de adicionar e remover servidores, aumentando e voltando \u00e0 capacidade original \u00e9 chamado de Elasticidade da Nuvem . O c\u00f3digo necess\u00e1rio para rodar sistemas distribu\u00eddos deve ser livre de estado . N\u00e3o devem haver inst\u00e2ncias est\u00e1ticas no c\u00f3digo, inst\u00e2ncias est\u00e1ticas mant\u00e9m os dados da aplica\u00e7\u00e3o no servidor particular, quando o servidor cai, os dados/estado \u00e9 perdido. Uma boa pr\u00e1tica \u00e9 evitar o uso de inst\u00e2ncias est\u00e1ticas de uma classe. O estado \u00e9 tipicamente persistido em uma mem\u00f3ria distribu\u00edda, isso facilita que os componentes sejam livre de estado. \u00c9 por isso que programa\u00e7\u00e3o funcional se tornou popular para sistemas distribu\u00eddos, as fun\u00e7\u00f5es n\u00e3o ret\u00e9m nenhum estado.","title":"Tipos de escalabilidade"},{"location":"fundamentos_web/#alta-disponibilidade","text":"Alta disponibilidade \u00e9 o modelo atual na ind\u00fastria. \u00c9 a habilidade de um sistema de permanecer online apesar da ocorr\u00eancia de falhas no n\u00edvel da estrutura e tempo real. Um servi\u00e7o altamente dispon\u00edvel significa que o sistema estar\u00e1 online em 99.99999% do tempo. Ou seja, ter\u00e1 um n\u00edvel de servi\u00e7o de 99.99999%. O n\u00edvel de servi\u00e7o \u00e9 um fator cr\u00edtico para alguns servi\u00e7os , como sistemas de avia\u00e7\u00e3o, sistemas espaciais, m\u00e1quinas de minera\u00e7\u00e3o, servidores de hospitais, mercado de capitais. Para obter essa disponibilidade o sistema deve ser projetados para serem tolerante a faltas e seus componentes s\u00e3o constru\u00eddos de forma redundante.","title":"Alta Disponibilidade"},{"location":"fundamentos_web/#razoes-para-falhas-de-sistemas","text":"Crash de software Falhas de hardware Erros Humanos Desligamento programado","title":"Raz\u00f5es para falhas de sistemas"},{"location":"fundamentos_web/#arquitetura-monolitica","text":"Uma aplica\u00e7\u00e3o tem um arquitetura monol\u00edtica se ela cont\u00e9m toda a aplica\u00e7\u00e3o em uma \u00fanica base de c\u00f3digo. Uma aplica\u00e7\u00e3o monol\u00edtica \u00e9 autocontida. Monolitos s\u00e3o mais simples de construir, testar e implementar em compara\u00e7\u00e3o \u00e0 arquitetura de micro-servi\u00e7os.","title":"Arquitetura Monol\u00edtica"},{"location":"fundamentos_web/#vantagens-da-arquitetura-monolitica","text":"Simplicidade: s\u00e3o simples de desenvolver, testar, implementar, monitorar e gerenciar, visto que tudo est\u00e1 em apenas um reposit\u00f3rio.","title":"Vantagens da Arquitetura Monol\u00edtica"},{"location":"fundamentos_web/#contras-da-arquitetura-monolitica","text":"Implementa\u00e7\u00e3o cont\u00ednua \u00e9 uma dor em monolitos, at\u00e9 mesmo uma pequena mudan\u00e7a de c\u00f3digo pode resultar na necessidade de uma reimplementa\u00e7\u00e3o completa. Necessidade de Testes regressivos , visto que uma mudan\u00e7a de c\u00f3digo pode impactar potencialmente a funcionalidade de outras features do app. Um \u00danico Ponto de Falha pode derrubar toda a aplica\u00e7\u00e3o. Manuten\u00e7\u00e3o e Escalabilidade s\u00e3o um desafio em monolitos. Dificuldade em usar tecnologias diferentes .","title":"Contras da Arquitetura Monol\u00edtica"},{"location":"fundamentos_web/#arquitetura-micro-servicos","text":"Na arquitetura de Micro Servi\u00e7os, diferentes features de um servi\u00e7o extensivo s\u00e3o implementadas separadamente como servi\u00e7os menores vagamente atrelados chamados micro servi\u00e7os . Estes micro servi\u00e7os trabalham em conjun\u00e7\u00e3o para formar um grande servi\u00e7o distribu\u00eddo. Cada servi\u00e7o tem uma \u00fanica responsabilidade de executar uma feature espec\u00edfica e \u00e9 separado dos outros servi\u00e7os. Esta arquitetura facilita uma manuten\u00e7\u00e3o mais r\u00e1pida e limpa, o desenvolvimento de novas features, o teste e a implementa\u00e7\u00e3o de m\u00f3dulos individuais.","title":"Arquitetura Micro Servi\u00e7os"},{"location":"fundamentos_web/#bancos-de-dados","text":"Um banco de dados \u00e9 um componente na arquitetura de uma aplica\u00e7\u00e3o necess\u00e1rio para persistir os dados. Dados podem ser: Estruturados, N\u00e3o Estruturados, Semi-Estruturados e dados de estado do usu\u00e1rio.","title":"Bancos de Dados"},{"location":"fundamentos_web/#bancos-de-dados-relacionais","text":"Bancos de Dados Relacionais persistem dados contendo relacionamentos: one to one, one to many, many to many, many to one, etc. \u00c9 o tipo de banco de dados mais usado em desenvolvimento web. Bancos de Dados Relacionais possuem um modelo de dados relacional, dados s\u00e3o organizados em tabelas contendo linhas e colunas e SQL \u00e9 a linguagem de consulta prim\u00e1ria para interagir com dados relacionais.","title":"Bancos de Dados Relacionais"},{"location":"fundamentos_web/#bancos-de-dados-no-sql","text":"Constru\u00eddos para leituras e escritas de alta frequ\u00eancia. Escal\u00e1vel Roda em Clusteres Mais f\u00e1ceis de aprender e amig\u00e1veis ao desenvolvedor Sem SQL Inconsist\u00eancia Sem suporte para ACID","title":"Bancos de Dados NO SQL"},{"location":"fundamentos_web/#diferentes-tipos-de-banco-de-dados","text":"BD orientado a documentos Data store Chave-valor Wide-Column DB BD Relacional BD em Grafo BD s\u00e9rie temporal DB dedicado a aplicativos mobile...","title":"Diferentes Tipos de Banco de Dados"},{"location":"fundamentos_web/#caching","text":"Caching \u00e9 a chave para a performance de qualquer aplica\u00e7\u00e3o, assegura baixa lat\u00eancia e alta taxa de transfer\u00eancia. Uma aplica\u00e7\u00e3o com caching sempre far\u00e1 melhor do que uma aplica\u00e7\u00e3o sem caching, simplesmente porque um cach\u00ea intercepta todas as requisi\u00e7\u00f5es para o banco de dados em fornece a resposta instantaneamente. Implementar caching \u00e9 uma aplica\u00e7\u00e3o web significa copiar dados frequentemente acessados do banco de dados, que \u00e9 baseado em hardware de disco, e armazenar na RAM para resposta r\u00e1pida. Caching pode ser usados para dados din\u00e2micos (com tempo de sobreviv\u00eancia - TTL) ou dados est\u00e1ticos.","title":"Caching"},{"location":"fundamentos_web/#fila-de-mensagens","text":"Uma fila de mensagem \u00e9 uma fila que faz a rota de mensagem da fonte para o destino, ou do servidor para remetente para o receptor seguindo a pol\u00edtica FIFO (First In, First Out). Al\u00e9m de FIFO, filas de mensagens tamb\u00e9m suportam delivery baseado em prioridade, mensagens t\u00eam uma prioridade atribu\u00edda a elas e a fila processa as mensagens baseado no conjunto de prioridades. Essas filas s\u00e3o chamadas de filas de prioridade .","title":"Fila de Mensagens"},{"location":"fundamentos_web/#caracteristicas-da-fila-de-mensagens","text":"Filas de mensagens facilitam o comportamento ass\u00edncrono, esse comportamento permite que os m\u00f3dulos se comuniquem sem dificultar suas atividades prim\u00e1rias. Tamb\u00e9m facilitam a comunica\u00e7\u00e3o entres os m\u00f3dulos, o que \u00e9 chave para uma arquitetura orientada a servi\u00e7os e micro servi\u00e7os, elas permitem a comunica\u00e7\u00e3o em um ambiente heterog\u00eaneo, fornecendo armazenamento tempor\u00e1rio para mensagens at\u00e9 que elas sejam processadas e consumidas pelo consumidor.","title":"Caracter\u00edsticas da Fila de Mensagens"},{"location":"regressaolinear/","text":"Regress\u00e3o Linear \u00b6 A Regress\u00e3o Linear ajusta um modelo com coeficientes \\(w = (w_1, ..., w_2)\\) minimizar a soma dos res\u00edduos dos quadrados entre os valores da vari\u00e1vel alvo observados no conjunto de dados e os valore preditor pela aproxima\u00e7\u00e3o linear. Matematicamente, ela resolve um problema da forma: \\[ \\min_w{\\|Xw - y\\|_2^2} \\] Modelo : \u00b6 A Regress\u00e3o Linear se utiliza da hip\u00f3tese de que os atributos est\u00e3o linearmente relacionados com a vari\u00e1vel alvo e, desta forma, a vari\u00e1vel alvo pode ser predita utilizando a equa\u00e7\u00e3o da reta: \\[ \\hat{y}(w, x) = w_o + w_1x_1 + ... + w_px_p \\] Onde \\(w_o\\) \u00e9 o intercepto e \\(w = (w_1, ..., w_2)\\) s\u00e3o os coeficientes da reta, estes s\u00e3o os par\u00e2metros do modelo. Fun\u00e7\u00e3o Custo: \u00b6 A fun\u00e7\u00e3o custo usada para Regress\u00e3o Linear tem forma: \\[ J(w) = \\frac{1}{2m} \\sum_{i=1}^m(\\hat{y}^i-y^i)^2 \\] Note Multiplicamos por 1/2 apenas para facilitar os c\u00e1lculos, j\u00e1 que o resultado da minimiza\u00e7\u00e3o \u00e9 o mesmo. Objetivo: Minimizar \\(J(w)\\) com respeito a w. \u00b6 \\[ J(w) = \\frac{1}{2m} \\sum_{i=1}^m(w_o + w_1x_1 + ... + w_px_p-y^i)^2 \\] ou \\[ J(w) = \\frac{1}{2m} \\sum_{i=1}^m(wx^i-y^i)^2 \\] Otimiza\u00e7\u00e3o: Gradiente Descendente \u00b6 Para alcan\u00e7ar o objetivo de achar os coeficientes \\(w\\) que minimizam o custo, utilizamos o algoritmo Gradiente Descendente . Algoritmo Grandiente Descendente Come\u00e7ar com algum \\(w\\) qualquer (inicializar \\(w\\) ). Atualizar \\(w\\) : \\[ w = w - \\alpha \\frac{dJ(w)}{dw} \\] Repetir a atualiza\u00e7\u00e3o de \\(w\\) at\u00e9 chegar se estabelecer no custo m\u00ednimo ou pr\u00f3ximo dele. Derivadas Parciais: \\[ \\frac{\\partial J(w)}{\\partial w} = \\frac{1}{m}\\sum_{i=1}^m(wx^i-y^i)x^i \\] Note A derivada parcial do intercepto \u00e9 \\(\\frac{1}{m}\\sum_{i=1}^m(wx^i-y^i)\\) , mas utilizamos o truque de criar um coluna de 1s como um atributo de \\(x\\) , assim \\(x_o = 1\\) e \\(\\frac{1}{m}\\sum_{i=1}^m(wx^i-y^i) = \\frac{1}{m}\\sum_{i=1}^m(wx^i-y^i)x^i\\) e tudo pode ser calculado junto.","title":"Regress\u00e3o Linear"},{"location":"regressaolinear/#regressao-linear","text":"A Regress\u00e3o Linear ajusta um modelo com coeficientes \\(w = (w_1, ..., w_2)\\) minimizar a soma dos res\u00edduos dos quadrados entre os valores da vari\u00e1vel alvo observados no conjunto de dados e os valore preditor pela aproxima\u00e7\u00e3o linear. Matematicamente, ela resolve um problema da forma: \\[ \\min_w{\\|Xw - y\\|_2^2} \\]","title":"Regress\u00e3o Linear"},{"location":"regressaolinear/#modelo","text":"A Regress\u00e3o Linear se utiliza da hip\u00f3tese de que os atributos est\u00e3o linearmente relacionados com a vari\u00e1vel alvo e, desta forma, a vari\u00e1vel alvo pode ser predita utilizando a equa\u00e7\u00e3o da reta: \\[ \\hat{y}(w, x) = w_o + w_1x_1 + ... + w_px_p \\] Onde \\(w_o\\) \u00e9 o intercepto e \\(w = (w_1, ..., w_2)\\) s\u00e3o os coeficientes da reta, estes s\u00e3o os par\u00e2metros do modelo.","title":"Modelo:"},{"location":"regressaolinear/#funcao-custo","text":"A fun\u00e7\u00e3o custo usada para Regress\u00e3o Linear tem forma: \\[ J(w) = \\frac{1}{2m} \\sum_{i=1}^m(\\hat{y}^i-y^i)^2 \\] Note Multiplicamos por 1/2 apenas para facilitar os c\u00e1lculos, j\u00e1 que o resultado da minimiza\u00e7\u00e3o \u00e9 o mesmo.","title":"Fun\u00e7\u00e3o Custo:"},{"location":"regressaolinear/#objetivo-minimizar-jw-com-respeito-a-w","text":"\\[ J(w) = \\frac{1}{2m} \\sum_{i=1}^m(w_o + w_1x_1 + ... + w_px_p-y^i)^2 \\] ou \\[ J(w) = \\frac{1}{2m} \\sum_{i=1}^m(wx^i-y^i)^2 \\]","title":"Objetivo: Minimizar \\(J(w)\\) com respeito a w."},{"location":"regressaolinear/#otimizacao-gradiente-descendente","text":"Para alcan\u00e7ar o objetivo de achar os coeficientes \\(w\\) que minimizam o custo, utilizamos o algoritmo Gradiente Descendente . Algoritmo Grandiente Descendente Come\u00e7ar com algum \\(w\\) qualquer (inicializar \\(w\\) ). Atualizar \\(w\\) : \\[ w = w - \\alpha \\frac{dJ(w)}{dw} \\] Repetir a atualiza\u00e7\u00e3o de \\(w\\) at\u00e9 chegar se estabelecer no custo m\u00ednimo ou pr\u00f3ximo dele. Derivadas Parciais: \\[ \\frac{\\partial J(w)}{\\partial w} = \\frac{1}{m}\\sum_{i=1}^m(wx^i-y^i)x^i \\] Note A derivada parcial do intercepto \u00e9 \\(\\frac{1}{m}\\sum_{i=1}^m(wx^i-y^i)\\) , mas utilizamos o truque de criar um coluna de 1s como um atributo de \\(x\\) , assim \\(x_o = 1\\) e \\(\\frac{1}{m}\\sum_{i=1}^m(wx^i-y^i) = \\frac{1}{m}\\sum_{i=1}^m(wx^i-y^i)x^i\\) e tudo pode ser calculado junto.","title":"Otimiza\u00e7\u00e3o: Gradiente Descendente"},{"location":"regressaologistica/","text":"7 Passos do Machine Learning \u00b6 Coleta de Dados Processamento e Prepara\u00e7\u00e3o de dados Engenharia de Features Sele\u00e7\u00e3o de Modelos Treinamento de Modelos e Pipeline de Dados Valida\u00e7\u00e3o de Modelo Persist\u00eancia do Modelo","title":"7 Passos do Machine Learning"},{"location":"regressaologistica/#7-passos-do-machine-learning","text":"Coleta de Dados Processamento e Prepara\u00e7\u00e3o de dados Engenharia de Features Sele\u00e7\u00e3o de Modelos Treinamento de Modelos e Pipeline de Dados Valida\u00e7\u00e3o de Modelo Persist\u00eancia do Modelo","title":"7 Passos do Machine Learning"}]}