{"config":{"indexing":"full","lang":["pt"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Glet Docs \u00b6 Um projeto para documentar o aprendizado e os principais processos em Data Science.","title":"Home"},{"location":"#glet-docs","text":"Um projeto para documentar o aprendizado e os principais processos em Data Science.","title":"Glet Docs"},{"location":"AprendizadoSupervisionado/","text":"Aprendizado Supervisionado \u00b6 Nota\u00e7\u00e3o: \u00b6 Vari\u00e1veis preditoras: \\(x = (x_1, x_2, ..., x_d)\\) Vari\u00e1vel Alvo: \\(y\\) N\u00famero de exemplos de treino: \\(m\\) N\u00famero de vari\u00e1veis de treino: \\(d\\) Um exemplo de treino: \\((x_1, ..., x_d, y)\\) O i-\u00e9simo exemplo de treino: \\((X^i, y^i)\\) y predito pelo modelo: \\(\\hat{y}\\) A ideia do Aprendizado supervisionado \u00b6 graph TD A[(Conjunto de Treino)] --> B(Algoritmo de Aprendizado de M\u00e1quina); B ---> C([Modelo]); D(Novos Dados) --> C --> E(y_pred); Aprendizado Supervisionado em Partes: \u00b6 Modelo : No aprendizado supervisionado escolhemos um Modelo / Fun\u00e7\u00e3o / Hip\u00f3tese. Par\u00e2metros do modelo : O modelo escolhido tem seus par\u00e2metros que ser\u00e3o ajustados. Fun\u00e7\u00e3o custo : Uma fun\u00e7\u00e3o para quantificar o qu\u00e3o bem est\u00e1 ajustado o modelo. Objetivo : Minimizar a fun\u00e7\u00e3o custo com base nos par\u00e2metros da fun\u00e7\u00e3o. Procedimento de otimiza\u00e7\u00e3o : Procedimento utilizado para ajustar o modelo. Treinamento : Aplica\u00e7\u00e3o do procedimento de otimiza\u00e7\u00e3o para ajustar o modelo, o treinamento tem hiperpar\u00e2metros que ditam como o treinamento e a otimiza\u00e7\u00e3o ser\u00e3o executadas para ajustar o modelo. Predi\u00e7\u00e3o : O treinamento resulta em um modelo com par\u00e2metros ajustados que ser\u00e3o utilizado para mapear \\(x \\to \\hat{y}\\) . Gradiente Descendente \u00b6","title":"Aprendizado Supervisionado"},{"location":"AprendizadoSupervisionado/#aprendizado-supervisionado","text":"","title":"Aprendizado Supervisionado"},{"location":"AprendizadoSupervisionado/#notacao","text":"Vari\u00e1veis preditoras: \\(x = (x_1, x_2, ..., x_d)\\) Vari\u00e1vel Alvo: \\(y\\) N\u00famero de exemplos de treino: \\(m\\) N\u00famero de vari\u00e1veis de treino: \\(d\\) Um exemplo de treino: \\((x_1, ..., x_d, y)\\) O i-\u00e9simo exemplo de treino: \\((X^i, y^i)\\) y predito pelo modelo: \\(\\hat{y}\\)","title":"Nota\u00e7\u00e3o:"},{"location":"AprendizadoSupervisionado/#a-ideia-do-aprendizado-supervisionado","text":"graph TD A[(Conjunto de Treino)] --> B(Algoritmo de Aprendizado de M\u00e1quina); B ---> C([Modelo]); D(Novos Dados) --> C --> E(y_pred);","title":"A ideia do Aprendizado supervisionado"},{"location":"AprendizadoSupervisionado/#aprendizado-supervisionado-em-partes","text":"Modelo : No aprendizado supervisionado escolhemos um Modelo / Fun\u00e7\u00e3o / Hip\u00f3tese. Par\u00e2metros do modelo : O modelo escolhido tem seus par\u00e2metros que ser\u00e3o ajustados. Fun\u00e7\u00e3o custo : Uma fun\u00e7\u00e3o para quantificar o qu\u00e3o bem est\u00e1 ajustado o modelo. Objetivo : Minimizar a fun\u00e7\u00e3o custo com base nos par\u00e2metros da fun\u00e7\u00e3o. Procedimento de otimiza\u00e7\u00e3o : Procedimento utilizado para ajustar o modelo. Treinamento : Aplica\u00e7\u00e3o do procedimento de otimiza\u00e7\u00e3o para ajustar o modelo, o treinamento tem hiperpar\u00e2metros que ditam como o treinamento e a otimiza\u00e7\u00e3o ser\u00e3o executadas para ajustar o modelo. Predi\u00e7\u00e3o : O treinamento resulta em um modelo com par\u00e2metros ajustados que ser\u00e3o utilizado para mapear \\(x \\to \\hat{y}\\) .","title":"Aprendizado Supervisionado em Partes:"},{"location":"AprendizadoSupervisionado/#gradiente-descendente","text":"","title":"Gradiente Descendente"},{"location":"Conda/","text":"Criando um enviroment \u00b6 Envs s\u00e3o instalados no diret\u00f3rio envs dentro do diret\u00f3rio do conda Criar um env com conda: conda create --name myenv Apertar y quando conda perguntar \"proceed ([y]/n)?\" Isso cria um env sem nenhum pacote instalado. Env com vers\u00e3o espec\u00edfica de Python: conda create -n myenv python=3.9 Utilidades \u00b6 Ativando um enviroment \u00b6 conda activate myenv Informa\u00e7\u00f5es \u00b6 Mostar todos os ambientes criados. O que tem um asterisco * \u00e9 o atual. conda info --envs # ou conda env list Mostrar todos os pacotes de um env: conda list Usar pip em um env \u00b6 conda install -n myenv pip conda activate myenv pip <pip_subcommand> Clonando um enviroment \u00b6 conda create --name myclone --clone myenv Remover um Env \u00b6 conda remove --name myenv --all \u200b","title":"Conda"},{"location":"Conda/#criando-um-enviroment","text":"Envs s\u00e3o instalados no diret\u00f3rio envs dentro do diret\u00f3rio do conda Criar um env com conda: conda create --name myenv Apertar y quando conda perguntar \"proceed ([y]/n)?\" Isso cria um env sem nenhum pacote instalado. Env com vers\u00e3o espec\u00edfica de Python: conda create -n myenv python=3.9","title":"Criando um enviroment"},{"location":"Conda/#utilidades","text":"","title":"Utilidades"},{"location":"Conda/#ativando-um-enviroment","text":"conda activate myenv","title":"Ativando um enviroment"},{"location":"Conda/#informacoes","text":"Mostar todos os ambientes criados. O que tem um asterisco * \u00e9 o atual. conda info --envs # ou conda env list Mostrar todos os pacotes de um env: conda list","title":"Informa\u00e7\u00f5es"},{"location":"Conda/#usar-pip-em-um-env","text":"conda install -n myenv pip conda activate myenv pip <pip_subcommand>","title":"Usar pip em um env"},{"location":"Conda/#clonando-um-enviroment","text":"conda create --name myclone --clone myenv","title":"Clonando um enviroment"},{"location":"Conda/#remover-um-env","text":"conda remove --name myenv --all \u200b","title":"Remover um Env"},{"location":"Estatistica/","text":"Tipos de Dados \u00b6 Conjunto de dados : \u00c9 um dos subprodutos de um estudo, cont\u00e9m as caracter\u00edsticas principais que se tem interesse em estudar de uma popula\u00e7\u00e3o ou uma amostra. Essas caracter\u00edsticas podem ser qualitativas ou quantitativas. Antes de uma an\u00e1lise inferencial, precisamos descrever e resumir os dados, para isso precisamos caracterizar os tipos de dados. Tipos de vari\u00e1veis: Qualitativas Nominais: N\u00e3o possuem ordena\u00e7\u00e3o inerente entre si. Ordinais: Podem ser ordenadas segundo um crit\u00e9rio quantitativo inerente a vari\u00e1vel em quest\u00e3o. Quantitativas Discretas: Descrevem uma quantidade cont\u00e1vel, seus valores podem ser enumerados de forma ordenada. Cont\u00ednuas: Descrevem medi\u00e7\u00f5es cujos valores potenciais s\u00e3o n\u00fameros que n\u00e3o podem ser ordenados de forma inequ\u00edvoca. Warning Na pr\u00e1tica, todas as vari\u00e1veis em um computador s\u00e3o cont\u00ednuas, pois existe uma quantidade finita de bits para armazenar os d\u00edgitos. Modelos Estat\u00edsticos Cada tipo de vari\u00e1vel est\u00e1 associada a um tipo de modelo estat\u00edstico. * Qualitativas nominais: Modelos de regress\u00e3o log\u00edstica ou modelos da teoria de resposta ao item. * Qualitativas ordinais: Modelos de regress\u00e3o ordinais, modelos log\u00edsticos multivariados, entre outros. * Quantitativas discretas: Poisson, binomiais, geom\u00e9tricos... * Quantitativa cont\u00ednua: Modelo Normal, El\u00edptico, normal assim\u00e9trico, gama, beta...","title":"Estat\u00edstica"},{"location":"Flask/","text":"Introdu\u00e7\u00e3o \u00b6 Flask \u00e9 um framework de desenvolvimento web desenvolvido em Python. \u00c9 f\u00e1cil de aprender e de usar. \"Begginer-friendly\" porque n\u00e3o usa c\u00f3digos que devem ser sempre copiados ou depend\u00eancias, o que pode distrair da fun\u00e7\u00e3o prim\u00e1ria da aplica\u00e7\u00e3o. Features do Flask \u00b6 Fornece um servidor de desenvolvimento e um debugger. Usa templates Jinja2. Compat\u00edvel com WSGI 1.0. Fornece suporte integrado para testes unit\u00e1rios. Muitas extens\u00f5es dispon\u00edveis. Micro-framework \u00b6 Oposto a fullstack framework, que tamb\u00e9m oferecem m\u00f3dulos adicionais features como autentica\u00e7\u00e3o, banco de dados ORM, valida\u00e7\u00e3o de input e sanitiza\u00e7\u00e3o, etc... Flask \u00e9 conhecido como um micro-framework porque \u00e9 leve e apenas fornece componentes que s\u00e3o essenciais, como routing, request, handling, sessions . Para outras funcionalidades o desenvolvedor deve escrever m\u00f3dulos customizados ou usar uma extens\u00e3o. Essa abordagem evita boilerplate code. O Modelo Arquitetural Cliente-Servidor \u00b6 Cliente : Enviar requisi\u00e7\u00e3o para os servidores e enviar de volta os dados necess\u00e1rios. Servidor : Espera por requisi\u00e7\u00f5es dos clientes e responde a elas. O servidor responde a essas requisi\u00e7\u00f5es e envia a informa\u00e7\u00e3o que o cliente pediu. Comunica\u00e7\u00e3o cliente servidor \u00b6 Atrav\u00e9s de m\u00faltiplos protocolos diferentes. Em nosso contexto, HTTP ou HTTPS s\u00e3o usados. M\u00e9todos HTTP: GET POST PUT DELETE Uma aplica\u00e7\u00e3o Flask como um servidor \u00b6 A aplica\u00e7\u00e3o Flask aqui ser\u00e1 do lado servidor. o Browser agir\u00e1 como cliente mandando requisi\u00e7\u00f5es para nossa aplica\u00e7\u00e3o web. Ent\u00e3o a aplica\u00e7\u00e3o enviar\u00e1 a resposta apropriada. Arquitetura Model-Template-View (MTV) \u00b6 A arquitetura MTV \u00e9 uma varia\u00e7\u00e3o da arquitetura do MVC ( Model-View-Controler ). A arquitetura MVC \u00e9 um padr\u00e3o arquitetural de software no qual a l\u00f3gica da aplica\u00e7\u00e3o \u00e9 dividida em 3 componentes na base da funcionalidade: Models Views Controllers \u00c9 usado n\u00e3o apenas para aplica\u00e7\u00f5es Desktop como tamb\u00e9m para Web e Mobile. Componentes da Arquitetura MVC \u00b6 Models Models representam como os dados s\u00e3o armazenados no banco de dados. Cont\u00e9m todas as defini\u00e7\u00f5es de dados para a aplica\u00e7\u00e3o (o schema). Views Views s\u00e3o componentes que s\u00e3o vis\u00edveis ao usu\u00e1rio, como um output ou um Graphical User Interface (GUI). Controllers Controllers s\u00e3o componentes que agem como uma interface entre models e views . O controller interpreta as intera\u00e7\u00f5es do usu\u00e1rio (inputs) e executa tarefas nos models antes de retornar os dados apropriados atrav\u00e9s dos views. MTV \u00b6 A arquitetura MTV \u00e9 uma leve varia\u00e7\u00e3o da MVC . Por si s\u00f3, Flask \u00e9 um micro framwork e n\u00e3o cont\u00e9m suporte built-in para nenhum framework arquitetural. Entretanto, programadores que usam Flask t\u00eam a arquitetura MTV porque outro framework de desenvolvimento web baseado em Python, chamado Django a introduziu. Abaixo, uma compara\u00e7\u00e3o grosseira entre MVC e MTV: WSGI e Jinja2 \u00b6 Web Server Gateway Interface (WSGI) \u00b6 WSGI \u00e9 um padr\u00e3o que descreve as especifica\u00e7\u00f5es concernentes \u00e0 comunica\u00e7\u00e3o entre um servidor web e uma aplica\u00e7\u00e3o cliente. Os detalhes desse padr\u00e3o est\u00e3o presentes na PEP33. Alguns benef\u00edcios do WSGI: Flexibilidade com os componentes da aplica\u00e7\u00e3o. Interoperabilidade entre diferentes frameworks Python. Escalabilidade da aplica\u00e7\u00e3o com o aumento de usu\u00e1rios. Efici\u00eancia em termos de velocidade de desenvolvimento. N\u00e3o precisamos nos preocupar com detalhes internos do WSGI porque o modulo Flask lida com isso. A linguagem de template Jinja \u00b6 Jinja \u00e9 uma linguagem de template usada em Python. Podemos renderizar conte\u00fado din\u00e2mico em HTML usando Jinja. Hello World! \u00b6 A aplica\u00e7\u00e3o mais simples em Flask pode ser feita usando apenas um script. Chamaremos de app.py . O programa ser\u00e1 dividido em passos. Passo 1: Importando M\u00f3dulos \u00b6 Para essa aplica\u00e7\u00e3o, precisamos apenas do m\u00f3dulo Flask da biblioteca flask. from flask import Flask Passo 2: Criando um objeto Flask \u00b6 Precisamos criar um objeto com o modulo importado Flask. Esse objeto ser\u00e1 nossa aplica\u00e7\u00e3o WSGI chamada app . app = Flask ( __name__ ) Passo 3: Executar a aplica\u00e7\u00e3o em main \u00b6 Para executar a aplica\u00e7\u00e3o, chamaremos a fun\u00e7\u00e3o run() do nosso objeto app. if __name__ == \"__main__\" : app . run () Passo 4: Criar uma fun\u00e7\u00e3o view \u00b6 Antes de rodar a aplica\u00e7\u00e3o, precisamos dizer \u00e0 aplica\u00e7\u00e3o para mostrar algo como sa\u00edda no browser. Ent\u00e3o, criamos uma fun\u00e7\u00e3o chamada hello() que retorna a string \"Hello World!\". A sa\u00edda retornada desta fun\u00e7\u00e3o ser\u00e1 mostrada no browser. def hello (): return \"Hello World\" ; Passo 5: Atribuir uma rota URL \u00b6 Finalmente, precisamos dizer ao app Flask quando chamar a fun\u00e7\u00e3o view hello() . Para este prop\u00f3sito, criaremos uma rota URL. Uma rota URL \u00e9 associada a cada fun\u00e7\u00e3o view. Essa associa\u00e7\u00e3o \u00e9 criada usando o decorator route() antes de cada fun\u00e7\u00e3o view. @app . route ( \"/\" ) def hello (): return \"Hello World!\" ; Implementa\u00e7\u00e3o completa \u00b6 from flask import Flask app = Flask ( __name__ ) @app . route ( \"/\" ) def hello (): return \"Hello World!\" ; if __name__ == \"__main__\" : app . run ( debug = True , host = \"0.0.0.0\" , port = 3000 ) Rotas URL e Views \u00b6 A homepage de um website pode ser facilmente achada na URL hostname seguida de / , /home , /index ou algo auto explicativo. Estes tipos de URLs permitem que os usu\u00e1rios lembrem da URL e acessem facilmente. Seria inesperado se uma homepage fosse em uma URL aleat\u00f3ria como /39283@&3911 ou /more_eggs . Flask nos permite usar o decorator route() para vincular uma URL significativa a cada fun\u00e7\u00e3o view que criarmos. O decorator route() \u00b6 O decorator route leva os seguintes par\u00e2metros: rule : representa a regra de URL que \u00e9 passada como string ao decorador. endpoint (n\u00e3o necess\u00e1rio): \u00c9 o nome da fun\u00e7\u00e3o de view que \u00e9 vinculada a rota URL. options (n\u00e3o necess\u00e1rio): Par\u00e2metro opcional. Static Routing \u00b6 Em roteamento est\u00e1tico, especificamos uma string URL constante como uma regra para o decorator route() . Na aplica\u00e7\u00e3o abaixo especificamos duas rotas est\u00e1ticas tendo URLs / e educative , respectivamente. Nota : A rule \u00e9 uma string case-sensitive. Portanto, educative e Educative s\u00e3o URLs totalmente diferentes. Um Exemplo usando rotas URL est\u00e1ticas \u00b6 from flask import Flask , render_template app = Flask ( __name__ ) @app . route ( \"/\" ) def home (): return \"Welcome to the HomePage!\" @app . route ( \"/educative\" ) def learn (): return \"Happy Learning at Educative!\" if __name__ == \"__main__\" : app . run ( debug = True , host = \"0.0.0.0\" , port = 3000 ) Dynamic Routing \u00b6 Em roteamento din\u00e2mico, o par\u00e2metro rule n\u00e3o \u00e9 uma string constante e sim uma vari\u00e1vel . Variable Rules \u00b6 Em Flask podemos adicionar rules vari\u00e1veis dentro da rota URL ao usar a seguinte sintaxe: <variable_name> . A vari\u00e1vel chamada variable_name ser\u00e1 ent\u00e3o passada \u00e0 fun\u00e7\u00e3o view para ser usada. Exemplo usando rules vari\u00e1veis \u00b6 from flask import Flask app = Flask ( __name__ ) @app . route ( \"/\" ) def home (): return \"Welcome to the HomePage!\" @app . route ( \"/<my_name>\" ) def greatings ( my_name ): return \"Welcome \" + my_name + \"!\" if __name__ == \"__main__\" : app . run ( debug = True , host = \"0.0.0.0\" , port = 3000 ) Converter \u00b6 No exemplo anterior, a vari\u00e1vel my_name foi extra\u00edda da URL e foi convertida em uma string e passada para a fun\u00e7\u00e3o greetings() para ser usada. Este \u00e9 o comportamento padr\u00e3o do converter . @app . route ( '/square/<int:number>' ) def show_square ( number ): \"\"\"View that shows the square of the number passed by URL\"\"\" return \"Square of \" + str ( number ) + \" is: \" + str ( number * number ) Como usar Templates HTML \u00b6 Templates Est\u00e1ticos \u00b6 S\u00e3o arquivos HTML que permanecem constantes. De fato, arquivos HTML padr\u00e3o s\u00e3o est\u00e1ticos por natureza. Sempre que o mesmo arquivo \u00e9 renderizado, ele mostra o mesmo output, a menos que o arquivo seja alterado. At\u00e9 agora, estamos retornando apenas uma string de uma fun\u00e7\u00e3o view. Mas em uma aplica\u00e7\u00e3o do mundo real, esperamos que um arquivo HTML seja retornado e renderizado no tela do browser. Renderizando templates HTML \u00b6 HTML pode ser renderizado com Flask usando dois m\u00e9todos. Uma String \u00b6 Podemos utilizar HTML como uma string em uma fun\u00e7\u00e3o view. from flask import Flask app = Flask ( __name__ ) @app . route ( \"/\" ) def home (): return \"<h1>Welcome to the HomePage!</h1>\" if __name__ == \"__main__\" : app . run ( debug = True , host = \"0.0.0.0\" , port = 3000 ) Fun\u00e7\u00e3o render_template \u00b6 Retornar HTML como uma String funciona perfeitamente, mas n\u00e3o \u00e9 apropriado para aplica\u00e7\u00f5es pr\u00e1ticas. \u00c9 melhor manter c\u00f3digo e templates separados. Portanto, criamos arquivos separados contendo o c\u00f3digo HTML para os templates. Ent\u00e3o, estes arquivos HTML pode ser referenciados para dentro dos views pelos seus nomes. Flask cont\u00e9m uma fun\u00e7\u00e3o chamada render_template() que \u00e9 usada para renderizar os templates HTML desejados. Este m\u00e9todo tem os seguintes par\u00e2metros: template_name_or_list : O nome do template ou de uma lista de templates (o m\u00e9todo vai renderizar o primeiro template da lista). context (opcional): vari\u00e1vel que devem estar dispon\u00edveis dentro do template. O output de render_template() ent\u00e3o \u00e9 retornado pela view ao inv\u00e9s de uma simples String, como est\u00e1vamos fazendo previamente. def view_name (): return render_template ( template_name ) Estrat\u00e9gias de estrutura de arquivos \u00b6 O framework Flask procura pelos arquivos de template HTML dentro de um diret\u00f3rio nomeado \\templates . Este diret\u00f3rio deve ser posto de forma que Flask possa encontrar. Estrutura de arquivos em m\u00f3dulo \u00b6 Se seguir uma estrutura de arquivos modular em nosso projeto, um diret\u00f3rio separado chamado \"templates\" pode ser criado no mesmo diret\u00f3rio que o m\u00f3dulo principal da aplica\u00e7\u00e3o. (ex: app.py ). Estrutura de arquivo em pacotes \u00b6 Se a l\u00f3gica da aplica\u00e7\u00e3o est\u00e1 dividida em m\u00f3dulos separados, ent\u00e3o estes arquivos est\u00e3o presentes no mesmo pacote. Em Python, um pacote \u00e9 simplesmente um diret\u00f3rio contendo um arquivo nomeado como __init__.py . Se esta estrutura esta sendo seguida em nossa aplica\u00e7\u00e3o, ent\u00e3o iremos criar o diret\u00f3rio templates dentro do pacote da aplica\u00e7\u00e3o principal. Arquivos Est\u00e1ticos \u00b6 Como Servimos Arquivos Est\u00e1ticos? \u00b6 Arquivos est\u00e1ticos (ou assets), s\u00e3o arquivos que o servidor manda para o cliente \"como eles s\u00e3o\", sem qualquer interven\u00e7\u00e3o. Por exemplo, qualquer arquivo css , ou JavaScript que podemos ter em nosso website s\u00e3o enviados para o cliente sem qualquer modifica\u00e7\u00e3o. Passos para servir Arquivos Est\u00e1ticos \u00b6 Os passos a seguir s\u00e3o necess\u00e1rios para hospedar um asset est\u00e1tico. Criar um diret\u00f3rio \\static \u00b6 As mesmas estrat\u00e9gias de estruturas de arquivos tamb\u00e9m se aplicam aqui. Criar uma URL para arquivos est\u00e1ticos \u00b6 N\u00e3o usamos views para arquivos est\u00e1ticos. Ent\u00e3o, para criar uma URL separada para eles, usamos a fun\u00e7\u00e3o url_for() . Fun\u00e7\u00e3o url_for() \u00b6 A fun\u00e7\u00e3o url_for() \u00e9 usada para criar uma URL para certo endpoint. Podemos us\u00e1-la para criar URLs para views tamb\u00e9m. Ela leva o nome do endpoint e quaisquer vari\u00e1veis associadas como argumentos. url_for ( 'view_function_name' , variable_name = 'value_of_variable' ) \ud83e\udd14 Porque precisamos usar url_for() se podemos escrever a URL? A fun\u00e7\u00e3o url_for() sempre retorna a URL absoluta para o endpoint. Portanto, chamamos ela em qualquer lugar do projeto e n\u00e3o teremos problemas com caminhos relativos. Se acabarmos mudando o caminho para um endpoint ou rota para uma view, n\u00e3o temos que mudar a URL escrita em todo o projeto. A URL para um arquivo est\u00e1tico pode ser criada usando um endpoint static como a seguir: url_for ( 'static' , filename = 'name_of_file' ) Exemplo \u00b6 <!DOCTYPE html> < html > < head > < link rel = \"stylesheet\" href = \"{{url_for('static', filename='borders.css')}}\" /> </ head > < body > < h1 > Home Page! </ h1 > < p > Welcome to the homepage for \"How to Server Static Files\" Demo! </ p > </ body > </ html > Chaves duplas fazem parte da sintaxe de Jinja Templates Din\u00e2micos \u00b6 Templates Jinja2 \u00b6 Considere que estamos fazendo uma aplica\u00e7\u00e3o com m\u00faltiplos usu\u00e1rios, tal como uma rede social, cada usu\u00e1rio ter\u00e1 um perfil \u00fanico com informa\u00e7\u00f5es \u00fanicas associadas a ele. \u00c9 nosso trabalho na aplica\u00e7\u00e3o web servir um template \u00fanico contendo o conte\u00fado correspondente a usu\u00e1rio que est\u00e1 logado. Podemos observar, que do lado do servidor, um template gen\u00e9rico est\u00e1 colocado contendo uma variable rule . Quando este template \u00e9 renderizado no lado do cliente, uma valor apropriado \u00e9 colocado ao inv\u00e9s da rule . Esse novo valor \u00e9 de acordo com o contexto da aplica\u00e7\u00e3o. Este tipo de comportamento din\u00e2mico de um template \u00e9 chamado de dynamic templating . Muitas tecnologias server-side nos permitem implementar comportamento de template din\u00e2mico. Flask tem suporte embutido para uma engine para cria\u00e7\u00e3o de templates din\u00e2micos chamada Jinja . A Engine de Template Jinja \u00b6 Um arquivo de template Jinja \u00e9 um arquivo de texto que n\u00e3o tem uma extens\u00e3o em particular. Usaremos extens\u00e3o .html com os arquivos de template porque eles tamb\u00e9m ir\u00e3o incluir sintaxe HTML . Delimitadores \u00b6 {% ... %} \u00e9 usado para declara\u00e7\u00f5es. {{ ... }} \u00e9 usado para vari\u00e1veis. {# ... #} \u00e9 usado para coment\u00e1rios. # ... ## \u00e9 usado para declara\u00e7\u00f5es de linha. Vari\u00e1veis \u00b6 Podemos inserir vari\u00e1veis dentro de templates seguindo estes dois passos: 1 . O objeto \u00e9 fornecido com um argumento nomeado para a fun\u00e7\u00e3o render_template() . return render_template ( \"index.html\" , my_object = Object ) O valor desse objeto \u00e9 buscado dentro do template usando a sintaxe {{}} . {{ my_object }} Fluxo de controle com Jinja \u00b6 Jinja tamb\u00e9m fornece sintaxe para lidar com fluxo de controle de um aplica\u00e7\u00e3o dentro dos seus templates. Loops e condi\u00e7\u00f5es podem ser adicionadas aos templates utilizando a sintaxe pythonica fornecida pelo Jinja. Loops \u00b6 A sintaxe de for \u00e9 bem parecida com a de python. { % for elements in array % } ... { % endfor % } Condicionais \u00b6 { % if true % } { % endif % } M\u00faltiplas ramifica\u00e7\u00f5es utilizando elif e else . { % if ... % } { % elif ... % } { % else % } { % endif % } Template Inheritance \u00b6 Blocks \u00b6 Em Jinja, blocks s\u00e3o usados como placeholders e tamb\u00e9m como substitutos. No template pai , estes blocos s\u00e3o usados como placeholders . Enquanto que no template filho, eles s\u00e3o usados como substitutos. base.html \u00b6 <!DOCTYPE html> < html lang = \"en\" > < head > < link rel = \"stylesheet\" href = \"{{url_for('static', filename='format.css')}}\" /> < title > {% block title %} <!-- Placeholder for Title --> {% endblock %} - Jinja Demo </ title > {% block head %} <!-- Placeholder for Other Imports --> {% endblock %} </ head > < body > < div id = \"header\" > JINJA DEMO </ div > < div id = \"content\" > {% block content %} <!-- Placeholder for Page Content --> {% endblock %} </ div > < div id = \"footer\" > Copyright \u00a9 2019 All Rights Reserved </ div > </ body > </ html > home.html \u00b6 { % extends \"base.html\" % } < ! -- Replacement for Title --> { % block title % } Home Page { % endblock % } < ! -- Replacement for Content --> { % block content % } < h1 > Home Page </ h1 > < p > Welcome to the Jinja2 Demo .</ p > { % endblock % } about.html \u00b6 {% extends \"base.html\" %} <!-- Replacement for Title --> {% block title %} About Page {% endblock %} <!-- Replacement for Content --> {% block content %} < h1 > About Page </ h1 > < p > In this lesson we are learning about Template Inheritance </ p > {% endblock %} Formul\u00e1rios \u00b6 O pacote Flask n\u00e3o fornece uma forma de lidar com formul\u00e1rios. Existem duas formas que desenvolvedor lidam com isso: Via objeto request . Via extens\u00e3o Flask-WTF . Utilizando Request \u00b6 Por padr\u00e3o, o decorator route() serve apenas requisi\u00e7\u00f5es get . Portanto, devemos fornecer um par\u00e2metro extra, chamado methods para o decorator route() . @app . route ( \"/login\" , methods = [ \"GET\" , \"POST\" ]) login.html {% block content %} < h1 > Login </ h1 > < form action = \"{{url_for('login')}}\" method = \"POST\" > Email: < br > < input type = \"text\" name = \"email\" > < br > Password: < br > < input type = \"password\" name = \"password\" > < br >< br > < input type = \"submit\" value = \"Login\" > </ form > {% endblock %} Data Handling usando objeto Request \u00b6 Para acessar dados enviados pelo usu\u00e1rio usamos o objeto global request . from flask import request Recebendo o tipo de method de request. \u00b6 Podemos utilizar o atributo method do objeto request para determinar o m\u00e9todo de um requisi\u00e7\u00e3o entrante. @app . route ( \"/login\" , methods = [ \"GET\" , \"POST\" ]) def login (): if request . method == \"POST\" : ... else ... return render_template ( \"login.html\" ) Recebendo Form data de request \u00b6 Podemos usar o atributo form de um objeto request para obter os valores que o usu\u00e1rio submeteu. a form \u00e9 uma estrutura de dados especial chamado ImmutableMultiDict . @app . route ( \"/login\" , methods = [ \"GET\" , \"POST\" ]) def login (): if request . method == \"POST\" : email = request . form [ \"email\" ] password = request . form [ \"password\" ] ... else : ... return render_template ( \"login.html\" ) Exemplo com L\u00f3gica de Valida\u00e7\u00e3o \u00b6 from flask import Flask , render_template from flask import request app = Flask ( __name__ ) users = { \"archie.andrews@email.com\" : \"football4life\" , \"veronica.lodge@email.com\" : \"fashiondiva\" } @app . route ( \"/\" ) def home (): return render_template ( \"home.html\" ) @app . route ( \"/login\" , methods = [ \"GET\" , \"POST\" ]) def login (): if request . method == \"POST\" : email = request . form [ \"email\" ] password = request . form [ \"password\" ] if email in users and users [ email ] == password : return render_template ( \"login.html\" , message = \"Successfully Logged In\" ) return render_template ( \"login.html\" , message = \"Incorrect Email or Password\" ) return render_template ( \"login.html\" ) if __name__ == \"__main__\" : app . run ( debug = True , host = \"0.0.0.0\" , port = 3000 ) login.html {% block content %} < h1 > Login </ h1 > {% if message %} {{ message }} {% endif %} < form action = \"{{url_for('login')}}\" method = \"POST\" > Email: < br > < input type = \"text\" name = \"email\" > < br > Password: < br > < input type = \"password\" name = \"password\" > < br >< br > < input type = \"submit\" value = \"Login\" > </ form > < hr > {% endblock %} Criando Formul\u00e1rios usando Flask-WTF e WTForms \u00b6 Em nossa aplica\u00e7\u00e3o n\u00e3o t\u00ednhamos nenhuma checagem para email e password porque era um exemplo simples. Se quisermos adicionar esses checks dever\u00edamos escreve l\u00f3gica para isso no front end ou no backend (dentro da view login ). Em aplica\u00e7\u00f5es maiores esses tipos de componentes extras podem facilmente se tornar boiler-plate e dif\u00edcil de ler, para esse prop\u00f3sito algumas biblioteca tornam este processo mais f\u00e1cil. WTForms : \u00c9 um biblioteca que torna trabalhar com formul\u00e1rios f\u00e1cil. Ela lida n\u00e3o apenas com valida\u00e7\u00e3o mas tamb\u00e9m com a renderiza\u00e7\u00e3o no front-end. Adicionalmente, WTForms n\u00e3o \u00e9 limitada somente a Flask. Flask-WTF : \u00c9 uma biblioteca espec\u00edfica de Flask que integra a biblioteca WTForm com Flask . Age como um add-on de WTForms e adiciona alguns componentes extra, como seguran\u00e7a. Criando um m\u00f3dulo forms: Primeiro, separamos nosso m\u00f3dulo da aplica\u00e7\u00e3o do m\u00f3dulo dos formul\u00e1rios. Adicionaremos um novo arquivo chamado forms.py , que agir\u00e1 como um m\u00f3dulo de formul\u00e1rios. Importando FlaskForm de flask_wtf : from flask_wtf import FlaskForm # Essa classe \u00e9 uma subclasse de Form da bilioteca wtforms Criando classe LoginForm : Para cada formul\u00e1rio em nosso website, criaremos uma classe a medida em que estamos criando um formul\u00e1rio de login. Portanto, vamos nomear essa classe LoginForm . Esta classe ir\u00e1 herdar da classe FlaskForm importada previamente. class LoginForm ( FlaskForm ): ... Adicionando campos de formul\u00e1rio de wtforms O formul\u00e1rio de login anterior tinha 3 componentes: Um campo de input para email. Um campo de input para password. O campo do bot\u00e3o submit. Para todo campo poss\u00edvel, wtforms tem classes associadas. Para este exemplo particular, importaremos apenas os campos que precisamos: StringField para email. PasswordField para um password. SubmitField para o bot\u00e3o submit. from wtforms import StringField , PasswordField , SubmitField Agora vamos criar inst\u00e2ncias dessas classes como vari\u00e1veis membros da nossa classe e iremos passar os r\u00f3tulos desses campos como inputs para os construtores. class LoginForm ( FlaskForm ): email = StringField ( 'Email' ) password = PasswordField ( 'Password' ) submit = SubmitField ( 'Login' ) Adicionar validadores de campo do wtforms : Validadores s\u00e3o regras e checks que queremos aplicar aos nossos campos dentro de um formul\u00e1rio. Por exemplo, em um campo de email queremos ter certeza de que o input \u00e9 um email v\u00e1lido. Para esse prop\u00f3sito iremos usar o validador Email . from wtforms.validators import InputRequired , Email Para aplicar estes validadores aos campos, fornecemos uma lista de validadores como par\u00e2metros a eles: class LoginForm ( FlaskForm ): email = StringField ( 'Email' , validators = [ InputRequired (), Email ()]) password = PasswordField ( 'Password' , validators = [ InputRequired ()]) submit = SubmitField ( 'Login' ) InputRequired(): coloca o atributo required no HTML. Email() : checa se o input \u00e9 um email v\u00e1lido. Implementa\u00e7\u00e3o completa from flask_wtf import FlaskForm from wtforms import StringField , PasswordField , SubmitField from wtforms.validators import InputRequired , Email class LoginForm ( FlaskForm ): email = StringField ( 'Email' , validators = [ InputRequired (), Email ()]) password = PasswordField ( 'Password' , validators = [ InputRequired ()]) submit = SubmitField ( 'Login' ) Renderizando formul\u00e1rios Flask-WTF em templates \u00b6 Para renderizar um formul\u00e1rio, primeiro precisamos retornar ele de uma view para um template . Modificando a view login em app.py \u00b6 Primeiro, importamos LoginForm do m\u00f3dulo forms. from forms import LoginForm Criar um objeto de LoginForm na view login . @app . route ( \"/login\" , methods = [ \"GET\" , \"POST\" ]) def login (): form = LoginForm () Retornar o formul\u00e1rio para o template: Esse formul\u00e1rio ser\u00e1 passado como argumento para a fun\u00e7\u00e3o render_template . return render_template ( \"login.html\" , form = form ) Implementa\u00e7\u00e3o completa: from flask import Flask , render_template from forms import LoginForm app = Flask ( __name__ ) users = { \"archie.andrews@email.com\" : \"football4life\" , \"veronica.lodge@email.com\" : \"fashiondiva\" } @app . route ( \"/\" ) def home (): return render_template ( \"home.html\" ) @app . route ( \"/login\" , methods = [ \"GET\" , \"POST\" ]) def login (): form = LoginForm () return render_template ( \"login.html\" , form = form ) if __name__ == \"__main__\" : app . run ( debug = True , host = \"0.0.0.0\" , port = 3000 ) Modificando login.html \u00b6 Ao inv\u00e9s do formul\u00e1rio em HTML , renderizaremos uma inst\u00e2ncia de de form de LoginForm que passamos ao template. Adicionando campos de formul\u00e1rio ao template \u00b6 Usamos a sintaxe de Jinja para renderizar os campos: Renderizar os campo de input: {{ form.field_name }} Retornar o label do input: {{ form.field_name.label }} implementa\u00e7\u00e3o completa em login.html : {% extends \"base.html\" %} {% block title %} Login Page {% endblock %} {% block content %} < h1 > Login </ h1 > < form action = \"{{url_for('login')}}\" method = \"POST\" > {{ form.email.label }}: < br > {{ form.email }} < br > {{ form.password.label }}: < br > {{ form.password }} < br > {{ form.csrf_token }} {{ form.submit }} </ form > < hr > {% endblock %} Banco de dados com SQLAlchemy \u00b6 Flask-SQLAlchemy \u00e9 um biblioteca para integrar SQLAlchemy com Flask: from flask_sqlalchemy import SQLAlchemy Iniciando uma conex\u00e3o com o banco de dados: app = Flask(__name__) # Caminho para o banco de dados app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///example.db' # app como par\u00e2metro para o construtor db = SQLAlchemy(app) Criando Modelos \u00b6 Criando uma classe de modelo para User: class User ( db . Model ): # adicionando colunas/atributos email = db . Column ( db . String , primary_key = True , unique = True , nullable = False ) password = db . Column ( db . String , nullable = False ) O primeiro par\u00e2metro define o tipo de dado. Tipos de dados Permitidos ''' markdown 1. Integer 2. String(size) 3. Text 4. DateTime 5. Float 6. Boolean 7. PickleType 8. LargeBinary ''' Outros par\u00e2metros comuns: primary_key : Se True , indica a chave prim\u00e1ria da tabela. nullable : Se False , \u00e9 obrigat\u00f3rio dar um valor para essa coluna. unique : Se True , ent\u00e3o todos os valores para essa coluna devem ser \u00fanicos. index : Se True , indica que a coluna ser\u00e1 indexada. Criando um tabela \u00b6 O comando abaixo cria uma tabela no banco de dados com os modelos constru\u00eddos. db.create_all() Relacionamento um Um-Para-Muitos \u00b6 O c\u00f3digo abaixo cria um relacionamento entre Employee e Department class Employee ( db . Model ): employee_id = db . Column ( db . Integer , primary_key = True ) first_name = db . Column ( db . String ( 50 ), nullable = False ) last_name = db . Column ( db . String ( 50 ), nullable = False ) department_name = db . Column ( db . String , db . ForeignKey ( 'department.name' ), nullable = False ) class Department ( db . Model ): name = db . Column ( db . String ( 50 ), primary_key = True , nullable = False ) location = db . Column ( db . String ( 120 ), nullable = False ) employees = db . relationship ( 'Employee' , backref = 'department' ) class Project ( db . Model ): project_id = db . Column ( db . Integer , primary_key = True , nullable = False ) name = db . Column ( db . String ( 100 ), nullable = False ) Pygal em Flask \u00b6 @app . route ( '/charts/line.svg' ) def line_route (): chart = pygal . Line () ... return chart . render_response ()","title":"Flask"},{"location":"Flask/#introducao","text":"Flask \u00e9 um framework de desenvolvimento web desenvolvido em Python. \u00c9 f\u00e1cil de aprender e de usar. \"Begginer-friendly\" porque n\u00e3o usa c\u00f3digos que devem ser sempre copiados ou depend\u00eancias, o que pode distrair da fun\u00e7\u00e3o prim\u00e1ria da aplica\u00e7\u00e3o.","title":"Introdu\u00e7\u00e3o"},{"location":"Flask/#features-do-flask","text":"Fornece um servidor de desenvolvimento e um debugger. Usa templates Jinja2. Compat\u00edvel com WSGI 1.0. Fornece suporte integrado para testes unit\u00e1rios. Muitas extens\u00f5es dispon\u00edveis.","title":"Features do Flask"},{"location":"Flask/#micro-framework","text":"Oposto a fullstack framework, que tamb\u00e9m oferecem m\u00f3dulos adicionais features como autentica\u00e7\u00e3o, banco de dados ORM, valida\u00e7\u00e3o de input e sanitiza\u00e7\u00e3o, etc... Flask \u00e9 conhecido como um micro-framework porque \u00e9 leve e apenas fornece componentes que s\u00e3o essenciais, como routing, request, handling, sessions . Para outras funcionalidades o desenvolvedor deve escrever m\u00f3dulos customizados ou usar uma extens\u00e3o. Essa abordagem evita boilerplate code.","title":"Micro-framework"},{"location":"Flask/#o-modelo-arquitetural-cliente-servidor","text":"Cliente : Enviar requisi\u00e7\u00e3o para os servidores e enviar de volta os dados necess\u00e1rios. Servidor : Espera por requisi\u00e7\u00f5es dos clientes e responde a elas. O servidor responde a essas requisi\u00e7\u00f5es e envia a informa\u00e7\u00e3o que o cliente pediu.","title":"O Modelo Arquitetural Cliente-Servidor"},{"location":"Flask/#comunicacao-cliente-servidor","text":"Atrav\u00e9s de m\u00faltiplos protocolos diferentes. Em nosso contexto, HTTP ou HTTPS s\u00e3o usados. M\u00e9todos HTTP: GET POST PUT DELETE","title":"Comunica\u00e7\u00e3o cliente servidor"},{"location":"Flask/#uma-aplicacao-flask-como-um-servidor","text":"A aplica\u00e7\u00e3o Flask aqui ser\u00e1 do lado servidor. o Browser agir\u00e1 como cliente mandando requisi\u00e7\u00f5es para nossa aplica\u00e7\u00e3o web. Ent\u00e3o a aplica\u00e7\u00e3o enviar\u00e1 a resposta apropriada.","title":"Uma aplica\u00e7\u00e3o Flask como um servidor"},{"location":"Flask/#arquitetura-model-template-view-mtv","text":"A arquitetura MTV \u00e9 uma varia\u00e7\u00e3o da arquitetura do MVC ( Model-View-Controler ). A arquitetura MVC \u00e9 um padr\u00e3o arquitetural de software no qual a l\u00f3gica da aplica\u00e7\u00e3o \u00e9 dividida em 3 componentes na base da funcionalidade: Models Views Controllers \u00c9 usado n\u00e3o apenas para aplica\u00e7\u00f5es Desktop como tamb\u00e9m para Web e Mobile.","title":"Arquitetura Model-Template-View (MTV)"},{"location":"Flask/#componentes-da-arquitetura-mvc","text":"Models Models representam como os dados s\u00e3o armazenados no banco de dados. Cont\u00e9m todas as defini\u00e7\u00f5es de dados para a aplica\u00e7\u00e3o (o schema). Views Views s\u00e3o componentes que s\u00e3o vis\u00edveis ao usu\u00e1rio, como um output ou um Graphical User Interface (GUI). Controllers Controllers s\u00e3o componentes que agem como uma interface entre models e views . O controller interpreta as intera\u00e7\u00f5es do usu\u00e1rio (inputs) e executa tarefas nos models antes de retornar os dados apropriados atrav\u00e9s dos views.","title":"Componentes da Arquitetura MVC"},{"location":"Flask/#mtv","text":"A arquitetura MTV \u00e9 uma leve varia\u00e7\u00e3o da MVC . Por si s\u00f3, Flask \u00e9 um micro framwork e n\u00e3o cont\u00e9m suporte built-in para nenhum framework arquitetural. Entretanto, programadores que usam Flask t\u00eam a arquitetura MTV porque outro framework de desenvolvimento web baseado em Python, chamado Django a introduziu. Abaixo, uma compara\u00e7\u00e3o grosseira entre MVC e MTV:","title":"MTV"},{"location":"Flask/#wsgi-e-jinja2","text":"","title":"WSGI e Jinja2"},{"location":"Flask/#web-server-gateway-interface-wsgi","text":"WSGI \u00e9 um padr\u00e3o que descreve as especifica\u00e7\u00f5es concernentes \u00e0 comunica\u00e7\u00e3o entre um servidor web e uma aplica\u00e7\u00e3o cliente. Os detalhes desse padr\u00e3o est\u00e3o presentes na PEP33. Alguns benef\u00edcios do WSGI: Flexibilidade com os componentes da aplica\u00e7\u00e3o. Interoperabilidade entre diferentes frameworks Python. Escalabilidade da aplica\u00e7\u00e3o com o aumento de usu\u00e1rios. Efici\u00eancia em termos de velocidade de desenvolvimento. N\u00e3o precisamos nos preocupar com detalhes internos do WSGI porque o modulo Flask lida com isso.","title":"Web Server Gateway Interface (WSGI)"},{"location":"Flask/#a-linguagem-de-template-jinja","text":"Jinja \u00e9 uma linguagem de template usada em Python. Podemos renderizar conte\u00fado din\u00e2mico em HTML usando Jinja.","title":"A linguagem de template Jinja"},{"location":"Flask/#hello-world","text":"A aplica\u00e7\u00e3o mais simples em Flask pode ser feita usando apenas um script. Chamaremos de app.py . O programa ser\u00e1 dividido em passos.","title":"Hello World!"},{"location":"Flask/#rotas-url-e-views","text":"A homepage de um website pode ser facilmente achada na URL hostname seguida de / , /home , /index ou algo auto explicativo. Estes tipos de URLs permitem que os usu\u00e1rios lembrem da URL e acessem facilmente. Seria inesperado se uma homepage fosse em uma URL aleat\u00f3ria como /39283@&3911 ou /more_eggs . Flask nos permite usar o decorator route() para vincular uma URL significativa a cada fun\u00e7\u00e3o view que criarmos.","title":"Rotas URL e Views"},{"location":"Flask/#o-decorator-route","text":"O decorator route leva os seguintes par\u00e2metros: rule : representa a regra de URL que \u00e9 passada como string ao decorador. endpoint (n\u00e3o necess\u00e1rio): \u00c9 o nome da fun\u00e7\u00e3o de view que \u00e9 vinculada a rota URL. options (n\u00e3o necess\u00e1rio): Par\u00e2metro opcional.","title":"O decorator route()"},{"location":"Flask/#static-routing","text":"Em roteamento est\u00e1tico, especificamos uma string URL constante como uma regra para o decorator route() . Na aplica\u00e7\u00e3o abaixo especificamos duas rotas est\u00e1ticas tendo URLs / e educative , respectivamente. Nota : A rule \u00e9 uma string case-sensitive. Portanto, educative e Educative s\u00e3o URLs totalmente diferentes.","title":"Static Routing"},{"location":"Flask/#um-exemplo-usando-rotas-url-estaticas","text":"from flask import Flask , render_template app = Flask ( __name__ ) @app . route ( \"/\" ) def home (): return \"Welcome to the HomePage!\" @app . route ( \"/educative\" ) def learn (): return \"Happy Learning at Educative!\" if __name__ == \"__main__\" : app . run ( debug = True , host = \"0.0.0.0\" , port = 3000 )","title":"Um Exemplo usando rotas URL est\u00e1ticas"},{"location":"Flask/#dynamic-routing","text":"Em roteamento din\u00e2mico, o par\u00e2metro rule n\u00e3o \u00e9 uma string constante e sim uma vari\u00e1vel .","title":"Dynamic Routing"},{"location":"Flask/#converter","text":"No exemplo anterior, a vari\u00e1vel my_name foi extra\u00edda da URL e foi convertida em uma string e passada para a fun\u00e7\u00e3o greetings() para ser usada. Este \u00e9 o comportamento padr\u00e3o do converter . @app . route ( '/square/<int:number>' ) def show_square ( number ): \"\"\"View that shows the square of the number passed by URL\"\"\" return \"Square of \" + str ( number ) + \" is: \" + str ( number * number )","title":"Converter"},{"location":"Flask/#como-usar-templates-html","text":"","title":"Como usar Templates HTML"},{"location":"Flask/#templates-estaticos","text":"S\u00e3o arquivos HTML que permanecem constantes. De fato, arquivos HTML padr\u00e3o s\u00e3o est\u00e1ticos por natureza. Sempre que o mesmo arquivo \u00e9 renderizado, ele mostra o mesmo output, a menos que o arquivo seja alterado. At\u00e9 agora, estamos retornando apenas uma string de uma fun\u00e7\u00e3o view. Mas em uma aplica\u00e7\u00e3o do mundo real, esperamos que um arquivo HTML seja retornado e renderizado no tela do browser.","title":"Templates Est\u00e1ticos"},{"location":"Flask/#renderizando-templates-html","text":"HTML pode ser renderizado com Flask usando dois m\u00e9todos.","title":"Renderizando templates HTML"},{"location":"Flask/#uma-string","text":"Podemos utilizar HTML como uma string em uma fun\u00e7\u00e3o view. from flask import Flask app = Flask ( __name__ ) @app . route ( \"/\" ) def home (): return \"<h1>Welcome to the HomePage!</h1>\" if __name__ == \"__main__\" : app . run ( debug = True , host = \"0.0.0.0\" , port = 3000 )","title":"Uma String"},{"location":"Flask/#estrategias-de-estrutura-de-arquivos","text":"O framework Flask procura pelos arquivos de template HTML dentro de um diret\u00f3rio nomeado \\templates . Este diret\u00f3rio deve ser posto de forma que Flask possa encontrar.","title":"Estrat\u00e9gias de estrutura de arquivos"},{"location":"Flask/#arquivos-estaticos","text":"","title":"Arquivos Est\u00e1ticos"},{"location":"Flask/#como-servimos-arquivos-estaticos","text":"Arquivos est\u00e1ticos (ou assets), s\u00e3o arquivos que o servidor manda para o cliente \"como eles s\u00e3o\", sem qualquer interven\u00e7\u00e3o. Por exemplo, qualquer arquivo css , ou JavaScript que podemos ter em nosso website s\u00e3o enviados para o cliente sem qualquer modifica\u00e7\u00e3o.","title":"Como Servimos Arquivos Est\u00e1ticos?"},{"location":"Flask/#passos-para-servir-arquivos-estaticos","text":"Os passos a seguir s\u00e3o necess\u00e1rios para hospedar um asset est\u00e1tico.","title":"Passos para servir Arquivos Est\u00e1ticos"},{"location":"Flask/#templates-dinamicos","text":"","title":"Templates Din\u00e2micos"},{"location":"Flask/#templates-jinja2","text":"Considere que estamos fazendo uma aplica\u00e7\u00e3o com m\u00faltiplos usu\u00e1rios, tal como uma rede social, cada usu\u00e1rio ter\u00e1 um perfil \u00fanico com informa\u00e7\u00f5es \u00fanicas associadas a ele. \u00c9 nosso trabalho na aplica\u00e7\u00e3o web servir um template \u00fanico contendo o conte\u00fado correspondente a usu\u00e1rio que est\u00e1 logado. Podemos observar, que do lado do servidor, um template gen\u00e9rico est\u00e1 colocado contendo uma variable rule . Quando este template \u00e9 renderizado no lado do cliente, uma valor apropriado \u00e9 colocado ao inv\u00e9s da rule . Esse novo valor \u00e9 de acordo com o contexto da aplica\u00e7\u00e3o. Este tipo de comportamento din\u00e2mico de um template \u00e9 chamado de dynamic templating . Muitas tecnologias server-side nos permitem implementar comportamento de template din\u00e2mico. Flask tem suporte embutido para uma engine para cria\u00e7\u00e3o de templates din\u00e2micos chamada Jinja .","title":"Templates Jinja2"},{"location":"Flask/#template-inheritance","text":"","title":"Template Inheritance"},{"location":"Flask/#formularios","text":"O pacote Flask n\u00e3o fornece uma forma de lidar com formul\u00e1rios. Existem duas formas que desenvolvedor lidam com isso: Via objeto request . Via extens\u00e3o Flask-WTF .","title":"Formul\u00e1rios"},{"location":"Flask/#utilizando-request","text":"Por padr\u00e3o, o decorator route() serve apenas requisi\u00e7\u00f5es get . Portanto, devemos fornecer um par\u00e2metro extra, chamado methods para o decorator route() . @app . route ( \"/login\" , methods = [ \"GET\" , \"POST\" ]) login.html {% block content %} < h1 > Login </ h1 > < form action = \"{{url_for('login')}}\" method = \"POST\" > Email: < br > < input type = \"text\" name = \"email\" > < br > Password: < br > < input type = \"password\" name = \"password\" > < br >< br > < input type = \"submit\" value = \"Login\" > </ form > {% endblock %}","title":"Utilizando Request"},{"location":"Flask/#data-handling-usando-objeto-request","text":"Para acessar dados enviados pelo usu\u00e1rio usamos o objeto global request . from flask import request","title":"Data Handling usando objeto Request"},{"location":"Flask/#recebendo-o-tipo-de-method-de-request","text":"Podemos utilizar o atributo method do objeto request para determinar o m\u00e9todo de um requisi\u00e7\u00e3o entrante. @app . route ( \"/login\" , methods = [ \"GET\" , \"POST\" ]) def login (): if request . method == \"POST\" : ... else ... return render_template ( \"login.html\" )","title":"Recebendo o tipo de method de request."},{"location":"Flask/#recebendo-form-data-de-request","text":"Podemos usar o atributo form de um objeto request para obter os valores que o usu\u00e1rio submeteu. a form \u00e9 uma estrutura de dados especial chamado ImmutableMultiDict . @app . route ( \"/login\" , methods = [ \"GET\" , \"POST\" ]) def login (): if request . method == \"POST\" : email = request . form [ \"email\" ] password = request . form [ \"password\" ] ... else : ... return render_template ( \"login.html\" )","title":"Recebendo Form data de request"},{"location":"Flask/#criando-formularios-usando-flask-wtf-e-wtforms","text":"Em nossa aplica\u00e7\u00e3o n\u00e3o t\u00ednhamos nenhuma checagem para email e password porque era um exemplo simples. Se quisermos adicionar esses checks dever\u00edamos escreve l\u00f3gica para isso no front end ou no backend (dentro da view login ). Em aplica\u00e7\u00f5es maiores esses tipos de componentes extras podem facilmente se tornar boiler-plate e dif\u00edcil de ler, para esse prop\u00f3sito algumas biblioteca tornam este processo mais f\u00e1cil. WTForms : \u00c9 um biblioteca que torna trabalhar com formul\u00e1rios f\u00e1cil. Ela lida n\u00e3o apenas com valida\u00e7\u00e3o mas tamb\u00e9m com a renderiza\u00e7\u00e3o no front-end. Adicionalmente, WTForms n\u00e3o \u00e9 limitada somente a Flask. Flask-WTF : \u00c9 uma biblioteca espec\u00edfica de Flask que integra a biblioteca WTForm com Flask . Age como um add-on de WTForms e adiciona alguns componentes extra, como seguran\u00e7a. Criando um m\u00f3dulo forms: Primeiro, separamos nosso m\u00f3dulo da aplica\u00e7\u00e3o do m\u00f3dulo dos formul\u00e1rios. Adicionaremos um novo arquivo chamado forms.py , que agir\u00e1 como um m\u00f3dulo de formul\u00e1rios. Importando FlaskForm de flask_wtf : from flask_wtf import FlaskForm # Essa classe \u00e9 uma subclasse de Form da bilioteca wtforms Criando classe LoginForm : Para cada formul\u00e1rio em nosso website, criaremos uma classe a medida em que estamos criando um formul\u00e1rio de login. Portanto, vamos nomear essa classe LoginForm . Esta classe ir\u00e1 herdar da classe FlaskForm importada previamente. class LoginForm ( FlaskForm ): ... Adicionando campos de formul\u00e1rio de wtforms O formul\u00e1rio de login anterior tinha 3 componentes: Um campo de input para email. Um campo de input para password. O campo do bot\u00e3o submit. Para todo campo poss\u00edvel, wtforms tem classes associadas. Para este exemplo particular, importaremos apenas os campos que precisamos: StringField para email. PasswordField para um password. SubmitField para o bot\u00e3o submit. from wtforms import StringField , PasswordField , SubmitField Agora vamos criar inst\u00e2ncias dessas classes como vari\u00e1veis membros da nossa classe e iremos passar os r\u00f3tulos desses campos como inputs para os construtores. class LoginForm ( FlaskForm ): email = StringField ( 'Email' ) password = PasswordField ( 'Password' ) submit = SubmitField ( 'Login' ) Adicionar validadores de campo do wtforms : Validadores s\u00e3o regras e checks que queremos aplicar aos nossos campos dentro de um formul\u00e1rio. Por exemplo, em um campo de email queremos ter certeza de que o input \u00e9 um email v\u00e1lido. Para esse prop\u00f3sito iremos usar o validador Email . from wtforms.validators import InputRequired , Email Para aplicar estes validadores aos campos, fornecemos uma lista de validadores como par\u00e2metros a eles: class LoginForm ( FlaskForm ): email = StringField ( 'Email' , validators = [ InputRequired (), Email ()]) password = PasswordField ( 'Password' , validators = [ InputRequired ()]) submit = SubmitField ( 'Login' ) InputRequired(): coloca o atributo required no HTML. Email() : checa se o input \u00e9 um email v\u00e1lido. Implementa\u00e7\u00e3o completa from flask_wtf import FlaskForm from wtforms import StringField , PasswordField , SubmitField from wtforms.validators import InputRequired , Email class LoginForm ( FlaskForm ): email = StringField ( 'Email' , validators = [ InputRequired (), Email ()]) password = PasswordField ( 'Password' , validators = [ InputRequired ()]) submit = SubmitField ( 'Login' )","title":"Criando Formul\u00e1rios usando Flask-WTF e WTForms"},{"location":"Flask/#renderizando-formularios-flask-wtf-em-templates","text":"Para renderizar um formul\u00e1rio, primeiro precisamos retornar ele de uma view para um template .","title":"Renderizando formul\u00e1rios Flask-WTF em templates"},{"location":"Flask/#banco-de-dados-com-sqlalchemy","text":"Flask-SQLAlchemy \u00e9 um biblioteca para integrar SQLAlchemy com Flask: from flask_sqlalchemy import SQLAlchemy Iniciando uma conex\u00e3o com o banco de dados: app = Flask(__name__) # Caminho para o banco de dados app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///example.db' # app como par\u00e2metro para o construtor db = SQLAlchemy(app)","title":"Banco de dados com SQLAlchemy"},{"location":"Flask/#criando-modelos","text":"Criando uma classe de modelo para User: class User ( db . Model ): # adicionando colunas/atributos email = db . Column ( db . String , primary_key = True , unique = True , nullable = False ) password = db . Column ( db . String , nullable = False ) O primeiro par\u00e2metro define o tipo de dado. Tipos de dados Permitidos ''' markdown 1. Integer 2. String(size) 3. Text 4. DateTime 5. Float 6. Boolean 7. PickleType 8. LargeBinary ''' Outros par\u00e2metros comuns: primary_key : Se True , indica a chave prim\u00e1ria da tabela. nullable : Se False , \u00e9 obrigat\u00f3rio dar um valor para essa coluna. unique : Se True , ent\u00e3o todos os valores para essa coluna devem ser \u00fanicos. index : Se True , indica que a coluna ser\u00e1 indexada.","title":"Criando Modelos"},{"location":"Flask/#relacionamento-um-um-para-muitos","text":"O c\u00f3digo abaixo cria um relacionamento entre Employee e Department class Employee ( db . Model ): employee_id = db . Column ( db . Integer , primary_key = True ) first_name = db . Column ( db . String ( 50 ), nullable = False ) last_name = db . Column ( db . String ( 50 ), nullable = False ) department_name = db . Column ( db . String , db . ForeignKey ( 'department.name' ), nullable = False ) class Department ( db . Model ): name = db . Column ( db . String ( 50 ), primary_key = True , nullable = False ) location = db . Column ( db . String ( 120 ), nullable = False ) employees = db . relationship ( 'Employee' , backref = 'department' ) class Project ( db . Model ): project_id = db . Column ( db . Integer , primary_key = True , nullable = False ) name = db . Column ( db . String ( 100 ), nullable = False )","title":"Relacionamento um Um-Para-Muitos"},{"location":"Flask/#pygal-em-flask","text":"@app . route ( '/charts/line.svg' ) def line_route (): chart = pygal . Line () ... return chart . render_response ()","title":"Pygal em Flask"},{"location":"Lan%C3%A7andoWebsite/","text":"Introdu\u00e7\u00e3o \u00b6 Localhost \u00b6 O termo \"localhost\" se refere ao endere\u00e7o de IP padr\u00e3o do computador. Localhost (Loopback IP Adress) \u00c9 geralmente usado para hospedar um website no endere\u00e7o 127.0.0.1 que \u00e9 acess\u00edvel apenas no seu sistema. Ele nos permite testar e otimizar o website at\u00e9 que todos os bugs estejam consertados, o que nos d\u00e1 o benef\u00edcio de pagar apenas quando o site estiver 100% pronto para ser hospedado em um servidor web. M\u00e9todos para construir um Website \u00b6 Criar o site do zero em um localhost usando qualquer tecnologia de desenvolvimento web e ent\u00e3o: Comprar um dom\u00ednio e um servi\u00e7o de hospedagem na web separadamente. Comprar um dom\u00ednio e um servi\u00e7o de hospedagem na web separadamente. Comprar tudo em um pacote configurando o Website usando um criador de websites . Tr\u00eas elementos s\u00e3o necess\u00e1rios para colocar um site online: Dom\u00ednio DNS Servi\u00e7os de Hospedagem Web Passos para lan\u00e7ar um Website: Registrar um Nome de Dom\u00ednio Achar um servi\u00e7o de hospedagem Publicar o website Teste e Manuten\u00e7\u00e3o SEO e Web Analytics Nome do Dom\u00ednio \u00b6 O nome do dom\u00ednio \u00e9 um endere\u00e7o \u00fanico (URL) que o usu\u00e1rio dever\u00e1 digitar para visitar o site. Nomes de dom\u00ednio s\u00e3o utilizados no lugar de endere\u00e7os de IP porque s\u00e3o mais f\u00e1ceis de lembrar do que um n\u00famero de IP. Um URL consiste basicamente de 4 partes: Dom\u00ednio de Segundo N\u00edvel: Usualmente o nome verdadeiro do website. Dom\u00ednio de Topo: A \u00faltima parte que segue ap\u00f3s o nome Subdom\u00ednio: A parte que vem antes do dom\u00ednio de segundo n\u00edvel Protocolo: HTTP ou HTTPS DNS \u00b6 DNS (Domain Name Server) mapeia a URL para o real endere\u00e7o de IP. Ele \u00e9 formado por um cojunto de registro de configura\u00e7\u00f5es , cada registro aponta para uma hospedagem na web. Elementos do DNS: Um registro : Este registro aponto para o endere\u00e7o de IP do website. Uma vez queo dom\u00ednio est\u00e1 apontando para o registro correto ent\u00e3o podemos ser direcionados para a hospedagem web correta. Registro mx : Este registro aponta os emails que v\u00e3o para o seu dome de dom\u00ednio para o servi\u00e7o de hospedagem e de email. Hospedagem Web \u00b6 Os arquivos do website s\u00e3o armazenados no servidor de hospedagem. Existe uma grande variedade de servi\u00e7os de hospedagem web dispon\u00edveis. Quando acessamos uma URL, a requisi\u00e7\u00e3o vai para o servidor DNS que retorna o endere\u00e7o de IP, essa requisi\u00e7\u00e3o ent\u00e3o \u00e9 feita para o servidor de hospedagem web nesse endere\u00e7o e ent\u00e3o o servidor manda a resposta. Registrador de Nome de Dom\u00ednio \u00b6 \u00c9 preciso de um registrador de nome de dom\u00ednio para comprar um dom\u00ednio para um website. Todos os registradores s\u00e3o aprovados pelo ICANN (a organiza\u00e7\u00e3o sem fins lucrativos que administra o sistema de nome de dom\u00ednio). A maioria dos Registradores tem um conjunto similar de caracter\u00edsticas e tamb\u00e9m desvantagens. Existem centenas de Registradores dispon\u00edveis na internet hoje em dia, os mais populares s\u00e3o: GoDaddy Hover Domain.com Bluehost Hostgator Namecheap Como Escolher? \u00b6 Pre\u00e7o \u00b6 Os valores geralmente s\u00e3o cobrados anualmente ou at\u00e9 em intervalos de mais de um ano. Se n\u00e3o houver renova\u00e7\u00e3o autom\u00e1tica, corre o risco de algu\u00e9m comprar o dom\u00ednio. Suporte ao Consumidor \u00b6 Alguns registradores podem ser baratos mas oferecer um p\u00e9ssimo suporte, o que causar\u00e1 problemas a longo prazo. Features adicionais \u00b6 Se seguram dom\u00ednio ap\u00f3s expira\u00e7\u00e3o. Se permitem compra de certificados. Se permitem transfer\u00eancia de dom\u00ednio. Passos para Registrar um nome de dom\u00ednio. \u00b6 Escolher um nome de dom\u00ednio \u00b6 Sufixo Uso .com Uso comercial .biz Para uso em neg\u00f3cios .net Alternativa para .com .org Para organiza\u00e7\u00f5es sem fins lucrativos .edu Para institutos educacionais Tamb\u00e9m existem C\u00f3digo de pa\u00eds em adi\u00e7\u00e3o a esses dom\u00ednios, como: .br , .uk , .de . Checar a disponibilidade do nome \u00b6 Usar um motor de busca como DomainTools. Registrar o nome do dom\u00ednio com um registrador de dom\u00ednios \u00b6 As taxas para registrar e renovar o dom\u00ednio anualmente s\u00e3o por volta de 10 a 15 d\u00f3lares. Servi\u00e7o de Hospedagem \u00b6 Um servi\u00e7o de hospedagem armazena o site em um servidor e o publica online para acesso p\u00fablico. Podemos hospedar um site por conta pr\u00f3pria, mas precisar\u00edamos de um servidor web poderoso para lidar com o tr\u00e1fego de usu\u00e1rios. Tipos de Hospedagem \u00b6 Servidores Dedicados \u00b6 Um servidor dedicado aloca todos os seus recursos para hospedar apenas nosso website. Nunca precisamos compartilhar o poder de computa\u00e7\u00e3o do servidor com mais algu\u00e9m. Podendo at\u00e9 ser usado para gerenciar m\u00faltiplos sites e softwares. Este \u00e9 o tipo mais caro de servidor, com valores mensais variando de $50 a $100. Bluehost and HostGator s\u00e3o servi\u00e7os de hospedagem populares. Hospedagem Gerenciada \u00b6 Hospedagem gerenciada \u00e9 uma subcategoria de servidores dedicados onde o provedor do servi\u00e7o administra o servidor para n\u00f3s. O que garante uma maior seguran\u00e7a e reduz a chances de falha no servidor. Mais caro . Servidor Privado Virtual (VPS) \u00b6 Um servidor que roda v\u00e1rios servidores virtuais , cada um dedicado a um website. Ainda temos a flexibilidade de usar o servidor em um ambiente privado, mas a performance n\u00e3o ser\u00e1 t\u00e3o boa quando em um servidor puramente dedicado. Um VPS t\u00edpico custa por volta de $30 por m\u00eas. Namecheap e InMotion Hosting s\u00e3o servi\u00e7os comuns. Hospedagem Compartilhada \u00b6 N\u00e3o t\u00e3o eficiente, porque os recursos s\u00e3o compartilhados, tr\u00e1fego em um site afeta os outros. Custa menos de $10 por m\u00eas. Hospedagem em Nuvem \u00b6 O desenvolvimento mais atual no mundo das hospedagens de websites. Os recursos para o website est\u00e3o divididos entre m\u00faltiplos servidores virtuais que s\u00e3o parte da nuvem. Podemos adquirir quantos servidores virtuais na nuvem quisermos e podemos ainda especificar os recursos desejados (RAM, armazenamento...). Mais protegidos contra falha do servidor, os dados podem ser movidos entre qualquer dos servidores ao redor do mundo. Em rela\u00e7\u00e3o aos custos, pagamos apenas pelo que usarmos, os custos se ajustam automaticamente \u00e0 escala de uso. Principais provedores deste servi\u00e7o: Amazon , Google e Microsoft . Utilidades Necess\u00e1rias \u00b6 O servidores que escolhermos deve ter as seguintes ferramentas acess\u00edveis: PHP, Perl, JavaScript (web development languages) File Transfer Protocol (file accessibility) .htaccess (Apache server configuration) Server Side Includes MySQL or MongoDB (database management) SSH (remote server communication) Cron (job scheduler)","title":"Publicando um Website"},{"location":"Lan%C3%A7andoWebsite/#introducao","text":"","title":"Introdu\u00e7\u00e3o"},{"location":"Lan%C3%A7andoWebsite/#localhost","text":"O termo \"localhost\" se refere ao endere\u00e7o de IP padr\u00e3o do computador. Localhost (Loopback IP Adress) \u00c9 geralmente usado para hospedar um website no endere\u00e7o 127.0.0.1 que \u00e9 acess\u00edvel apenas no seu sistema. Ele nos permite testar e otimizar o website at\u00e9 que todos os bugs estejam consertados, o que nos d\u00e1 o benef\u00edcio de pagar apenas quando o site estiver 100% pronto para ser hospedado em um servidor web.","title":"Localhost"},{"location":"Lan%C3%A7andoWebsite/#metodos-para-construir-um-website","text":"Criar o site do zero em um localhost usando qualquer tecnologia de desenvolvimento web e ent\u00e3o: Comprar um dom\u00ednio e um servi\u00e7o de hospedagem na web separadamente. Comprar um dom\u00ednio e um servi\u00e7o de hospedagem na web separadamente. Comprar tudo em um pacote configurando o Website usando um criador de websites . Tr\u00eas elementos s\u00e3o necess\u00e1rios para colocar um site online: Dom\u00ednio DNS Servi\u00e7os de Hospedagem Web Passos para lan\u00e7ar um Website: Registrar um Nome de Dom\u00ednio Achar um servi\u00e7o de hospedagem Publicar o website Teste e Manuten\u00e7\u00e3o SEO e Web Analytics","title":"M\u00e9todos para construir um Website"},{"location":"Lan%C3%A7andoWebsite/#nome-do-dominio","text":"O nome do dom\u00ednio \u00e9 um endere\u00e7o \u00fanico (URL) que o usu\u00e1rio dever\u00e1 digitar para visitar o site. Nomes de dom\u00ednio s\u00e3o utilizados no lugar de endere\u00e7os de IP porque s\u00e3o mais f\u00e1ceis de lembrar do que um n\u00famero de IP. Um URL consiste basicamente de 4 partes: Dom\u00ednio de Segundo N\u00edvel: Usualmente o nome verdadeiro do website. Dom\u00ednio de Topo: A \u00faltima parte que segue ap\u00f3s o nome Subdom\u00ednio: A parte que vem antes do dom\u00ednio de segundo n\u00edvel Protocolo: HTTP ou HTTPS","title":"Nome do Dom\u00ednio"},{"location":"Lan%C3%A7andoWebsite/#hospedagem-web","text":"Os arquivos do website s\u00e3o armazenados no servidor de hospedagem. Existe uma grande variedade de servi\u00e7os de hospedagem web dispon\u00edveis. Quando acessamos uma URL, a requisi\u00e7\u00e3o vai para o servidor DNS que retorna o endere\u00e7o de IP, essa requisi\u00e7\u00e3o ent\u00e3o \u00e9 feita para o servidor de hospedagem web nesse endere\u00e7o e ent\u00e3o o servidor manda a resposta.","title":"Hospedagem Web"},{"location":"Lan%C3%A7andoWebsite/#registrador-de-nome-de-dominio","text":"\u00c9 preciso de um registrador de nome de dom\u00ednio para comprar um dom\u00ednio para um website. Todos os registradores s\u00e3o aprovados pelo ICANN (a organiza\u00e7\u00e3o sem fins lucrativos que administra o sistema de nome de dom\u00ednio). A maioria dos Registradores tem um conjunto similar de caracter\u00edsticas e tamb\u00e9m desvantagens. Existem centenas de Registradores dispon\u00edveis na internet hoje em dia, os mais populares s\u00e3o: GoDaddy Hover Domain.com Bluehost Hostgator Namecheap","title":"Registrador de Nome de Dom\u00ednio"},{"location":"Lan%C3%A7andoWebsite/#como-escolher","text":"","title":"Como Escolher?"},{"location":"Lan%C3%A7andoWebsite/#passos-para-registrar-um-nome-de-dominio","text":"","title":"Passos para Registrar um nome de dom\u00ednio."},{"location":"Lan%C3%A7andoWebsite/#escolher-um-nome-de-dominio","text":"Sufixo Uso .com Uso comercial .biz Para uso em neg\u00f3cios .net Alternativa para .com .org Para organiza\u00e7\u00f5es sem fins lucrativos .edu Para institutos educacionais Tamb\u00e9m existem C\u00f3digo de pa\u00eds em adi\u00e7\u00e3o a esses dom\u00ednios, como: .br , .uk , .de .","title":"Escolher um nome de dom\u00ednio"},{"location":"Lan%C3%A7andoWebsite/#checar-a-disponibilidade-do-nome","text":"Usar um motor de busca como DomainTools.","title":"Checar a disponibilidade do nome"},{"location":"Lan%C3%A7andoWebsite/#registrar-o-nome-do-dominio-com-um-registrador-de-dominios","text":"As taxas para registrar e renovar o dom\u00ednio anualmente s\u00e3o por volta de 10 a 15 d\u00f3lares.","title":"Registrar o nome do dom\u00ednio com um registrador de dom\u00ednios"},{"location":"Lan%C3%A7andoWebsite/#servico-de-hospedagem","text":"Um servi\u00e7o de hospedagem armazena o site em um servidor e o publica online para acesso p\u00fablico. Podemos hospedar um site por conta pr\u00f3pria, mas precisar\u00edamos de um servidor web poderoso para lidar com o tr\u00e1fego de usu\u00e1rios.","title":"Servi\u00e7o de Hospedagem"},{"location":"Lan%C3%A7andoWebsite/#tipos-de-hospedagem","text":"","title":"Tipos de Hospedagem"},{"location":"Lan%C3%A7andoWebsite/#utilidades-necessarias","text":"O servidores que escolhermos deve ter as seguintes ferramentas acess\u00edveis: PHP, Perl, JavaScript (web development languages) File Transfer Protocol (file accessibility) .htaccess (Apache server configuration) Server Side Includes MySQL or MongoDB (database management) SSH (remote server communication) Cron (job scheduler)","title":"Utilidades Necess\u00e1rias"},{"location":"Machine%20Learning%20For%20Software%20Enginners/","text":"7 Passos do Machine Learning \u00b6 Coleta de Dados Processamento e Prepara\u00e7\u00e3o de dados Engenharia de Features Sele\u00e7\u00e3o de Modelos Treinamento de Modelos e Pipeline de Dados Valida\u00e7\u00e3o de Modelo Persist\u00eancia do Modelo Gradient Boosting com XGBoost \u00b6 XGBoost \u00e9 uma biblioteca para Gradient Boosted Decision Trees altamente eficiente utilizada para classifica\u00e7\u00e3o e regress\u00e3o. XGBoost implemente uma vers\u00e3o altamente eficiente de Gradient Boosted Trees. Os modelos do XGBoost treinam muito mais r\u00e1pido do que os modelos em scikit-learn. Em competi\u00e7\u00f5es de ci\u00eancia de dados para pequenos e m\u00e9dios conjuntos de dados, XGBoost est\u00e1 sempre os modelos com melhores resultados. Estruturas de dados B\u00e1sicas \u00b6 A estrutura de dados b\u00e1sica para XGBoost \u00e9 a DMatrix , que representa uma matriz de dados. A DMatrix pode ser constru\u00edda a partir de arrays NumPy. O c\u00f3digo abaixo criar objetos DMatrix com e sem r\u00f3tulos. import xgboost as xgb dmat1 = xgb . DMatrix ( data ) # data = np.array # com r\u00f3tulos labels = np . array ([ 0 , 1 ]) dmat2 = xgb . DMatrix ( data , label = labels ) O objeto DMatrix pode ent\u00e3o ser usado para treinar e usar um objeto Booster , que representa a Gradient Boosted Decision Tree. A fun\u00e7\u00e3o train do XGBoost nos permite treinar um Booster com um conjunto de par\u00e2metros especificado. dtrain = xgb . DMatrix ( data , label = labels ) params = { 'max_depth' : 0 , 'objective' : 'binary:logistic' , 'eval_metric' : 'logloss' } bst = xgb . train ( params , dtrain ) Lista de poss\u00edveis par\u00e2metros para Tree Booster: eta [default=0.3, alias: learning_rate ] gamma [default=0, alias: min_split_loss ] max_depth [default=6] min_child_weight [default=1] max_delta_step [default=0] subsample [default=1] sampling_method [default= uniform ] uniform gradient_based colsample_bytree , colsample_bylevel , colsample_bynode [default=1] lambda alpha tree_method sketch_eps [default=0.03] scale_pos_weight [default=1] updater refresh_leaf [default=1] process_type [default= default ] grow_policy [default= depthwise ] depthwise lossguide max_leaves [default=0] max_bin , [default=256] predictor , [default= auto ] auto cpu_predictor gpu_predictor num_parallel_tree , [default=1] monotone_constraints interaction_constraints Usando um Booster \u00b6 Depois de treinar o Booster podemos avaliar e usar para fazer predi\u00e7\u00f5es. deval = xgb . DMatrix ( eval_data , label = eval_labels ) dpred = xgb . DMatrix ( new_data ) predictions = bst . predict ( dpred ) Valida\u00e7\u00e3o Cruzada \u00b6 Escolhendo par\u00e2metros \u00b6 Como existem muitos par\u00e2metros no xgb e muitos valores poss\u00edveis para cada par\u00e2metro, geralmente \u00e9 necess\u00e1rio tunar e para isso utilizar Valida\u00e7\u00e3o Cruzada. A fun\u00e7\u00e3o cv executa valida\u00e7\u00e3o cruzada para um conjunto de par\u00e2metros em um conjunto de dados. cv_results = xgb . cv ( params , dtrain ) A sa\u00edda de cv \u00e9 um DataFrame (pandas) que cont\u00e9m os resultados de treino e teste para m\u00e9dia e desvio padr\u00e3o de cada itera\u00e7\u00e3o. O nfold padr\u00e3o \u00e9 3 e o n\u00famero de itera\u00e7\u00f5es num_boost_round padr\u00e3o \u00e9 10. cv_results = xgb . cv ( params , dtrain , num_boost_round = 5 ) Guardando Boosters \u00b6 Depois de achar os melhores par\u00e2metros para um Booster podemos salvar o modelo \u00e9 um arquivo bin\u00e1rio. Cada Booster cont\u00e9m uma fun\u00e7\u00e3o chamada save_model , que salva o arquivo bin\u00e1rio do modelo em um arquivo. bst = xgb . train ( params , dtrain ) bst . save_model ( 'model.bin' ) Podemos restaurar um Booster a partir de um arquivo bin\u00e1rio com a fun\u00e7\u00e3o load_model , mas primeiro precisamos inicializar um Booster vazio. new_bst = xgb . Booster () new_bst . load_model ( 'model.bin' ) XGBoost Classifier \u00b6 Podemos utilizar XGBoost para classifica\u00e7\u00e3o e regress\u00e3o seguindo uma API com o mesmo estilo do Scikit Learn. Para classifica\u00e7\u00e3o o modelo da API \u00e9 chamado XGBClassifier e pode ser treinado com o m\u00e9todo fit e arrays NumPy. model = xgb . XGBClassifier ( use_label_encoder = False , eval_metric = 'logloss' ) model . fit ( data , labels ) predictions = model . predict ( new_data ) A fun\u00e7\u00e3o predict do XGBClassifier retorna a predi\u00e7\u00e3o real e n\u00e3o as probabilidades. XGBoost Regressor \u00b6 Objeto XGBRegressor . model = xgb . XGBRegressor ( max_depth = 2 ) model . fit ( data , labels ) Feature Importance \u00b6 Depois do treinamento, podemos ver a import\u00e2ncia dos atributos de cada conjunto de dados utilizado a propriedade do modelo feature_importances_ . model = xgb . XGBClassifier ( objective = 'multi:softmax' , eval_metric = 'mlogloss' , use_label_encoder = False ) model . fit ( data , labels ) print ( model . feature_importances_ ) Plotando as import\u00e2ncias com a fun\u00e7\u00e3o plot_importance : model = xgb . XGBRegressor () model . fit ( data , labels ) xgb . plot_importance ( model ) plt . show () O resultado \u00e9 um gr\u00e1fico de barras dos F-scores para cada atributo. Por padr\u00e3o, a fun\u00e7\u00e3o usa feature weight como m\u00e9trica de import\u00e2ncia, que diz o qu\u00e3o frequente o atributo aparece na Boosted Decision Tree. Podemos selecionar uma m\u00e9trica diferente com o argumento importance_type : xgb . plot_importance ( model , importance_type = 'gain' ) Tunando Hiperpar\u00e2metros \u00b6 Usando a API para estilo sklearn podemos usar os modelos com a API real do sklearn. Usando GridSearchCV para tunar hiperpar\u00e2metros: model = xgb . XGBClassifier ( objective = 'binary:logistic' , eval_metric = 'logloss' , use_label_encoder = False ) params = { 'max_depth' : range ( 2 , 5 )} from sklearn.model_selection import GridSearchCV cv_model = GridSearchCV ( model , params , cv = 4 ) cv_model . fit ( data , labels ) cv_model . best_params_ [ 'max_depth' ] Par\u00e2metros comumente tunados s\u00e3o max_depth e eta .","title":"MachineLearning"},{"location":"Machine%20Learning%20For%20Software%20Enginners/#7-passos-do-machine-learning","text":"Coleta de Dados Processamento e Prepara\u00e7\u00e3o de dados Engenharia de Features Sele\u00e7\u00e3o de Modelos Treinamento de Modelos e Pipeline de Dados Valida\u00e7\u00e3o de Modelo Persist\u00eancia do Modelo","title":"7 Passos do Machine Learning"},{"location":"Machine%20Learning%20For%20Software%20Enginners/#gradient-boosting-com-xgboost","text":"XGBoost \u00e9 uma biblioteca para Gradient Boosted Decision Trees altamente eficiente utilizada para classifica\u00e7\u00e3o e regress\u00e3o. XGBoost implemente uma vers\u00e3o altamente eficiente de Gradient Boosted Trees. Os modelos do XGBoost treinam muito mais r\u00e1pido do que os modelos em scikit-learn. Em competi\u00e7\u00f5es de ci\u00eancia de dados para pequenos e m\u00e9dios conjuntos de dados, XGBoost est\u00e1 sempre os modelos com melhores resultados.","title":"Gradient Boosting com XGBoost"},{"location":"Machine%20Learning%20For%20Software%20Enginners/#estruturas-de-dados-basicas","text":"A estrutura de dados b\u00e1sica para XGBoost \u00e9 a DMatrix , que representa uma matriz de dados. A DMatrix pode ser constru\u00edda a partir de arrays NumPy. O c\u00f3digo abaixo criar objetos DMatrix com e sem r\u00f3tulos. import xgboost as xgb dmat1 = xgb . DMatrix ( data ) # data = np.array # com r\u00f3tulos labels = np . array ([ 0 , 1 ]) dmat2 = xgb . DMatrix ( data , label = labels ) O objeto DMatrix pode ent\u00e3o ser usado para treinar e usar um objeto Booster , que representa a Gradient Boosted Decision Tree. A fun\u00e7\u00e3o train do XGBoost nos permite treinar um Booster com um conjunto de par\u00e2metros especificado. dtrain = xgb . DMatrix ( data , label = labels ) params = { 'max_depth' : 0 , 'objective' : 'binary:logistic' , 'eval_metric' : 'logloss' } bst = xgb . train ( params , dtrain ) Lista de poss\u00edveis par\u00e2metros para Tree Booster: eta [default=0.3, alias: learning_rate ] gamma [default=0, alias: min_split_loss ] max_depth [default=6] min_child_weight [default=1] max_delta_step [default=0] subsample [default=1] sampling_method [default= uniform ] uniform gradient_based colsample_bytree , colsample_bylevel , colsample_bynode [default=1] lambda alpha tree_method sketch_eps [default=0.03] scale_pos_weight [default=1] updater refresh_leaf [default=1] process_type [default= default ] grow_policy [default= depthwise ] depthwise lossguide max_leaves [default=0] max_bin , [default=256] predictor , [default= auto ] auto cpu_predictor gpu_predictor num_parallel_tree , [default=1] monotone_constraints interaction_constraints","title":"Estruturas de dados B\u00e1sicas"},{"location":"Machine%20Learning%20For%20Software%20Enginners/#usando-um-booster","text":"Depois de treinar o Booster podemos avaliar e usar para fazer predi\u00e7\u00f5es. deval = xgb . DMatrix ( eval_data , label = eval_labels ) dpred = xgb . DMatrix ( new_data ) predictions = bst . predict ( dpred )","title":"Usando um Booster"},{"location":"Machine%20Learning%20For%20Software%20Enginners/#validacao-cruzada","text":"","title":"Valida\u00e7\u00e3o Cruzada"},{"location":"Machine%20Learning%20For%20Software%20Enginners/#guardando-boosters","text":"Depois de achar os melhores par\u00e2metros para um Booster podemos salvar o modelo \u00e9 um arquivo bin\u00e1rio. Cada Booster cont\u00e9m uma fun\u00e7\u00e3o chamada save_model , que salva o arquivo bin\u00e1rio do modelo em um arquivo. bst = xgb . train ( params , dtrain ) bst . save_model ( 'model.bin' ) Podemos restaurar um Booster a partir de um arquivo bin\u00e1rio com a fun\u00e7\u00e3o load_model , mas primeiro precisamos inicializar um Booster vazio. new_bst = xgb . Booster () new_bst . load_model ( 'model.bin' )","title":"Guardando Boosters"},{"location":"Machine%20Learning%20For%20Software%20Enginners/#xgboost-classifier","text":"Podemos utilizar XGBoost para classifica\u00e7\u00e3o e regress\u00e3o seguindo uma API com o mesmo estilo do Scikit Learn. Para classifica\u00e7\u00e3o o modelo da API \u00e9 chamado XGBClassifier e pode ser treinado com o m\u00e9todo fit e arrays NumPy. model = xgb . XGBClassifier ( use_label_encoder = False , eval_metric = 'logloss' ) model . fit ( data , labels ) predictions = model . predict ( new_data ) A fun\u00e7\u00e3o predict do XGBClassifier retorna a predi\u00e7\u00e3o real e n\u00e3o as probabilidades.","title":"XGBoost Classifier"},{"location":"Machine%20Learning%20For%20Software%20Enginners/#xgboost-regressor","text":"Objeto XGBRegressor . model = xgb . XGBRegressor ( max_depth = 2 ) model . fit ( data , labels )","title":"XGBoost Regressor"},{"location":"Machine%20Learning%20For%20Software%20Enginners/#feature-importance","text":"Depois do treinamento, podemos ver a import\u00e2ncia dos atributos de cada conjunto de dados utilizado a propriedade do modelo feature_importances_ . model = xgb . XGBClassifier ( objective = 'multi:softmax' , eval_metric = 'mlogloss' , use_label_encoder = False ) model . fit ( data , labels ) print ( model . feature_importances_ ) Plotando as import\u00e2ncias com a fun\u00e7\u00e3o plot_importance : model = xgb . XGBRegressor () model . fit ( data , labels ) xgb . plot_importance ( model ) plt . show () O resultado \u00e9 um gr\u00e1fico de barras dos F-scores para cada atributo. Por padr\u00e3o, a fun\u00e7\u00e3o usa feature weight como m\u00e9trica de import\u00e2ncia, que diz o qu\u00e3o frequente o atributo aparece na Boosted Decision Tree. Podemos selecionar uma m\u00e9trica diferente com o argumento importance_type : xgb . plot_importance ( model , importance_type = 'gain' )","title":"Feature Importance"},{"location":"Machine%20Learning%20For%20Software%20Enginners/#tunando-hiperparametros","text":"Usando a API para estilo sklearn podemos usar os modelos com a API real do sklearn. Usando GridSearchCV para tunar hiperpar\u00e2metros: model = xgb . XGBClassifier ( objective = 'binary:logistic' , eval_metric = 'logloss' , use_label_encoder = False ) params = { 'max_depth' : range ( 2 , 5 )} from sklearn.model_selection import GridSearchCV cv_model = GridSearchCV ( model , params , cv = 4 ) cv_model . fit ( data , labels ) cv_model . best_params_ [ 'max_depth' ] Par\u00e2metros comumente tunados s\u00e3o max_depth e eta .","title":"Tunando Hiperpar\u00e2metros"},{"location":"Mkdocs/","text":"Introdu\u00e7\u00e3o \u00b6 Refer\u00eancia r\u00e1pida para Material for MkDocs , um tema de MkDocs , um gerador de site est\u00e1ticos direcionado a documenta\u00e7\u00e3o t\u00e9cnica de projetos. No meu projeto, biblioteca mkdocs-material foi instalado no conda enviroment docs , que \u00e9 um clone do base miniconda com alguns pacotes b\u00e1sicos preciamente instalados, como python e pip. conda create --name docs --clone base conda activate docs Instala\u00e7\u00e3o \u00b6 pip install mkdocs-material ### Isso cria a seguinte estrutura: . \u251c\u2500 docs/ \u2502 \u2514\u2500 index.md \u2514\u2500 mkdocs.yml Criando um site \u00b6 No diret\u00f3rio em que est\u00e1 o projeto: mkdocs new . Configura\u00e7\u00e3o \u00b6 Instalar o tema theme : name : material Visualizar o site ao vivo \u00b6 mkdocs serve # localhost:8000 Construindo o site \u00b6 mkdocs build Publicando o site \u00b6 Criar um reposit\u00f3rio no github. Fazer o push do diret\u00f3rio do projeto. Utilizar o comando: mkdocs gh-deploy --force Customiza\u00e7\u00e3o \u00b6 CSS adicional \u00b6 Criar um novo arquivo css em stylesheets. . \u251c\u2500 docs/ \u2502 \u2514\u2500 stylesheets/ \u2502 \u2514\u2500 extra.css \u2514\u2500 mkdocs.yml Adicionar os par\u00e2metros em mkdocs.yml : extra_css : - stylesheets/extra.css JavaScript Adicional \u00b6 . \u251c\u2500 docs/ \u2502 \u2514\u2500 javascripts/ \u2502 \u2514\u2500 extra.js \u2514\u2500 mkdocs.yml Adicionar os par\u00e2metros em mkdocs.yml : extra_javascript : - javascripts/extra.js Mudar Cores \u00b6 scheme : default = Light mode slate = Dark mode theme : palette : scheme : default Cor prim\u00e1ria : red, pink, purple... theme : palette : primary : indigo Mudar fonte \u00b6 Pode ser colocada qualquer fonte do Google Fonts theme : font : text : Roboto code : Roboto Mono Mudar logo \u00b6 Criar pasta assets dentro no diret\u00f3rio com os markdowns. Colocar \u00edcone desejado dentro da pasta asset. Incluir os par\u00e2metros no mkdocs.yml : theme : logo : assets/logo.png Mudar a url para que o logo aponta: extra : homepage : https://example.com Estutura de Navega\u00e7\u00e3o \u00b6 Expandir todos os subt\u00f3picos automaticamente: theme : features : - navigation.expand Habilitar Busca \u00b6 plugins : - search : lang : pt Footer \u00b6 extra: social: - icon: fontawesome/brands/twitter link: https://twitter.com/squidfunk Admonitions \u00b6 Habilita\u00e7\u00e3o: markdown_extensions : - admonition - pymdownx.details - pymdownx.superfences Op\u00e7\u00f5es: theme : icon : admonition : note : octicons/tag-16 abstract : octicons/checklist-16 info : octicons/info-16 tip : octicons/squirrel-16 success : octicons/check-16 question : octicons/question-16 warning : octicons/alert-16 failure : octicons/x-circle-16 danger : octicons/zap-16 bug : octicons/bug-16 example : octicons/beaker-16 quote : octicons/quote-16 theme : icon : admonition : note : fontawesome/solid/sticky-note abstract : fontawesome/solid/book info : fontawesome/solid/info-circle tip : fontawesome/solid/bullhorn success : fontawesome/solid/check question : fontawesome/solid/question-circle warning : fontawesome/solid/exclamation-triangle failure : fontawesome/solid/bomb danger : fontawesome/solid/skull bug : fontawesome/solid/robot example : fontawesome/solid/flask quote : fontawesome/solid/quote-left Note Abstract Info Tip Sucess Question Warning Failure Danger Example Quote Sintaxe: Come\u00e7a com !!! seguido do quantificador de tipo , o texto vai identado por 4 espa\u00e7os na pr\u00f3xima linha . !!! note lorem ipsum dolor Mudando o t\u00edtulo: !!! note \"T\u00edtulo desejado\" lorem ipsum dolor Admonition colaps\u00e1vel: ??? note \"T\u00edtulo desejado\" lorem ipsum dolor Annotations \u00b6 Configura\u00e7\u00e3o: markdown_extensions : - attr_list - md_in_html - pymdownx.superfences Atualmente apenas para patrocinadores :/ Content tabs \u00b6 Podemos agrupar texto, c\u00f3digo e etc... markdown_extensions : - pymdownx.superfences - pymdownx.tabbed : alternate_style : true Sinxtaxe: === \"C\" ``` c #include <stdio.h> int main(void) { printf(\"Hello world!\\n\"); return 0; } C++ #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } **Aninhado com admonitions:** Example Unordered List Ordered List * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci ## Diagramas **Ativa\u00e7\u00e3o:** ```yaml markdown_extensions: - pymdownx.superfences: custom_fences: - name: mermaid class: mermaid format: !!python/name:pymdownx.superfences.fence_code_format Diagrama de fluxo: ``` mermaid graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; ``` graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; Diagrama Sequencial: ``` mermaid sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! ``` sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! Diagrama de estado: ``` mermaid stateDiagram-v2 state fork_state <<fork>> [*] --> fork_state fork_state --> State2 fork_state --> State3 state join_state <<join>> State2 --> join_state State3 --> join_state join_state --> State4 State4 --> [*] ``` stateDiagram-v2 state fork_state <<fork>> [*] --> fork_state fork_state --> State2 fork_state --> State3 state join_state <<join>> State2 --> join_state State3 --> join_state join_state --> State4 State4 --> [*] Diagrama de classe: ``` mermaid classDiagram Person <|-- Student Person <|-- Professor Person : +String name Person : +String phoneNumber Person : +String emailAddress Person: +purchaseParkingPass() Address \"1\" <-- \"0..1\" Person:lives at class Student{ +int studentNumber +int averageMark +isEligibleToEnrol() +getSeminarsTaken() } class Professor{ +int salary } class Address{ +String street +String city +String state +int postalCode +String country -validate() +outputAsLabel() } ``` classDiagram Person <|-- Student Person <|-- Professor Person : +String name Person : +String phoneNumber Person : +String emailAddress Person: +purchaseParkingPass() Address \"1\" <-- \"0..1\" Person:lives at class Student{ +int studentNumber +int averageMark +isEligibleToEnrol() +getSeminarsTaken() } class Professor{ +int salary } class Address{ +String street +String city +String state +int postalCode +String country -validate() +outputAsLabel() } Diagrama entidade relacionamento: ``` mermaid erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses ``` erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses \u00cdcones e Emojis \u00b6 Podem ser usados mais de 8000 \u00edcones e milhares de emojis j\u00e1 integrados. Ativa\u00e7\u00e3o: markdown_extensions : - attr_list - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji emoji_generator : !!python/name:materialx.emoji.to_svg :smile: :fontawesome-regular-face-laugh-wink: Imagens \u00b6 configura\u00e7\u00e3o: markdown_extensions : - attr_list - md_in_html Alinhamento: # esquerda ![Image title](https://dummyimage.com/600x400/eee/aaa){ align=left } # direita ![Image title](https://dummyimage.com/600x400/eee/aaa){ align=right } Subt\u00edtulo: <figure markdown> ![Image title](https://dummyimage.com/600x400/){ width=\"300\" } <figcaption>Image caption</figcaption> </figure> Matem\u00e1tica \u00b6 Precisamos ativar MathJax: Em docs/javascripts/mathjax.js window . MathJax = { tex : { inlineMath : [[ \"\\\\(\" , \"\\\\)\" ]], displayMath : [[ \"\\\\[\" , \"\\\\]\" ]], processEscapes : true , processEnvironments : true }, options : { ignoreHtmlClass : \".*|\" , processHtmlClass : \"arithmatex\" } }; document $ . subscribe (() => { MathJax . typesetPromise () }) Em mkdocs.yml markdown_extensions : - pymdownx.arithmatex : generic : true extra_javascript : - javascripts/mathjax.js - https://polyfill.io/v3/polyfill.min.js?features=es6 - https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js Truques \u00b6 Adicionar SVG din\u00e2mico para ser renderizado na p\u00e1gina: N\u00e3o usar como c\u00f3digo, e sim como texto bruto. <object alt=\"Browser Evolution\" data=\"../assets/browser_evolution.svg\"></object>","title":"Mkdocs"},{"location":"Mkdocs/#introducao","text":"Refer\u00eancia r\u00e1pida para Material for MkDocs , um tema de MkDocs , um gerador de site est\u00e1ticos direcionado a documenta\u00e7\u00e3o t\u00e9cnica de projetos. No meu projeto, biblioteca mkdocs-material foi instalado no conda enviroment docs , que \u00e9 um clone do base miniconda com alguns pacotes b\u00e1sicos preciamente instalados, como python e pip. conda create --name docs --clone base conda activate docs","title":"Introdu\u00e7\u00e3o"},{"location":"Mkdocs/#instalacao","text":"pip install mkdocs-material ### Isso cria a seguinte estrutura: . \u251c\u2500 docs/ \u2502 \u2514\u2500 index.md \u2514\u2500 mkdocs.yml","title":"Instala\u00e7\u00e3o"},{"location":"Mkdocs/#criando-um-site","text":"No diret\u00f3rio em que est\u00e1 o projeto: mkdocs new .","title":"Criando um site"},{"location":"Mkdocs/#configuracao","text":"Instalar o tema theme : name : material","title":"Configura\u00e7\u00e3o"},{"location":"Mkdocs/#visualizar-o-site-ao-vivo","text":"mkdocs serve # localhost:8000","title":"Visualizar o site ao vivo"},{"location":"Mkdocs/#construindo-o-site","text":"mkdocs build","title":"Construindo o site"},{"location":"Mkdocs/#publicando-o-site","text":"Criar um reposit\u00f3rio no github. Fazer o push do diret\u00f3rio do projeto. Utilizar o comando: mkdocs gh-deploy --force","title":"Publicando o site"},{"location":"Mkdocs/#customizacao","text":"","title":"Customiza\u00e7\u00e3o"},{"location":"Mkdocs/#css-adicional","text":"Criar um novo arquivo css em stylesheets. . \u251c\u2500 docs/ \u2502 \u2514\u2500 stylesheets/ \u2502 \u2514\u2500 extra.css \u2514\u2500 mkdocs.yml Adicionar os par\u00e2metros em mkdocs.yml : extra_css : - stylesheets/extra.css","title":"CSS adicional"},{"location":"Mkdocs/#javascript-adicional","text":". \u251c\u2500 docs/ \u2502 \u2514\u2500 javascripts/ \u2502 \u2514\u2500 extra.js \u2514\u2500 mkdocs.yml Adicionar os par\u00e2metros em mkdocs.yml : extra_javascript : - javascripts/extra.js","title":"JavaScript Adicional"},{"location":"Mkdocs/#mudar-cores","text":"scheme : default = Light mode slate = Dark mode theme : palette : scheme : default Cor prim\u00e1ria : red, pink, purple... theme : palette : primary : indigo","title":"Mudar Cores"},{"location":"Mkdocs/#mudar-fonte","text":"Pode ser colocada qualquer fonte do Google Fonts theme : font : text : Roboto code : Roboto Mono","title":"Mudar fonte"},{"location":"Mkdocs/#mudar-logo","text":"Criar pasta assets dentro no diret\u00f3rio com os markdowns. Colocar \u00edcone desejado dentro da pasta asset. Incluir os par\u00e2metros no mkdocs.yml : theme : logo : assets/logo.png Mudar a url para que o logo aponta: extra : homepage : https://example.com","title":"Mudar logo"},{"location":"Mkdocs/#estutura-de-navegacao","text":"Expandir todos os subt\u00f3picos automaticamente: theme : features : - navigation.expand","title":"Estutura de Navega\u00e7\u00e3o"},{"location":"Mkdocs/#habilitar-busca","text":"plugins : - search : lang : pt","title":"Habilitar Busca"},{"location":"Mkdocs/#footer","text":"extra: social: - icon: fontawesome/brands/twitter link: https://twitter.com/squidfunk","title":"Footer"},{"location":"Mkdocs/#admonitions","text":"Habilita\u00e7\u00e3o: markdown_extensions : - admonition - pymdownx.details - pymdownx.superfences Op\u00e7\u00f5es: theme : icon : admonition : note : octicons/tag-16 abstract : octicons/checklist-16 info : octicons/info-16 tip : octicons/squirrel-16 success : octicons/check-16 question : octicons/question-16 warning : octicons/alert-16 failure : octicons/x-circle-16 danger : octicons/zap-16 bug : octicons/bug-16 example : octicons/beaker-16 quote : octicons/quote-16 theme : icon : admonition : note : fontawesome/solid/sticky-note abstract : fontawesome/solid/book info : fontawesome/solid/info-circle tip : fontawesome/solid/bullhorn success : fontawesome/solid/check question : fontawesome/solid/question-circle warning : fontawesome/solid/exclamation-triangle failure : fontawesome/solid/bomb danger : fontawesome/solid/skull bug : fontawesome/solid/robot example : fontawesome/solid/flask quote : fontawesome/solid/quote-left Note Abstract Info Tip Sucess Question Warning Failure Danger Example Quote Sintaxe: Come\u00e7a com !!! seguido do quantificador de tipo , o texto vai identado por 4 espa\u00e7os na pr\u00f3xima linha . !!! note lorem ipsum dolor Mudando o t\u00edtulo: !!! note \"T\u00edtulo desejado\" lorem ipsum dolor Admonition colaps\u00e1vel: ??? note \"T\u00edtulo desejado\" lorem ipsum dolor","title":"Admonitions"},{"location":"Mkdocs/#annotations","text":"Configura\u00e7\u00e3o: markdown_extensions : - attr_list - md_in_html - pymdownx.superfences Atualmente apenas para patrocinadores :/","title":"Annotations"},{"location":"Mkdocs/#content-tabs","text":"Podemos agrupar texto, c\u00f3digo e etc... markdown_extensions : - pymdownx.superfences - pymdownx.tabbed : alternate_style : true Sinxtaxe: === \"C\" ``` c #include <stdio.h> int main(void) { printf(\"Hello world!\\n\"); return 0; } C++ #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } **Aninhado com admonitions:** Example Unordered List Ordered List * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci ## Diagramas **Ativa\u00e7\u00e3o:** ```yaml markdown_extensions: - pymdownx.superfences: custom_fences: - name: mermaid class: mermaid format: !!python/name:pymdownx.superfences.fence_code_format Diagrama de fluxo: ``` mermaid graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; ``` graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; Diagrama Sequencial: ``` mermaid sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! ``` sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! Diagrama de estado: ``` mermaid stateDiagram-v2 state fork_state <<fork>> [*] --> fork_state fork_state --> State2 fork_state --> State3 state join_state <<join>> State2 --> join_state State3 --> join_state join_state --> State4 State4 --> [*] ``` stateDiagram-v2 state fork_state <<fork>> [*] --> fork_state fork_state --> State2 fork_state --> State3 state join_state <<join>> State2 --> join_state State3 --> join_state join_state --> State4 State4 --> [*] Diagrama de classe: ``` mermaid classDiagram Person <|-- Student Person <|-- Professor Person : +String name Person : +String phoneNumber Person : +String emailAddress Person: +purchaseParkingPass() Address \"1\" <-- \"0..1\" Person:lives at class Student{ +int studentNumber +int averageMark +isEligibleToEnrol() +getSeminarsTaken() } class Professor{ +int salary } class Address{ +String street +String city +String state +int postalCode +String country -validate() +outputAsLabel() } ``` classDiagram Person <|-- Student Person <|-- Professor Person : +String name Person : +String phoneNumber Person : +String emailAddress Person: +purchaseParkingPass() Address \"1\" <-- \"0..1\" Person:lives at class Student{ +int studentNumber +int averageMark +isEligibleToEnrol() +getSeminarsTaken() } class Professor{ +int salary } class Address{ +String street +String city +String state +int postalCode +String country -validate() +outputAsLabel() } Diagrama entidade relacionamento: ``` mermaid erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses ``` erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses","title":"Content tabs"},{"location":"Mkdocs/#icones-e-emojis","text":"Podem ser usados mais de 8000 \u00edcones e milhares de emojis j\u00e1 integrados. Ativa\u00e7\u00e3o: markdown_extensions : - attr_list - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji emoji_generator : !!python/name:materialx.emoji.to_svg :smile: :fontawesome-regular-face-laugh-wink:","title":"\u00cdcones e Emojis"},{"location":"Mkdocs/#imagens","text":"configura\u00e7\u00e3o: markdown_extensions : - attr_list - md_in_html Alinhamento: # esquerda ![Image title](https://dummyimage.com/600x400/eee/aaa){ align=left } # direita ![Image title](https://dummyimage.com/600x400/eee/aaa){ align=right } Subt\u00edtulo: <figure markdown> ![Image title](https://dummyimage.com/600x400/){ width=\"300\" } <figcaption>Image caption</figcaption> </figure>","title":"Imagens"},{"location":"Mkdocs/#matematica","text":"Precisamos ativar MathJax: Em docs/javascripts/mathjax.js window . MathJax = { tex : { inlineMath : [[ \"\\\\(\" , \"\\\\)\" ]], displayMath : [[ \"\\\\[\" , \"\\\\]\" ]], processEscapes : true , processEnvironments : true }, options : { ignoreHtmlClass : \".*|\" , processHtmlClass : \"arithmatex\" } }; document $ . subscribe (() => { MathJax . typesetPromise () }) Em mkdocs.yml markdown_extensions : - pymdownx.arithmatex : generic : true extra_javascript : - javascripts/mathjax.js - https://polyfill.io/v3/polyfill.min.js?features=es6 - https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js","title":"Matem\u00e1tica"},{"location":"Mkdocs/#truques","text":"Adicionar SVG din\u00e2mico para ser renderizado na p\u00e1gina: N\u00e3o usar como c\u00f3digo, e sim como texto bruto. <object alt=\"Browser Evolution\" data=\"../assets/browser_evolution.svg\"></object>","title":"Truques"},{"location":"PyGal/","text":"In\u00edcio r\u00e1pido \u00b6 PyGal \u00e9 uma biblioteca python para cria\u00e7\u00e3o de gr\u00e1ficos din\u00e2micos em SVG. Instala\u00e7\u00e3o \u00b6 Simplesmente usar pip. $ pip install pygal Usar em Jupyter Notebooks \u00b6 from IPython.display import HTML Exemplos b\u00e1sicos \u00b6 Coisas que d\u00e3o Medo (Pesquisa elaborada pelo ser\u00edssimo Centro de Pesquisas CTPK). \u00b6 Em um Jupyter Notebook : from IPython.display import HTML bar_chart = pygal . Bar ( truncate_legend = 25 ) bar_chart . title = 'Coisas que mais d\u00e3o medo (CTPK - 2022)' bar_chart . add ( \"Barata Voadora\" , [ 30 ]) bar_chart . add ( \"Dois Caras Numa Moto\" , [ 45 ]) bar_chart . add ( \"Entrar no pr\u00f3ximo Lei\u00f3fe\" , [ 24 ]) bar_chart . add ( \"Resultado da elei\u00e7\u00e3o 2022\" , [ 83 ]) bar_chart . render_to_file ( 'coisas_que_dao_medo.svg' ) HTML ( ''' <object data=\"coisas_que_dao_medo.svg\" width=100 % he ight=100%> </object> ''' ) Com lxml instalado, o comando render_in_browser faz o Gr\u00e1fico aparecer no navegador padr\u00e3o. bar_chart . render_in_browser () Resultado: (O gr\u00e1fico gerado no notebook ser\u00e1 din\u00e2mico, ainda estou tentando descobrir como acoplar SVG din\u00e2mico neste framework para cria\u00e7\u00e3o de documenta\u00e7\u00e3o em markdown). Os componentes de um gr\u00e1fico de pygal s\u00e3o bastante intuitivos, neste Gr\u00e1fico podemos alguns dos principais elementos: A documenta\u00e7\u00e3o de pygal adota este padr\u00e3o para a nomea\u00e7\u00e3o dos objetos: tipodegr\u00e1fico_chart . Os objetos de gr\u00e1fico est\u00e3o dentro do pacote pygal e podem ser inicializados usando a sintaxe: pygal.Tipo(par\u00e2metros) , um exemplo de par\u00e2metro \u00e9 o usado truncate_legend , que usei neste gr\u00e1fico para aumentar o n\u00famero de caracteres na legenda antes que sejam truncados. chart.add usado para adicionar os elementos ao gr\u00e1fico. chart.render() m\u00e9todo para renderizar o SVG. Em um jupyter notebook precisamos utilizar display e SVG. A fun\u00e7\u00e3o chart.render_to_file('chart.svg') pode ser usada para criar um arquivo SVG que pode facilmente ser colocado na WEB como este gr\u00e1fico acima. A fun\u00e7\u00e3o HTML de IPython.display serve para renderizar HTML no IPython. Para adicionar o gr\u00e1fico com interatividade em uma p\u00e1gina html use a tag object : < object data = \"assets/browser_evolution.svg\" width = 80% height = 50% > </ object > Forma Alternativa de escrever o c\u00f3digo do gr\u00e1fico acima: # escrever uma vez import pygal as pg from IPython.display import HTML import pygal as pg def pgr ( chart_object , nome_arquivo ): \"\"\" Fun\u00e7\u00e3o para renderizar arquivos SVG criados por pygal em um jupyter notebook, ela cria uma pasta charts na pasta de trabalho salva o SVG nela e sem seguida, renderiza o SVG em um HTML usando a tag <object>, que \u00e9 a tag apropriada para SVG din\u00e2mico. args: - chart_object (um objeto de gr\u00e1fico em pygal que queremos renderizar) - nome_arquivo (o nome) return: - SVG din\u00e2mico renderizado em HTML. \"\"\" import os from IPython.display import HTML os . makedirs ( 'charts' , exist_ok = True ) chart_object . render_to_file ( f \"charts/ { nome_arquivo } .svg\" ) return HTML ( ''' <object data=\"charts/ {} .svg\" width=95 % he ight=80%> </object> ''' . format ( nome_arquivo )) # C\u00f3digo para o gr\u00e1fico interativo c = pg . Bar ( truncate_legend = 25 ) c . title = 'Coisas que mais d\u00e3o medo (CTPK - 2022)' c . add ( \"Barata Voadora\" , [ 30 ]) c . add ( \"Dois Caras Numa Moto\" , [ 45 ]) c . add ( \"Entrar no pr\u00f3ximo Lei\u00f3fe\" , [ 24 ]) c . add ( \"Resultado da elei\u00e7\u00e3o 2022\" , [ 83 ]) pgr ( c , 'medo' ) Gr\u00e1fico de linhas b\u00e1sico (documenta\u00e7\u00e3o oficial) \u00b6 line_chart = pygal . Line () line_chart . title = 'Browser usage evolution (in %)' line_chart . x_labels = map ( str , range ( 2002 , 2013 )) line_chart . add ( 'Firefox' , [ None , None , 0 , 16.6 , 25 , 31 , 36.4 , 45.5 , 46.3 , 42.8 , 37.1 ]) line_chart . add ( 'Chrome' , [ None , None , None , None , None , None , 0 , 3.9 , 10.8 , 23.8 , 35.3 ]) line_chart . add ( 'IE' , [ 85.8 , 84.6 , 84.7 , 74.5 , 66 , 58.6 , 54.7 , 44.8 , 36.2 , 26.6 , 20.1 ]) line_chart . add ( 'Others' , [ 14.2 , 15.4 , 15.3 , 8.9 , 9 , 10.4 , 8.9 , 5.8 , 6.7 , 6.8 , 7.5 ]) bar_chart . render_to_file ( 'browser_evolution.svg' ) HTML ( ''' <object data=\"browser_evolution.svg\" width=100 % he ight=100%> </object> ''' ) Resultado:","title":"PyGal"},{"location":"PyGal/#inicio-rapido","text":"PyGal \u00e9 uma biblioteca python para cria\u00e7\u00e3o de gr\u00e1ficos din\u00e2micos em SVG.","title":"In\u00edcio r\u00e1pido"},{"location":"PyGal/#instalacao","text":"Simplesmente usar pip. $ pip install pygal","title":"Instala\u00e7\u00e3o"},{"location":"PyGal/#usar-em-jupyter-notebooks","text":"from IPython.display import HTML","title":"Usar em Jupyter Notebooks"},{"location":"PyGal/#exemplos-basicos","text":"","title":"Exemplos b\u00e1sicos"},{"location":"eye_color/","text":"Introdu\u00e7\u00e3o \u00b6 E se a partir de uma amostra de DNA achado na cena de um crime os investigadores pudessem descobrir quais as caracter\u00edsticas f\u00edsicas do dono do DNA? Na verdade isto \u00e9 poss\u00edvel, o processo de prever fen\u00f3tipo a partir de informa\u00e7\u00f5es gen\u00e9ticas \u00e9 chamado de DNA Phenotyping ou Forensic DNA Phenotyping . A predi\u00e7\u00e3o de caracter\u00edsticas externamente vis\u00edveis baseada no DNA pode ajudar a pol\u00edcia a: Estreitar os caminhos de uma investiga\u00e7\u00e3o. Desvendar um crime mais r\u00e1pido, aumentando a produtividade. Diminuir os poss\u00edveis danos de um processo criminal contra uma pessoa inocente. Exemplo: A forma mais comum \u00e9: a partir da coleta de DNA, identificar algumas muta\u00e7\u00f5es chamadas SNPs. Cada SNP tem um C\u00f3digo identificador e est\u00e1 associada a um GENE. A SNP se manifesta no alelo em n\u00e3o presente: 0, Heterozigoto: 1 ou Homozigoto: 2. Com material gen\u00e9tico em m\u00e3os \u00e9 poss\u00edvel buscar por muta\u00e7\u00f5es dos genes chamadas SNPs ( Single-Nucleotide Polymorphisms ), algumas destas muta\u00e7\u00f5es podem estar associadas a Fen\u00f3tipos , como cor dos olhos, cor da pele, cor do cabelo e etc. Construindo um dataset \u00b6 Para auxiliar nesta tarefa de predizer fen\u00f3tipos baseado no material gen\u00e9tico, podem ser aplicados modelos de Aprendizado de M\u00e1quina. Para isso, s\u00e3o necess\u00e1rios... DADOS!!! E \u00e9 sobre a coleta e tratamento destes dados que se trata este trabalho. Com o advento das leis de prote\u00e7\u00f5es de dados, dados gen\u00e9ticos a n\u00edvel individual dificilmente podem ser encontrados na internet hoje em dia, bancos de dados gen\u00e9ticos tradicionais e publica\u00e7\u00f5es cient\u00edficas que disponibilizavam os dados n\u00e3o permitem mais o acesso. Uma forma de trabalhar com dados abertos e estudar rela\u00e7\u00f5es entre dados gen\u00e9ticos e fen\u00f3tipos \u00e9 a plataforma openSNP , que permite que clientes de empresas que fazem testes gen\u00e9ticos publiquem seus resultados e compartilhem ainda seus fen\u00f3tipos. Usando esta plataforma, foi poss\u00edvel baixar um grande arquivo que inclui dados gen\u00e9ticos de 6.322 usu\u00e1rios acompanhados da autodeclara\u00e7\u00e3o de seus fen\u00f3tipos. O arquivo baixado: Na plataforma, est\u00e3o cadastrados 673 fen\u00f3tipos que o usu\u00e1rio pode preencher. Dentre os arquivos disponibilizados, existe um arquivo auxiliar contendo os dados para os fen\u00f3tipos respondidos por cada usu\u00e1rio. Trabalhando com o arquivo auxiliar de Fen\u00f3tipos \u00b6 Dos 6.326 usu\u00e1rios que fizeram uploads dos gen\u00e9ticos individuais, 1.678 deles preencheram o campo para cor dos olhos. Nesta etapa foi feita a leitura do arquivo contendo os fen\u00f3tipos. Filtragem dos usu\u00e1rios que declaram a cor do olho. Agrupamento das cores do olho em categorias: Azul, Verde, Cinza: Olhos predominantemente claros. Intermedi\u00e1rios: Castanho claro, mel, avel\u00e3 (hazel). Castanho. Grava\u00e7\u00e3o do conjunto de dados processado em um arquivo auxiliar. Nesta etapa sobraram apenas 1286 usu\u00e1rios, devido ao descarte de r\u00f3tulos n\u00e3o informativos e de dados duplicados. Dicion\u00e1rio usado para mapear os dados: color_map = { \"Brown\" : \"Brown\" , \"Blue\" : \"BGG\" , \"Hazel\" : \"Int\" , \"Blue-grey\" : \"BGG\" , \"Green\" : \"BGG\" , \"Dark brown\" : \"Brown\" , \"Blue-green\" : \"BGG\" , \"Hazel (brown/green)\" : \"Int\" , \"Hazel/light brown\" : \"Int\" , \"Gray-blue\" : \"BGG\" , \"Blue-grey; broken amber collarette\" : \"BGG\" , \"hazel\" : \"Int\" , \"Dark blue\" : \"BGG\" , \"Green-hazel\" : \"Int\" , \"Green-brown\" : \"Int\" , \"brown\" : \"Brown\" , \"Green-gray\" : \"BGG\" , \"Blue-green\" : \"BGG\" , \"blue-green\" : \"BGG\" , \"blue\" : \"BGG\" , \"Blue, grey, green, changing\" : \"BGG\" , \"Blue grey\" : \"BGG\" , \"Blue with yellow parts\" : \"BGG\" , \"Blue-grey with central heterochromia\" : \"BGG\" , \"Light-mixed green\" : \"BGG\" , \"blue\" : \"BGG\" , \"blue-grey\" : \"BGG\" , \"Blue-green; amber collarette, and gray-blue ringing \" : \"BGG\" , \"Blue with a yellow ring of flecks that make my eyes look green depending on the light or my mood\" : \"BGG\" , \"Brown/black\" : \"Brown\" , \"Hazel (light brown, dark green, dark blue)\" : \"Int\" , \"Blue-green-grey\" : \"BGG\" , \"Green\" : \"BGG\" , \"Brown-amber\" : \"Int\" , \"blue, grey, green, changing\" : \"BGG\" , \"Amber\" : \"Int\" , \"Amber - (yellow/ocre brown)\" : \"Int\" , \"Hazel/Light Brown\" : \"Int\" , \"Amber - (yellow/ocre brown)\" : \"Int\" } Dataset 1 \u00b6 user_id : n\u00famero identifica\u00e7\u00e3o do usu\u00e1rio. genotype_filename : padr\u00e3o que identifica o arquivo com os dados gen\u00e9ticos do usu\u00e1rio. user_id : String contendo a cor do olho declarada pelo usu\u00e1rio. color_cat : Categorias de cor do olho, mapeada pelo dicion\u00e1rio acima. BGG: Verde, Cinza ou Azul. Int: Tons intermedi\u00e1rios. Brown: Castanho, escuro. Leitura dos SNPs dos arquivos individuais. \u00b6 Nesta etapa ser\u00e1 constru\u00eddo um conjunto de dados contendo os snps que queremos analisar e o c\u00f3digo do usu\u00e1rio para cada usu\u00e1rio. Mapeamento dataset1 ['genotype_filename'] para o nome real do arquivo. Cria\u00e7\u00e3o de um conjunto de dados auxiliar utilizando a biblioteca glob . Utiliza\u00e7\u00e3o da biblioteca snps para parsear os dados gen\u00e9ticos de cada indiv\u00edduo em um objeto pandas dataframe. Filtragem do dataframe contendo dados individuais para criar um dataframe individual apenas dos dados de interesse. Jun\u00e7\u00e3o dos dados individuais em um dataframe com todos os dados. Dataset2 \u00b6 user_id : n\u00famero identifica\u00e7\u00e3o do usu\u00e1rio. filename : string contendo o nome verdadeiro de cada arquivo individual. Lista das SNPs que queremos filtrar. \u00b6 Foram escolhidos algumas SNPs com valor preditivo para cor dos olhos segundo artigos cient\u00edficos da \u00e1rea. snps_eye_color = [ 'rs12913832' , 'rs1800407' , 'rs12896399' , 'rs16891982' , 'rs1393350' , 'rs12203592' , 'rs1129038' , 'rs116363232' , 'rs1289399' ] Ap\u00f3s a execu\u00e7\u00e3o de um fun\u00e7\u00e3o que: Passa por cada nome de arquivo, Carrega os dados individuais em um dataframe usando a biblioteca snps . Salva o valor de cada snp em um dicion\u00e1rio ou salva como \"missing\" caso n\u00e3o exista a SNP desejada. Foi criado um dataframe contendo o valor das SNPs para cada um dos usu\u00e1rios presentes no Dataset2 . Dataset3 \u00b6 user_id : n\u00famero identifica\u00e7\u00e3o do usu\u00e1rio. rs12913832 : ['GG', 'AG', 'AA', 'missing'] e assim por diante. Considera\u00e7\u00f5es \u00b6 A partir dos conjuntos de dados produzidos os podem ser analisadas correla\u00e7\u00f5es entre as SNPs e o fen\u00f3tipo desejado. Tamb\u00e9m pode ser feita a modelagem preditiva do fen\u00f3tipo, sob a \u00f3tica do aprendizado de m\u00e1quina. Os detalhes s\u00f3rdidos dessa extra\u00e7\u00e3o de dados podem ser verificados no GitHub. An\u00e1lise dos Dados \u00b6","title":"Eye Color Predicition"},{"location":"eye_color/#introducao","text":"E se a partir de uma amostra de DNA achado na cena de um crime os investigadores pudessem descobrir quais as caracter\u00edsticas f\u00edsicas do dono do DNA? Na verdade isto \u00e9 poss\u00edvel, o processo de prever fen\u00f3tipo a partir de informa\u00e7\u00f5es gen\u00e9ticas \u00e9 chamado de DNA Phenotyping ou Forensic DNA Phenotyping . A predi\u00e7\u00e3o de caracter\u00edsticas externamente vis\u00edveis baseada no DNA pode ajudar a pol\u00edcia a: Estreitar os caminhos de uma investiga\u00e7\u00e3o. Desvendar um crime mais r\u00e1pido, aumentando a produtividade. Diminuir os poss\u00edveis danos de um processo criminal contra uma pessoa inocente. Exemplo: A forma mais comum \u00e9: a partir da coleta de DNA, identificar algumas muta\u00e7\u00f5es chamadas SNPs. Cada SNP tem um C\u00f3digo identificador e est\u00e1 associada a um GENE. A SNP se manifesta no alelo em n\u00e3o presente: 0, Heterozigoto: 1 ou Homozigoto: 2. Com material gen\u00e9tico em m\u00e3os \u00e9 poss\u00edvel buscar por muta\u00e7\u00f5es dos genes chamadas SNPs ( Single-Nucleotide Polymorphisms ), algumas destas muta\u00e7\u00f5es podem estar associadas a Fen\u00f3tipos , como cor dos olhos, cor da pele, cor do cabelo e etc.","title":"Introdu\u00e7\u00e3o"},{"location":"eye_color/#construindo-um-dataset","text":"Para auxiliar nesta tarefa de predizer fen\u00f3tipos baseado no material gen\u00e9tico, podem ser aplicados modelos de Aprendizado de M\u00e1quina. Para isso, s\u00e3o necess\u00e1rios... DADOS!!! E \u00e9 sobre a coleta e tratamento destes dados que se trata este trabalho. Com o advento das leis de prote\u00e7\u00f5es de dados, dados gen\u00e9ticos a n\u00edvel individual dificilmente podem ser encontrados na internet hoje em dia, bancos de dados gen\u00e9ticos tradicionais e publica\u00e7\u00f5es cient\u00edficas que disponibilizavam os dados n\u00e3o permitem mais o acesso. Uma forma de trabalhar com dados abertos e estudar rela\u00e7\u00f5es entre dados gen\u00e9ticos e fen\u00f3tipos \u00e9 a plataforma openSNP , que permite que clientes de empresas que fazem testes gen\u00e9ticos publiquem seus resultados e compartilhem ainda seus fen\u00f3tipos. Usando esta plataforma, foi poss\u00edvel baixar um grande arquivo que inclui dados gen\u00e9ticos de 6.322 usu\u00e1rios acompanhados da autodeclara\u00e7\u00e3o de seus fen\u00f3tipos. O arquivo baixado: Na plataforma, est\u00e3o cadastrados 673 fen\u00f3tipos que o usu\u00e1rio pode preencher. Dentre os arquivos disponibilizados, existe um arquivo auxiliar contendo os dados para os fen\u00f3tipos respondidos por cada usu\u00e1rio.","title":"Construindo um dataset"},{"location":"eye_color/#trabalhando-com-o-arquivo-auxiliar-de-fenotipos","text":"Dos 6.326 usu\u00e1rios que fizeram uploads dos gen\u00e9ticos individuais, 1.678 deles preencheram o campo para cor dos olhos. Nesta etapa foi feita a leitura do arquivo contendo os fen\u00f3tipos. Filtragem dos usu\u00e1rios que declaram a cor do olho. Agrupamento das cores do olho em categorias: Azul, Verde, Cinza: Olhos predominantemente claros. Intermedi\u00e1rios: Castanho claro, mel, avel\u00e3 (hazel). Castanho. Grava\u00e7\u00e3o do conjunto de dados processado em um arquivo auxiliar. Nesta etapa sobraram apenas 1286 usu\u00e1rios, devido ao descarte de r\u00f3tulos n\u00e3o informativos e de dados duplicados. Dicion\u00e1rio usado para mapear os dados: color_map = { \"Brown\" : \"Brown\" , \"Blue\" : \"BGG\" , \"Hazel\" : \"Int\" , \"Blue-grey\" : \"BGG\" , \"Green\" : \"BGG\" , \"Dark brown\" : \"Brown\" , \"Blue-green\" : \"BGG\" , \"Hazel (brown/green)\" : \"Int\" , \"Hazel/light brown\" : \"Int\" , \"Gray-blue\" : \"BGG\" , \"Blue-grey; broken amber collarette\" : \"BGG\" , \"hazel\" : \"Int\" , \"Dark blue\" : \"BGG\" , \"Green-hazel\" : \"Int\" , \"Green-brown\" : \"Int\" , \"brown\" : \"Brown\" , \"Green-gray\" : \"BGG\" , \"Blue-green\" : \"BGG\" , \"blue-green\" : \"BGG\" , \"blue\" : \"BGG\" , \"Blue, grey, green, changing\" : \"BGG\" , \"Blue grey\" : \"BGG\" , \"Blue with yellow parts\" : \"BGG\" , \"Blue-grey with central heterochromia\" : \"BGG\" , \"Light-mixed green\" : \"BGG\" , \"blue\" : \"BGG\" , \"blue-grey\" : \"BGG\" , \"Blue-green; amber collarette, and gray-blue ringing \" : \"BGG\" , \"Blue with a yellow ring of flecks that make my eyes look green depending on the light or my mood\" : \"BGG\" , \"Brown/black\" : \"Brown\" , \"Hazel (light brown, dark green, dark blue)\" : \"Int\" , \"Blue-green-grey\" : \"BGG\" , \"Green\" : \"BGG\" , \"Brown-amber\" : \"Int\" , \"blue, grey, green, changing\" : \"BGG\" , \"Amber\" : \"Int\" , \"Amber - (yellow/ocre brown)\" : \"Int\" , \"Hazel/Light Brown\" : \"Int\" , \"Amber - (yellow/ocre brown)\" : \"Int\" }","title":"Trabalhando com o arquivo auxiliar de Fen\u00f3tipos"},{"location":"eye_color/#leitura-dos-snps-dos-arquivos-individuais","text":"Nesta etapa ser\u00e1 constru\u00eddo um conjunto de dados contendo os snps que queremos analisar e o c\u00f3digo do usu\u00e1rio para cada usu\u00e1rio. Mapeamento dataset1 ['genotype_filename'] para o nome real do arquivo. Cria\u00e7\u00e3o de um conjunto de dados auxiliar utilizando a biblioteca glob . Utiliza\u00e7\u00e3o da biblioteca snps para parsear os dados gen\u00e9ticos de cada indiv\u00edduo em um objeto pandas dataframe. Filtragem do dataframe contendo dados individuais para criar um dataframe individual apenas dos dados de interesse. Jun\u00e7\u00e3o dos dados individuais em um dataframe com todos os dados.","title":"Leitura dos SNPs dos arquivos individuais."},{"location":"eye_color/#consideracoes","text":"A partir dos conjuntos de dados produzidos os podem ser analisadas correla\u00e7\u00f5es entre as SNPs e o fen\u00f3tipo desejado. Tamb\u00e9m pode ser feita a modelagem preditiva do fen\u00f3tipo, sob a \u00f3tica do aprendizado de m\u00e1quina. Os detalhes s\u00f3rdidos dessa extra\u00e7\u00e3o de dados podem ser verificados no GitHub.","title":"Considera\u00e7\u00f5es"},{"location":"eye_color/#analise-dos-dados","text":"","title":"An\u00e1lise dos Dados"},{"location":"fundamentos_web/","text":"Aplica\u00e7\u00f5es Web e Arquitetura de Software \u00b6 Diferentes Camadas na Arquitetura de Software \u00b6 Uma camada \u00e9 como uma separa\u00e7\u00e3o l\u00f3gica e f\u00edsica dos componentes em uma aplica\u00e7\u00e3o ou servi\u00e7o. Esta separa\u00e7\u00e3o \u00e9 feita em n\u00edvel de componentes, n\u00e3o em n\u00edvel de c\u00f3digo. Aplica\u00e7\u00f5es em camada \u00fanica \u00b6 Em aplica\u00e7\u00f5es de camada \u00fanica a interface do usu\u00e1rio, o backend da l\u00f3gica do neg\u00f3cio e o banco de dados est\u00e3o na mesma m\u00e1quina. flowchart BT A[(Database)] <--> B[Server] <--> C[User Interface] Aplica\u00e7\u00f5es Desktop s\u00e3o exemplos de aplica\u00e7\u00f5es camada \u00fanica. Vantagens de Aplica\u00e7\u00f5es Camada \u00danica \u00b6 N\u00e3o h\u00e1 lat\u00eancia de conex\u00e3o, pois cada componente est\u00e1 na mesma m\u00e1quina. Aplica\u00e7\u00f5es multicamada mandam requisi\u00e7\u00f5es frequentes ao servidor, o que adiciona lat\u00eancia e reduz a velocidade no sistema, piorando a experi\u00eancia do usu\u00e1rio. Privacidade e seguran\u00e7a: Os dados do usu\u00e1rio permanecem sempre na mesma m\u00e1quina e n\u00e3o precisam ser transmitidos por rede. Desvantagens Aplica\u00e7\u00f5es Camada \u00danica \u00b6 O publicador da aplica\u00e7\u00e3o n\u00e3o tem controle sobre a aplica\u00e7\u00e3o, uma vez que o software \u00e9 entregue, n\u00e3o podem ser realizadas atualiza\u00e7\u00f5es ou manuten\u00e7\u00e3o, a menos que o cliente manualmente baixe um patch de instala\u00e7\u00e3o. O c\u00f3digo \u00e9 vulner\u00e1vel para ser mexido ou alvo de engenharia reversa, pode ser modificado ou copiado por algu\u00e9m mal intencionado. A performance da aplica\u00e7\u00e3o depende da m\u00e1quina de quem executa. Aplica\u00e7\u00f5es Camada Dupla \u00b6 Uma aplica\u00e7\u00e3o camada dupla envolve um cliente e um servidor. O cliente cont\u00e9m a interface do usu\u00e1rio com a l\u00f3gica do neg\u00f3cio em uma m\u00e1quina. Enquanto o servidor backend inclui um banco de dados rodando em uma m\u00e1quina diferente. O banco de dados \u00e9 hospedado pelo neg\u00f3cio e t\u00eam o controle sobre ele. flowchart LR A[Cliente]--\"Requisi\u00e7\u00e3o\"-----> B[Servidor Backend] B[Servidor Backend]--\"Resposta\"-----> A Exemplos de utilidade: Aplicativos de produtividade, jogos no browser. Os dados pesados s\u00e3o baixados uma vez e o servidor \u00e9 requisitado apenas para salvar o estado. Aplica\u00e7\u00f5es Tr\u00eas Camadas \u00b6 Esse tipo de aplica\u00e7\u00e3o \u00e9 bastante popular e amplamente utilizado na internet. Quase todo website simples como blogs e jornais fazem parte dessa categoria. Em aplica\u00e7\u00f5es Tr\u00eas Camada, a interface do usu\u00e1rio, a l\u00f3gica do neg\u00f3cio e o banco de dados, todos est\u00e3o em m\u00e1quinas diferentes, est\u00e3o separadas fisicamente. flowchart LR subgraph cliente direction LR a1[cliente 1] a2[cliente 2] a5[cliente 3] end cliente <--> a3 a3[Servidor] <--> a4[(Banco de Dados)] Aplica\u00e7\u00f5es N-Camadas \u00b6 Uma aplica\u00e7\u00e3o que tem mais de 3 componentes envolvidos na arquitetura. Componentes podem ser: Cach\u00ea. Mensageria. Load Balancers. Servidores de busca. Componentes para processamento de grandes quantidades de dados. Componentes rodando servi\u00e7os web, micro servi\u00e7os. Popularmente conhecidos como Sistemas distribu\u00eddos . Dois princ\u00edpios do desenvolvimento de software s\u00e3o as chaves para justificar esta arquitetura: Responsabilidade \u00fanica e Separa\u00e7\u00e3o de Conceitos . Diferen\u00e7a entre Layers e Tiers: Layers s\u00e3o em n\u00edve lde c\u00f3digo (conceitual/l\u00f3gico), enquanto tier est\u00e1 relacionado \u00e0 separa\u00e7\u00e3o f\u00edsica dos componentes. Arquitetura Web \u00b6","title":"Fundamentos Web"},{"location":"fundamentos_web/#aplicacoes-web-e-arquitetura-de-software","text":"","title":"Aplica\u00e7\u00f5es Web e Arquitetura de Software"},{"location":"fundamentos_web/#diferentes-camadas-na-arquitetura-de-software","text":"Uma camada \u00e9 como uma separa\u00e7\u00e3o l\u00f3gica e f\u00edsica dos componentes em uma aplica\u00e7\u00e3o ou servi\u00e7o. Esta separa\u00e7\u00e3o \u00e9 feita em n\u00edvel de componentes, n\u00e3o em n\u00edvel de c\u00f3digo.","title":"Diferentes Camadas na Arquitetura de Software"},{"location":"fundamentos_web/#aplicacoes-em-camada-unica","text":"Em aplica\u00e7\u00f5es de camada \u00fanica a interface do usu\u00e1rio, o backend da l\u00f3gica do neg\u00f3cio e o banco de dados est\u00e3o na mesma m\u00e1quina. flowchart BT A[(Database)] <--> B[Server] <--> C[User Interface] Aplica\u00e7\u00f5es Desktop s\u00e3o exemplos de aplica\u00e7\u00f5es camada \u00fanica.","title":"Aplica\u00e7\u00f5es em camada \u00fanica"},{"location":"fundamentos_web/#aplicacoes-camada-dupla","text":"Uma aplica\u00e7\u00e3o camada dupla envolve um cliente e um servidor. O cliente cont\u00e9m a interface do usu\u00e1rio com a l\u00f3gica do neg\u00f3cio em uma m\u00e1quina. Enquanto o servidor backend inclui um banco de dados rodando em uma m\u00e1quina diferente. O banco de dados \u00e9 hospedado pelo neg\u00f3cio e t\u00eam o controle sobre ele. flowchart LR A[Cliente]--\"Requisi\u00e7\u00e3o\"-----> B[Servidor Backend] B[Servidor Backend]--\"Resposta\"-----> A Exemplos de utilidade: Aplicativos de produtividade, jogos no browser. Os dados pesados s\u00e3o baixados uma vez e o servidor \u00e9 requisitado apenas para salvar o estado.","title":"Aplica\u00e7\u00f5es Camada Dupla"},{"location":"fundamentos_web/#aplicacoes-tres-camadas","text":"Esse tipo de aplica\u00e7\u00e3o \u00e9 bastante popular e amplamente utilizado na internet. Quase todo website simples como blogs e jornais fazem parte dessa categoria. Em aplica\u00e7\u00f5es Tr\u00eas Camada, a interface do usu\u00e1rio, a l\u00f3gica do neg\u00f3cio e o banco de dados, todos est\u00e3o em m\u00e1quinas diferentes, est\u00e3o separadas fisicamente. flowchart LR subgraph cliente direction LR a1[cliente 1] a2[cliente 2] a5[cliente 3] end cliente <--> a3 a3[Servidor] <--> a4[(Banco de Dados)]","title":"Aplica\u00e7\u00f5es Tr\u00eas Camadas"},{"location":"fundamentos_web/#aplicacoes-n-camadas","text":"Uma aplica\u00e7\u00e3o que tem mais de 3 componentes envolvidos na arquitetura. Componentes podem ser: Cach\u00ea. Mensageria. Load Balancers. Servidores de busca. Componentes para processamento de grandes quantidades de dados. Componentes rodando servi\u00e7os web, micro servi\u00e7os. Popularmente conhecidos como Sistemas distribu\u00eddos . Dois princ\u00edpios do desenvolvimento de software s\u00e3o as chaves para justificar esta arquitetura: Responsabilidade \u00fanica e Separa\u00e7\u00e3o de Conceitos . Diferen\u00e7a entre Layers e Tiers: Layers s\u00e3o em n\u00edve lde c\u00f3digo (conceitual/l\u00f3gico), enquanto tier est\u00e1 relacionado \u00e0 separa\u00e7\u00e3o f\u00edsica dos componentes.","title":"Aplica\u00e7\u00f5es N-Camadas"},{"location":"fundamentos_web/#arquitetura-web","text":"","title":"Arquitetura Web"},{"location":"regressaolinear/","text":"Regress\u00e3o Linear \u00b6 A Regress\u00e3o Linear ajusta um modelo com coeficientes \\(w = (w_1, ..., w_2)\\) minimizar a soma dos res\u00edduos dos quadrados entre os valores da vari\u00e1vel alvo observados no conjunto de dados e os valore preditor pela aproxima\u00e7\u00e3o linear. Matematicamente, ela resolve um problema da forma: \\[ \\min_w{\\|Xw - y\\|_2^2} \\] Modelo : \u00b6 A Regress\u00e3o Linear se utiliza da hip\u00f3tese de que os atributos est\u00e3o linearmente relacionados com a vari\u00e1vel alvo e, desta forma, a vari\u00e1vel alvo pode ser predita utilizando a equa\u00e7\u00e3o da reta: \\[ \\hat{y}(w, x) = w_o + w_1x_1 + ... + w_px_p \\] Onde \\(w_o\\) \u00e9 o intercepto e \\(w = (w_1, ..., w_2)\\) s\u00e3o os coeficientes da reta, estes s\u00e3o os par\u00e2metros do modelo. Fun\u00e7\u00e3o Custo: \u00b6 A fun\u00e7\u00e3o custo usada para Regress\u00e3o Linear tem forma: \\[ J(w) = \\frac{1}{2m} \\sum_{i=1}^m(\\hat{y}^i-y^i)^2 \\] Note Multiplicamos por 1/2 apenas para facilitar os c\u00e1lculos, j\u00e1 que o resultado da minimiza\u00e7\u00e3o \u00e9 o mesmo. Objetivo: Minimizar \\(J(w)\\) com respeito a w. \u00b6 \\[ J(w) = \\frac{1}{2m} \\sum_{i=1}^m(w_o + w_1x_1 + ... + w_px_p-y^i)^2 \\] ou \\[ J(w) = \\frac{1}{2m} \\sum_{i=1}^m(wx^i-y^i)^2 \\] Otimiza\u00e7\u00e3o: Gradiente Descendente \u00b6 Para alcan\u00e7ar o objetivo de achar os coeficientes \\(w\\) que minimizam o custo, utilizamos o algoritmo Gradiente Descendente . Algoritmo Grandiente Descendente Come\u00e7ar com algum \\(w\\) qualquer (inicializar \\(w\\) ). Atualizar \\(w\\) : \\[ w = w - \\alpha \\frac{dJ(w)}{dw} \\] Repetir a atualiza\u00e7\u00e3o de \\(w\\) at\u00e9 chegar se estabelecer no custo m\u00ednimo ou pr\u00f3ximo dele. Derivadas Parciais: \\[ \\frac{\\partial J(w)}{\\partial w} = \\frac{1}{m}\\sum_{i=1}^m(wx^i-y^i)x^i \\] Note A derivada parcial do intercepto \u00e9 \\(\\frac{1}{m}\\sum_{i=1}^m(wx^i-y^i)\\) , mas utilizamos o truque de criar um coluna de 1s como um atributo de \\(x\\) , assim \\(x_o = 1\\) e \\(\\frac{1}{m}\\sum_{i=1}^m(wx^i-y^i) = \\frac{1}{m}\\sum_{i=1}^m(wx^i-y^i)x^i\\) e tudo pode ser calculado junto.","title":"Regress\u00e3o Linear"},{"location":"regressaolinear/#regressao-linear","text":"A Regress\u00e3o Linear ajusta um modelo com coeficientes \\(w = (w_1, ..., w_2)\\) minimizar a soma dos res\u00edduos dos quadrados entre os valores da vari\u00e1vel alvo observados no conjunto de dados e os valore preditor pela aproxima\u00e7\u00e3o linear. Matematicamente, ela resolve um problema da forma: \\[ \\min_w{\\|Xw - y\\|_2^2} \\]","title":"Regress\u00e3o Linear"},{"location":"regressaolinear/#modelo","text":"A Regress\u00e3o Linear se utiliza da hip\u00f3tese de que os atributos est\u00e3o linearmente relacionados com a vari\u00e1vel alvo e, desta forma, a vari\u00e1vel alvo pode ser predita utilizando a equa\u00e7\u00e3o da reta: \\[ \\hat{y}(w, x) = w_o + w_1x_1 + ... + w_px_p \\] Onde \\(w_o\\) \u00e9 o intercepto e \\(w = (w_1, ..., w_2)\\) s\u00e3o os coeficientes da reta, estes s\u00e3o os par\u00e2metros do modelo.","title":"Modelo:"},{"location":"regressaolinear/#funcao-custo","text":"A fun\u00e7\u00e3o custo usada para Regress\u00e3o Linear tem forma: \\[ J(w) = \\frac{1}{2m} \\sum_{i=1}^m(\\hat{y}^i-y^i)^2 \\] Note Multiplicamos por 1/2 apenas para facilitar os c\u00e1lculos, j\u00e1 que o resultado da minimiza\u00e7\u00e3o \u00e9 o mesmo.","title":"Fun\u00e7\u00e3o Custo:"},{"location":"regressaolinear/#objetivo-minimizar-jw-com-respeito-a-w","text":"\\[ J(w) = \\frac{1}{2m} \\sum_{i=1}^m(w_o + w_1x_1 + ... + w_px_p-y^i)^2 \\] ou \\[ J(w) = \\frac{1}{2m} \\sum_{i=1}^m(wx^i-y^i)^2 \\]","title":"Objetivo: Minimizar \\(J(w)\\) com respeito a w."},{"location":"regressaolinear/#otimizacao-gradiente-descendente","text":"Para alcan\u00e7ar o objetivo de achar os coeficientes \\(w\\) que minimizam o custo, utilizamos o algoritmo Gradiente Descendente . Algoritmo Grandiente Descendente Come\u00e7ar com algum \\(w\\) qualquer (inicializar \\(w\\) ). Atualizar \\(w\\) : \\[ w = w - \\alpha \\frac{dJ(w)}{dw} \\] Repetir a atualiza\u00e7\u00e3o de \\(w\\) at\u00e9 chegar se estabelecer no custo m\u00ednimo ou pr\u00f3ximo dele. Derivadas Parciais: \\[ \\frac{\\partial J(w)}{\\partial w} = \\frac{1}{m}\\sum_{i=1}^m(wx^i-y^i)x^i \\] Note A derivada parcial do intercepto \u00e9 \\(\\frac{1}{m}\\sum_{i=1}^m(wx^i-y^i)\\) , mas utilizamos o truque de criar um coluna de 1s como um atributo de \\(x\\) , assim \\(x_o = 1\\) e \\(\\frac{1}{m}\\sum_{i=1}^m(wx^i-y^i) = \\frac{1}{m}\\sum_{i=1}^m(wx^i-y^i)x^i\\) e tudo pode ser calculado junto.","title":"Otimiza\u00e7\u00e3o: Gradiente Descendente"},{"location":"regressaologistica/","text":"7 Passos do Machine Learning \u00b6 Coleta de Dados Processamento e Prepara\u00e7\u00e3o de dados Engenharia de Features Sele\u00e7\u00e3o de Modelos Treinamento de Modelos e Pipeline de Dados Valida\u00e7\u00e3o de Modelo Persist\u00eancia do Modelo","title":"7 Passos do Machine Learning"},{"location":"regressaologistica/#7-passos-do-machine-learning","text":"Coleta de Dados Processamento e Prepara\u00e7\u00e3o de dados Engenharia de Features Sele\u00e7\u00e3o de Modelos Treinamento de Modelos e Pipeline de Dados Valida\u00e7\u00e3o de Modelo Persist\u00eancia do Modelo","title":"7 Passos do Machine Learning"}]}